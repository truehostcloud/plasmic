// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oYWs1jXLUht24zyQBdCd5F
// Component: dWRKivg8dUht
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  SingleChoiceArg,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import defaultcss from "../../../plasmic/PP__plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "../../../plasmic/PP__plasmickit_init_token.module.css"; // plasmic-import: oYWs1jXLUht24zyQBdCd5F/projectcss
import Button from "../../widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import sty from "./PlasmicInitTokenContainer.module.css"; // plasmic-import: dWRKivg8dUht/css

export type PlasmicInitTokenContainer__VariantMembers = {
  state: "loading" | "error" | "done";
};

export type PlasmicInitTokenContainer__VariantsArgs = {
  state?: SingleChoiceArg<"loading" | "error" | "done">;
};

type VariantPropType = keyof PlasmicInitTokenContainer__VariantsArgs;
export const PlasmicInitTokenContainer__VariantProps =
  new Array<VariantPropType>("state");

export type PlasmicInitTokenContainer__ArgsType = {
  avatarImgUrl?: string;
};

type ArgPropType = keyof PlasmicInitTokenContainer__ArgsType;
export const PlasmicInitTokenContainer__ArgProps = new Array<ArgPropType>(
  "avatarImgUrl"
);

export type PlasmicInitTokenContainer__OverridesType = {
  root?: p.Flex<"div">;
  authorizeButton?: p.Flex<typeof Button>;
};

export interface DefaultInitTokenContainerProps {
  avatarImgUrl?: string;
  state?: SingleChoiceArg<"loading" | "error" | "done">;
  className?: string;
}

function PlasmicInitTokenContainer__RenderFunc(props: {
  variants: PlasmicInitTokenContainer__VariantsArgs;
  args: PlasmicInitTokenContainer__ArgsType;
  overrides: PlasmicInitTokenContainer__OverridesType;
  dataFetches?: PlasmicInitTokenContainer__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_done]: hasVariant(variants, "state", "done"),
        [sty.root__state_error]: hasVariant(variants, "state", "error"),
        [sty.root__state_loading]: hasVariant(variants, "state", "loading"),
      })}
    >
      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__iGeHa,
          {
            [sty.text__state_loading__iGeHaw4Rpw]: hasVariant(
              variants,
              "state",
              "loading"
            ),
          }
        )}
      >
        {"Authorize Plasmic CLI"}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__v6QVe,
          {
            [sty.text__state_done__v6QVejSd8X]: hasVariant(
              variants,
              "state",
              "done"
            ),

            [sty.text__state_error__v6QVejArRi]: hasVariant(
              variants,
              "state",
              "error"
            ),
          }
        )}
      >
        {hasVariant(variants, "state", "done")
          ? "Done! You may now close this tab."
          : hasVariant(variants, "state", "error")
          ? "Do you want to authorize Plasmic CLI to have access to your projects?"
          : "Do you want to authorize Plasmic CLI to have access to your projects?"}
      </div>

      {(hasVariant(variants, "state", "done") ? false : true) ? (
        <Button
          data-plasmic-name={"authorizeButton"}
          data-plasmic-override={overrides.authorizeButton}
          className={classNames("__wab_instance", sty.authorizeButton, {
            [sty.authorizeButton__state_done]: hasVariant(
              variants,
              "state",
              "done"
            ),

            [sty.authorizeButton__state_error]: hasVariant(
              variants,
              "state",
              "error"
            ),

            [sty.authorizeButton__state_loading]: hasVariant(
              variants,
              "state",
              "loading"
            ),
          })}
          disabled={
            hasVariant(variants, "state", "loading")
              ? ("disabled" as const)
              : undefined
          }
          size={"wide" as const}
          startIcon={null}
          type={"primary" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__imVdJ,
              {
                [sty.text__state_loading__imVdJw4Rpw]: hasVariant(
                  variants,
                  "state",
                  "loading"
                ),
              }
            )}
          >
            {hasVariant(variants, "state", "loading")
              ? "Loading..."
              : "Authorize"}
          </div>
        </Button>
      ) : null}
      {(hasVariant(variants, "state", "error") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__km2Ku,
            {
              [sty.text__state_done__km2KujSd8X]: hasVariant(
                variants,
                "state",
                "done"
              ),

              [sty.text__state_error__km2KujArRi]: hasVariant(
                variants,
                "state",
                "error"
              ),
            }
          )}
        >
          {hasVariant(variants, "state", "error")
            ? "Authorization error. Please try again."
            : ""}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "authorizeButton"],
  authorizeButton: ["authorizeButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  authorizeButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInitTokenContainer__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicInitTokenContainer__VariantsArgs;
  args?: PlasmicInitTokenContainer__ArgsType;
  overrides?: NodeOverridesType<T>;
  dataFetches?: PlasmicInitTokenContainer__Fetches;
} & Omit<PlasmicInitTokenContainer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicInitTokenContainer__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInitTokenContainer__ArgProps,
      internalVariantPropNames: PlasmicInitTokenContainer__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicInitTokenContainer__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInitTokenContainer";
  } else {
    func.displayName = `PlasmicInitTokenContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicInitTokenContainer = Object.assign(
  // Top-level PlasmicInitTokenContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    authorizeButton: makeNodeComponent("authorizeButton"),

    // Metadata about props expected for PlasmicInitTokenContainer
    internalVariantProps: PlasmicInitTokenContainer__VariantProps,
    internalArgProps: PlasmicInitTokenContainer__ArgProps,
  }
);

export default PlasmicInitTokenContainer;
/* prettier-ignore-end */
