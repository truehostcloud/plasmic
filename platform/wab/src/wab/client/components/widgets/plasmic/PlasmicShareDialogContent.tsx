// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kA1Hysr5ZeimtATHTDJz5B
// Component: cWsnP3_PIix

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Checkbox from "../Checkbox"; // plasmic-import: W-rO7NZqPjZ/component
import Select from "../Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../Select__Option"; // plasmic-import: rr-LWdMni2G/component
import Textbox from "../Textbox"; // plasmic-import: pA22NEzDCsn_/component
import PermissionItem from "./PermissionItem"; // plasmic-import: GFrmKeyhlA/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../../../plasmic/PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "../../../plasmic/PP__plasmickit_share_dialog.module.css"; // plasmic-import: kA1Hysr5ZeimtATHTDJz5B/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../../../plasmic/plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicShareDialogContent.module.css"; // plasmic-import: cWsnP3_PIix/css

import LinkIcon from "../../../plasmic/plasmic_kit/PlasmicIcon__Link"; // plasmic-import: BQBWbw0fg66Lw/icon
import ResetIcon from "../../../plasmic/plasmic_kit/PlasmicIcon__Reset"; // plasmic-import: Dj3u-HuPv94sN/icon
import ArrowRightsvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import PlussvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import SearchsvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicShareDialogContent__VariantMembers = {
  state: "submitting" | "invalidEmail" | "unlogged" | "noPermToShare";
  shareByLinkAllowed: "yes" | "no";
  resourceType: "project" | "workspace" | "team";
  permsCascade: "showWorkspace" | "showTeam";
  noShareByLink: "noShareByLink";
};
export type PlasmicShareDialogContent__VariantsArgs = {
  state?: SingleChoiceArg<
    "submitting" | "invalidEmail" | "unlogged" | "noPermToShare"
  >;

  shareByLinkAllowed?: SingleChoiceArg<"yes" | "no">;
  resourceType?: SingleChoiceArg<"project" | "workspace" | "team">;
  permsCascade?: MultiChoiceArg<"showWorkspace" | "showTeam">;
  noShareByLink?: SingleBooleanChoiceArg<"noShareByLink">;
};
type VariantPropType = keyof PlasmicShareDialogContent__VariantsArgs;
export const PlasmicShareDialogContent__VariantProps =
  new Array<VariantPropType>(
    "state",
    "shareByLinkAllowed",
    "resourceType",
    "permsCascade",
    "noShareByLink"
  );

export type PlasmicShareDialogContent__ArgsType = {
  existingPermItems?: React.ReactNode;
};
type ArgPropType = keyof PlasmicShareDialogContent__ArgsType;
export const PlasmicShareDialogContent__ArgProps = new Array<ArgPropType>(
  "existingPermItems"
);

export type PlasmicShareDialogContent__OverridesType = {
  root?: Flex__<"div">;
  shareByLinkSwitch?: Flex__<typeof Checkbox>;
  copyLink?: Flex__<typeof Button>;
  shareByLinkPermDropdown?: Flex__<typeof Select>;
  cascadeWorkspace?: Flex__<"a">;
  cascadeTeam?: Flex__<"a">;
  byInviteTab?: Flex__<"div">;
  newUserEmail?: Flex__<typeof Textbox>;
  newUserRoleDropdown?: Flex__<typeof Select>;
  sendInviteButton?: Flex__<typeof Button>;
  requireSignUpSwitch?: Flex__<typeof Checkbox>;
  loginLink?: Flex__<"a">;
  permsContainer?: Flex__<"div">;
};

export interface DefaultShareDialogContentProps {
  existingPermItems?: React.ReactNode;
  state?: SingleChoiceArg<
    "submitting" | "invalidEmail" | "unlogged" | "noPermToShare"
  >;

  shareByLinkAllowed?: SingleChoiceArg<"yes" | "no">;
  resourceType?: SingleChoiceArg<"project" | "workspace" | "team">;
  permsCascade?: MultiChoiceArg<"showWorkspace" | "showTeam">;
  noShareByLink?: SingleBooleanChoiceArg<"noShareByLink">;
  className?: string;
}

const $$ = {};

function PlasmicShareDialogContent__RenderFunc(props: {
  variants: PlasmicShareDialogContent__VariantsArgs;
  args: PlasmicShareDialogContent__ArgsType;
  overrides: PlasmicShareDialogContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
      {
        path: "shareByLinkAllowed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.shareByLinkAllowed,
      },
      {
        path: "resourceType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.resourceType,
      },
      {
        path: "permsCascade",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.permsCascade,
      },
      {
        path: "shareByLinkSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "shareByLinkAllowed", "no")
            ? (() => {
                try {
                  return false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : "isChecked",
      },
      {
        path: "shareByLinkPermDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "value1",
      },
      {
        path: "newUserRoleDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "value1",
      },
      {
        path: "requireSignUpSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "shareByLinkAllowed", "no") ? [] : "isChecked",
      },
      {
        path: "noShareByLink",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noShareByLink,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootresourceType_project]: hasVariant(
            $state,
            "resourceType",
            "project"
          ),
          [sty.rootresourceType_team]: hasVariant(
            $state,
            "resourceType",
            "team"
          ),
          [sty.rootshareByLinkAllowed_no]: hasVariant(
            $state,
            "shareByLinkAllowed",
            "no"
          ),
          [sty.rootshareByLinkAllowed_yes]: hasVariant(
            $state,
            "shareByLinkAllowed",
            "yes"
          ),
          [sty.rootstate_invalidEmail]: hasVariant(
            $state,
            "state",
            "invalidEmail"
          ),
          [sty.rootstate_noPermToShare]: hasVariant(
            $state,
            "state",
            "noPermToShare"
          ),
          [sty.rootstate_submitting]: hasVariant($state, "state", "submitting"),
          [sty.rootstate_unlogged]: hasVariant($state, "state", "unlogged"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nnT7R, {
          [sty.freeBoxresourceType_team__nnT7Rhn7Mj]: hasVariant(
            $state,
            "resourceType",
            "team"
          ),
          [sty.freeBoxresourceType_workspace__nnT7Rn5Uns]: hasVariant(
            $state,
            "resourceType",
            "workspace"
          ),
          [sty.freeBoxshareByLinkAllowed_no__nnT7RtjDou]: hasVariant(
            $state,
            "shareByLinkAllowed",
            "no"
          ),
          [sty.freeBoxstate_noPermToShare__nnT7RgPB]: hasVariant(
            $state,
            "state",
            "noPermToShare"
          ),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1R,
            {
              [sty.textresourceType_team___1Rhn7Mj]: hasVariant(
                $state,
                "resourceType",
                "team"
              ),
              [sty.textshareByLinkAllowed_yes___1Rn4Zx6]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "yes"
              ),
            }
          )}
        >
          {hasVariant($state, "resourceType", "team")
            ? "Anyone with the link join the team as"
            : "Who can open this Plasmic project?"}
        </div>
        {(
          hasVariant($state, "noShareByLink", "noShareByLink")
            ? false
            : hasVariant($state, "shareByLinkAllowed", "yes")
            ? true
            : true
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yn7Fa, {
              [sty.freeBoxnoShareByLink__yn7FadsUq5]: hasVariant(
                $state,
                "noShareByLink",
                "noShareByLink"
              ),
              [sty.freeBoxpermsCascade_showWorkspace__yn7FaGxhbk]: hasVariant(
                $state,
                "permsCascade",
                "showWorkspace"
              ),
              [sty.freeBoxresourceType_project__yn7Fawbkdw]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
              [sty.freeBoxresourceType_team__yn7FaHn7Mj]: hasVariant(
                $state,
                "resourceType",
                "team"
              ),
              [sty.freeBoxresourceType_workspace__yn7FaN5Uns]: hasVariant(
                $state,
                "resourceType",
                "workspace"
              ),
              [sty.freeBoxshareByLinkAllowed_no__yn7FaTjDou]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "no"
              ),
              [sty.freeBoxshareByLinkAllowed_yes__yn7Fan4Zx6]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "yes"
              ),
            })}
          >
            {(
              hasVariant($state, "resourceType", "workspace") ? false : true
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hbZwy, {
                  [sty.freeBoxpermsCascade_showTeam__hbZwy57XP]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                  [sty.freeBoxpermsCascade_showWorkspace__hbZwyGxhbk]:
                    hasVariant($state, "permsCascade", "showWorkspace"),
                  [sty.freeBoxresourceType_project__hbZwywbkdw]: hasVariant(
                    $state,
                    "resourceType",
                    "project"
                  ),
                  [sty.freeBoxresourceType_team__hbZwyHn7Mj]: hasVariant(
                    $state,
                    "resourceType",
                    "team"
                  ),
                  [sty.freeBoxresourceType_workspace__hbZwyN5Uns]: hasVariant(
                    $state,
                    "resourceType",
                    "workspace"
                  ),
                  [sty.freeBoxshareByLinkAllowed_no__hbZwyTjDou]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.freeBoxshareByLinkAllowed_yes__hbZwyn4Zx6]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                })}
              >
                <Checkbox
                  data-plasmic-name={"shareByLinkSwitch"}
                  data-plasmic-override={overrides.shareByLinkSwitch}
                  className={classNames(
                    "__wab_instance",
                    sty.shareByLinkSwitch,
                    {
                      [sty.shareByLinkSwitchpermsCascade_showTeam]: hasVariant(
                        $state,
                        "permsCascade",
                        "showTeam"
                      ),
                      [sty.shareByLinkSwitchpermsCascade_showWorkspace]:
                        hasVariant($state, "permsCascade", "showWorkspace"),
                      [sty.shareByLinkSwitchresourceType_team]: hasVariant(
                        $state,
                        "resourceType",
                        "team"
                      ),
                      [sty.shareByLinkSwitchshareByLinkAllowed_no]: hasVariant(
                        $state,
                        "shareByLinkAllowed",
                        "no"
                      ),
                      [sty.shareByLinkSwitchshareByLinkAllowed_yes]: hasVariant(
                        $state,
                        "shareByLinkAllowed",
                        "yes"
                      ),
                      [sty.shareByLinkSwitchstate_noPermToShare]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                      [sty.shareByLinkSwitchstate_submitting]: hasVariant(
                        $state,
                        "state",
                        "submitting"
                      ),
                      [sty.shareByLinkSwitchstate_unlogged]: hasVariant(
                        $state,
                        "state",
                        "unlogged"
                      ),
                    }
                  )}
                  isChecked={
                    generateStateValueProp($state, [
                      "shareByLinkSwitch",
                      "isChecked",
                    ]) ?? false
                  }
                  isDisabled={
                    hasVariant($state, "state", "noPermToShare")
                      ? true
                      : hasVariant($state, "state", "unlogged")
                      ? true
                      : hasVariant($state, "state", "submitting")
                      ? true
                      : undefined
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "shareByLinkSwitch",
                      "isChecked",
                    ])(eventArgs[0]);
                  }}
                >
                  {hasVariant($state, "resourceType", "team")
                    ? "Invite by link is enabled"
                    : "Share by link is enabled"}
                </Checkbox>
                {(
                  hasVariant($state, "shareByLinkAllowed", "no") ? false : true
                ) ? (
                  <Button
                    data-plasmic-name={"copyLink"}
                    data-plasmic-override={overrides.copyLink}
                    className={classNames("__wab_instance", sty.copyLink, {
                      [sty.copyLinkshareByLinkAllowed_no]: hasVariant(
                        $state,
                        "shareByLinkAllowed",
                        "no"
                      ),
                    })}
                    endIcon={
                      <ChevronDownsvgIcon
                        className={classNames(projectcss.all, sty.svg___9J48P)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <LinkIcon
                        className={classNames(projectcss.all, sty.svg__keRtx)}
                        role={"img"}
                      />
                    }
                    type={["link"]}
                    withIcons={["startIcon"]}
                  >
                    {"Copy Link"}
                  </Button>
                ) : null}
              </Stack__>
            ) : null}
            {(
              hasVariant($state, "resourceType", "workspace")
                ? false
                : hasVariant($state, "shareByLinkAllowed", "no")
                ? false
                : true
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fdzf5, {
                  [sty.freeBoxresourceType_team__fdzf5Hn7Mj]: hasVariant(
                    $state,
                    "resourceType",
                    "team"
                  ),
                  [sty.freeBoxresourceType_workspace__fdzf5N5Uns]: hasVariant(
                    $state,
                    "resourceType",
                    "workspace"
                  ),
                  [sty.freeBoxshareByLinkAllowed_no__fdzf5TjDou]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.freeBoxshareByLinkAllowed_yes__fdzf5N4Zx6]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mwPkd,
                    {
                      [sty.textresourceType_team__mwPkdHn7Mj]: hasVariant(
                        $state,
                        "resourceType",
                        "team"
                      ),
                      [sty.textshareByLinkAllowed_yes__mwPkdn4Zx6]: hasVariant(
                        $state,
                        "shareByLinkAllowed",
                        "yes"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "resourceType", "team")
                    ? "Anyone with the link join the team as"
                    : "Any Plasmic user with the link is a"}
                </div>
                <Select
                  data-plasmic-name={"shareByLinkPermDropdown"}
                  data-plasmic-override={overrides.shareByLinkPermDropdown}
                  className={classNames(
                    "__wab_instance",
                    sty.shareByLinkPermDropdown
                  )}
                  icon={
                    <PlussvgIcon
                      className={classNames(projectcss.all, sty.svg__lJfWp)}
                      role={"img"}
                    />
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "shareByLinkPermDropdown",
                      "value",
                    ])(eventArgs[0]);
                  }}
                  type={"bordered"}
                  value={generateStateValueProp($state, [
                    "shareByLinkPermDropdown",
                    "value",
                  ])}
                >
                  <Select__Option
                    className={classNames("__wab_instance", sty.option__xuurC)}
                    value={"value1"}
                  >
                    {"viewer"}
                  </Select__Option>
                </Select>
              </Stack__>
            ) : null}
            {(
              hasVariant($state, "permsCascade", "showWorkspace") ? true : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__zalqW, {
                  [sty.freeBoxpermsCascade_showTeam__zalqW57XP]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                  [sty.freeBoxpermsCascade_showWorkspace__zalqWGxhbk]:
                    hasVariant($state, "permsCascade", "showWorkspace"),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__blhvW
                  )}
                >
                  {"Everyone in "}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"cascadeWorkspace"}
                  data-plasmic-override={overrides.cascadeWorkspace}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.cascadeWorkspace,
                    {
                      [sty.cascadeWorkspacepermsCascade_showWorkspace]:
                        hasVariant($state, "permsCascade", "showWorkspace"),
                    }
                  )}
                  platform={"react"}
                >
                  {"Workspace Name"}
                </PlasmicLink__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zVagp
                  )}
                >
                  {" workspace can access."}
                </div>
              </div>
            ) : null}
            {(hasVariant($state, "permsCascade", "showTeam") ? true : false) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__i074N, {
                  [sty.freeBoxpermsCascade_showTeam__i074N57XP]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                  [sty.freeBoxstate_noPermToShare__i074NgPB]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cWsLd
                  )}
                >
                  {"Everyone in "}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"cascadeTeam"}
                  data-plasmic-override={overrides.cascadeTeam}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.cascadeTeam,
                    {
                      [sty.cascadeTeampermsCascade_showWorkspace]: hasVariant(
                        $state,
                        "permsCascade",
                        "showWorkspace"
                      ),
                      [sty.cascadeTeamresourceType_project]: hasVariant(
                        $state,
                        "resourceType",
                        "project"
                      ),
                      [sty.cascadeTeamresourceType_team]: hasVariant(
                        $state,
                        "resourceType",
                        "team"
                      ),
                      [sty.cascadeTeamresourceType_workspace]: hasVariant(
                        $state,
                        "resourceType",
                        "workspace"
                      ),
                      [sty.cascadeTeamshareByLinkAllowed_yes]: hasVariant(
                        $state,
                        "shareByLinkAllowed",
                        "yes"
                      ),
                    }
                  )}
                  platform={"react"}
                >
                  {"Team Name"}
                </PlasmicLink__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oz7VX,
                    {
                      [sty.textstate_noPermToShare__oz7VXgPB]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                    }
                  )}
                >
                  {" organization can access."}
                </div>
              </div>
            ) : null}
          </Stack__>
        ) : null}
        <Stack__
          as={"div"}
          data-plasmic-name={"byInviteTab"}
          data-plasmic-override={overrides.byInviteTab}
          hasGap={true}
          className={classNames(projectcss.all, sty.byInviteTab, {
            [sty.byInviteTabresourceType_project]: hasVariant(
              $state,
              "resourceType",
              "project"
            ),
            [sty.byInviteTabresourceType_team]: hasVariant(
              $state,
              "resourceType",
              "team"
            ),
            [sty.byInviteTabresourceType_workspace]: hasVariant(
              $state,
              "resourceType",
              "workspace"
            ),
            [sty.byInviteTabshareByLinkAllowed_no]: hasVariant(
              $state,
              "shareByLinkAllowed",
              "no"
            ),
            [sty.byInviteTabshareByLinkAllowed_yes]: hasVariant(
              $state,
              "shareByLinkAllowed",
              "yes"
            ),
            [sty.byInviteTabstate_noPermToShare]: hasVariant(
              $state,
              "state",
              "noPermToShare"
            ),
            [sty.byInviteTabstate_submitting]: hasVariant(
              $state,
              "state",
              "submitting"
            ),
            [sty.byInviteTabstate_unlogged]: hasVariant(
              $state,
              "state",
              "unlogged"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___1IUsx, {
              [sty.freeBoxpermsCascade_showTeam___1IUsx57XP]: hasVariant(
                $state,
                "permsCascade",
                "showTeam"
              ),
              [sty.freeBoxstate_noPermToShare___1IUsxgPB]: hasVariant(
                $state,
                "state",
                "noPermToShare"
              ),
              [sty.freeBoxstate_unlogged___1IUsxvijMz]: hasVariant(
                $state,
                "state",
                "unlogged"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vTye, {
                [sty.freeBoxpermsCascade_showTeam__vTye57XP]: hasVariant(
                  $state,
                  "permsCascade",
                  "showTeam"
                ),
                [sty.freeBoxpermsCascade_showWorkspace__vTyeGxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
                [sty.freeBoxstate_noPermToShare__vTyEgPB]: hasVariant(
                  $state,
                  "state",
                  "noPermToShare"
                ),
              })}
            >
              <Textbox
                data-plasmic-name={"newUserEmail"}
                data-plasmic-override={overrides.newUserEmail}
                disabled={
                  hasVariant($state, "state", "noPermToShare")
                    ? true
                    : hasVariant($state, "state", "unlogged")
                    ? true
                    : hasVariant($state, "state", "submitting")
                    ? true
                    : undefined
                }
                error={
                  hasVariant($state, "state", "invalidEmail") ? true : undefined
                }
                placeholder={"Invite someone by email…"}
                prefixIcon={
                  <SearchsvgIcon
                    className={classNames(projectcss.all, sty.svg__yai2I)}
                    role={"img"}
                  />
                }
                styleType={["bordered"]}
                suffixIcon={
                  <ClosesvgIcon
                    className={classNames(projectcss.all, sty.svg___9G5Fh)}
                    role={"img"}
                  />
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kZecO,
                  {
                    [sty.textstate_noPermToShare__kZecOgPB]: hasVariant(
                      $state,
                      "state",
                      "noPermToShare"
                    ),
                    [sty.textstate_submitting__kZecOzeWbX]: hasVariant(
                      $state,
                      "state",
                      "submitting"
                    ),
                    [sty.textstate_unlogged__kZecOvijMz]: hasVariant(
                      $state,
                      "state",
                      "unlogged"
                    ),
                  }
                )}
              >
                {"as"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__elohb, {
                  [sty.freeBoxstate_noPermToShare__elohBgPB]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                  [sty.freeBoxstate_submitting__elohBzeWbX]: hasVariant(
                    $state,
                    "state",
                    "submitting"
                  ),
                  [sty.freeBoxstate_unlogged__elohBvijMz]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                })}
              >
                <Select
                  data-plasmic-name={"newUserRoleDropdown"}
                  data-plasmic-override={overrides.newUserRoleDropdown}
                  className={classNames(
                    "__wab_instance",
                    sty.newUserRoleDropdown,
                    {
                      [sty.newUserRoleDropdownresourceType_workspace]:
                        hasVariant($state, "resourceType", "workspace"),
                      [sty.newUserRoleDropdownstate_noPermToShare]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                      [sty.newUserRoleDropdownstate_submitting]: hasVariant(
                        $state,
                        "state",
                        "submitting"
                      ),
                    }
                  )}
                  icon={
                    <PlussvgIcon
                      className={classNames(projectcss.all, sty.svg__frLSs)}
                      role={"img"}
                    />
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "newUserRoleDropdown",
                      "value",
                    ])(eventArgs[0]);
                  }}
                  type={"bordered"}
                  value={generateStateValueProp($state, [
                    "newUserRoleDropdown",
                    "value",
                  ])}
                >
                  <Select__Option
                    className={classNames("__wab_instance", sty.option___4Unkq)}
                    value={"value1"}
                  >
                    {"viewer"}
                  </Select__Option>
                </Select>
              </Stack__>
              <Button
                data-plasmic-name={"sendInviteButton"}
                data-plasmic-override={overrides.sendInviteButton}
                className={classNames("__wab_instance", sty.sendInviteButton, {
                  [sty.sendInviteButtonpermsCascade_showWorkspace]: hasVariant(
                    $state,
                    "permsCascade",
                    "showWorkspace"
                  ),
                  [sty.sendInviteButtonresourceType_workspace]: hasVariant(
                    $state,
                    "resourceType",
                    "workspace"
                  ),
                  [sty.sendInviteButtonstate_invalidEmail]: hasVariant(
                    $state,
                    "state",
                    "invalidEmail"
                  ),
                  [sty.sendInviteButtonstate_noPermToShare]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                  [sty.sendInviteButtonstate_submitting]: hasVariant(
                    $state,
                    "state",
                    "submitting"
                  ),
                  [sty.sendInviteButtonstate_unlogged]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                })}
                disabled={
                  hasVariant($state, "state", "noPermToShare")
                    ? true
                    : hasVariant($state, "state", "unlogged")
                    ? true
                    : hasVariant($state, "state", "invalidEmail")
                    ? true
                    : hasVariant($state, "state", "submitting")
                    ? true
                    : undefined
                }
                endIcon={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__kjUa7)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightsvgIcon
                    className={classNames(projectcss.all, sty.svg__n9OjC)}
                    role={"img"}
                  />
                }
                type={["primary"]}
              >
                {hasVariant($state, "state", "noPermToShare")
                  ? "Invite"
                  : hasVariant($state, "state", "unlogged")
                  ? "Invite"
                  : hasVariant($state, "state", "submitting")
                  ? "Inviting..."
                  : "Invite"}
              </Button>
            </Stack__>
            {(
              hasVariant($state, "resourceType", "workspace") ? false : true
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sSlzt, {
                  [sty.freeBoxpermsCascade_showTeam__sSlzt57XP]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                  [sty.freeBoxpermsCascade_showWorkspace__sSlztGxhbk]:
                    hasVariant($state, "permsCascade", "showWorkspace"),
                  [sty.freeBoxresourceType_project__sSlztwbkdw]: hasVariant(
                    $state,
                    "resourceType",
                    "project"
                  ),
                  [sty.freeBoxresourceType_team__sSlztHn7Mj]: hasVariant(
                    $state,
                    "resourceType",
                    "team"
                  ),
                  [sty.freeBoxresourceType_workspace__sSlztN5Uns]: hasVariant(
                    $state,
                    "resourceType",
                    "workspace"
                  ),
                  [sty.freeBoxshareByLinkAllowed_no__sSlztTjDou]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.freeBoxshareByLinkAllowed_yes__sSlztn4Zx6]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                })}
              >
                <Checkbox
                  data-plasmic-name={"requireSignUpSwitch"}
                  data-plasmic-override={overrides.requireSignUpSwitch}
                  className={classNames(
                    "__wab_instance",
                    sty.requireSignUpSwitch,
                    {
                      [sty.requireSignUpSwitchpermsCascade_showTeam]:
                        hasVariant($state, "permsCascade", "showTeam"),
                      [sty.requireSignUpSwitchpermsCascade_showWorkspace]:
                        hasVariant($state, "permsCascade", "showWorkspace"),
                      [sty.requireSignUpSwitchresourceType_team]: hasVariant(
                        $state,
                        "resourceType",
                        "team"
                      ),
                      [sty.requireSignUpSwitchshareByLinkAllowed_no]:
                        hasVariant($state, "shareByLinkAllowed", "no"),
                      [sty.requireSignUpSwitchstate_noPermToShare]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                      [sty.requireSignUpSwitchstate_submitting]: hasVariant(
                        $state,
                        "state",
                        "submitting"
                      ),
                      [sty.requireSignUpSwitchstate_unlogged]: hasVariant(
                        $state,
                        "state",
                        "unlogged"
                      ),
                    }
                  )}
                  isChecked={
                    generateStateValueProp($state, [
                      "requireSignUpSwitch",
                      "isChecked",
                    ]) ?? false
                  }
                  isDisabled={
                    hasVariant($state, "state", "noPermToShare")
                      ? true
                      : hasVariant($state, "state", "unlogged")
                      ? true
                      : hasVariant($state, "state", "submitting")
                      ? true
                      : undefined
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "requireSignUpSwitch",
                      "isChecked",
                    ])(eventArgs[0]);
                  }}
                >
                  {"Invite existing Plasmic users only"}
                </Checkbox>
              </Stack__>
            ) : null}
          </div>
          {(
            hasVariant($state, "state", "noPermToShare")
              ? true
              : hasVariant($state, "state", "unlogged")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__dYv8H, {
                [sty.freeBoxpermsCascade_showTeam__dYv8H57XP]: hasVariant(
                  $state,
                  "permsCascade",
                  "showTeam"
                ),
                [sty.freeBoxpermsCascade_showWorkspace__dYv8HGxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
                [sty.freeBoxshareByLinkAllowed_no__dYv8HtjDou]: hasVariant(
                  $state,
                  "shareByLinkAllowed",
                  "no"
                ),
                [sty.freeBoxstate_noPermToShare__dYv8HgPB]: hasVariant(
                  $state,
                  "state",
                  "noPermToShare"
                ),
                [sty.freeBoxstate_submitting__dYv8HzeWbX]: hasVariant(
                  $state,
                  "state",
                  "submitting"
                ),
                [sty.freeBoxstate_unlogged__dYv8HvijMz]: hasVariant(
                  $state,
                  "state",
                  "unlogged"
                ),
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__ekPne, {
                  [sty.freeBoxshareByLinkAllowed_no__ekPnetjDou]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.freeBoxshareByLinkAllowed_yes__ekPnEn4Zx6]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                  [sty.freeBoxstate_noPermToShare__ekPnEgPB]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                  [sty.freeBoxstate_submitting__ekPnEzeWbX]: hasVariant(
                    $state,
                    "state",
                    "submitting"
                  ),
                  [sty.freeBoxstate_unlogged__ekPnEvijMz]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sNt5G,
                    {
                      [sty.textstate_noPermToShare__sNt5GgPB]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                      [sty.textstate_unlogged__sNt5GvijMz]: hasVariant(
                        $state,
                        "state",
                        "unlogged"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "state", "noPermToShare")
                    ? "You don't have permission to share this resource."
                    : hasVariant($state, "state", "unlogged")
                    ? "Please "
                    : "Invitees can directly create an account, skipping the waitlist."}
                </div>
                {(hasVariant($state, "state", "unlogged") ? true : false) ? (
                  <PlasmicLink__
                    data-plasmic-name={"loginLink"}
                    data-plasmic-override={overrides.loginLink}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.loginLink,
                      {
                        [sty.loginLinkshareByLinkAllowed_no]: hasVariant(
                          $state,
                          "shareByLinkAllowed",
                          "no"
                        ),
                        [sty.loginLinkshareByLinkAllowed_yes]: hasVariant(
                          $state,
                          "shareByLinkAllowed",
                          "yes"
                        ),
                        [sty.loginLinkstate_noPermToShare]: hasVariant(
                          $state,
                          "state",
                          "noPermToShare"
                        ),
                        [sty.loginLinkstate_unlogged]: hasVariant(
                          $state,
                          "state",
                          "unlogged"
                        ),
                      }
                    )}
                    href={
                      hasVariant($state, "state", "unlogged")
                        ? "/login"
                        : undefined
                    }
                    platform={"react"}
                  >
                    {hasVariant($state, "state", "unlogged")
                      ? "login"
                      : "Invitees can directly create an account, skipping the waitlist."}
                  </PlasmicLink__>
                ) : null}
                {(hasVariant($state, "state", "unlogged") ? true : false) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q89Gp,
                      {
                        [sty.textstate_noPermToShare__q89GpgPB]: hasVariant(
                          $state,
                          "state",
                          "noPermToShare"
                        ),
                        [sty.textstate_unlogged__q89GpvijMz]: hasVariant(
                          $state,
                          "state",
                          "unlogged"
                        ),
                      }
                    )}
                  >
                    {hasVariant($state, "state", "unlogged")
                      ? " to send invitations."
                      : "Invitees can directly create an account, skipping the waitlist."}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          <Stack__
            as={"div"}
            data-plasmic-name={"permsContainer"}
            data-plasmic-override={overrides.permsContainer}
            hasGap={true}
            className={classNames(projectcss.all, sty.permsContainer, {
              [sty.permsContainerresourceType_project]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__bIvgb
                    )}
                    email={"yang@plasmic.app"}
                    role={"owner"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__ar3M)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__zQRdb
                    )}
                    email={"chungwu@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__hB6Fb)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__vmwOo
                    )}
                    email={"ydmao@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__xozL8)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem___7ZJgk
                    )}
                    email={"leo@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__hBaQ)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__oR74D
                    )}
                    email={"ray@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg___3ETf)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem___9OdCb
                    )}
                    email={"ray@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__iZSo0)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__bnaMj
                    )}
                    email={"ray@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__oieCy)}
                        role={"img"}
                      />
                    }
                  />
                </React.Fragment>
              ),

              value: args.existingPermItems,
            })}
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "shareByLinkSwitch",
    "copyLink",
    "shareByLinkPermDropdown",
    "cascadeWorkspace",
    "cascadeTeam",
    "byInviteTab",
    "newUserEmail",
    "newUserRoleDropdown",
    "sendInviteButton",
    "requireSignUpSwitch",
    "loginLink",
    "permsContainer",
  ],

  shareByLinkSwitch: ["shareByLinkSwitch"],
  copyLink: ["copyLink"],
  shareByLinkPermDropdown: ["shareByLinkPermDropdown"],
  cascadeWorkspace: ["cascadeWorkspace"],
  cascadeTeam: ["cascadeTeam"],
  byInviteTab: [
    "byInviteTab",
    "newUserEmail",
    "newUserRoleDropdown",
    "sendInviteButton",
    "requireSignUpSwitch",
    "loginLink",
    "permsContainer",
  ],

  newUserEmail: ["newUserEmail"],
  newUserRoleDropdown: ["newUserRoleDropdown"],
  sendInviteButton: ["sendInviteButton"],
  requireSignUpSwitch: ["requireSignUpSwitch"],
  loginLink: ["loginLink"],
  permsContainer: ["permsContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  shareByLinkSwitch: typeof Checkbox;
  copyLink: typeof Button;
  shareByLinkPermDropdown: typeof Select;
  cascadeWorkspace: "a";
  cascadeTeam: "a";
  byInviteTab: "div";
  newUserEmail: typeof Textbox;
  newUserRoleDropdown: typeof Select;
  sendInviteButton: typeof Button;
  requireSignUpSwitch: typeof Checkbox;
  loginLink: "a";
  permsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShareDialogContent__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShareDialogContent__VariantsArgs;
    args?: PlasmicShareDialogContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShareDialogContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShareDialogContent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShareDialogContent__ArgProps,
          internalVariantPropNames: PlasmicShareDialogContent__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicShareDialogContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShareDialogContent";
  } else {
    func.displayName = `PlasmicShareDialogContent.${nodeName}`;
  }
  return func;
}

export const PlasmicShareDialogContent = Object.assign(
  // Top-level PlasmicShareDialogContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    shareByLinkSwitch: makeNodeComponent("shareByLinkSwitch"),
    copyLink: makeNodeComponent("copyLink"),
    shareByLinkPermDropdown: makeNodeComponent("shareByLinkPermDropdown"),
    cascadeWorkspace: makeNodeComponent("cascadeWorkspace"),
    cascadeTeam: makeNodeComponent("cascadeTeam"),
    byInviteTab: makeNodeComponent("byInviteTab"),
    newUserEmail: makeNodeComponent("newUserEmail"),
    newUserRoleDropdown: makeNodeComponent("newUserRoleDropdown"),
    sendInviteButton: makeNodeComponent("sendInviteButton"),
    requireSignUpSwitch: makeNodeComponent("requireSignUpSwitch"),
    loginLink: makeNodeComponent("loginLink"),
    permsContainer: makeNodeComponent("permsContainer"),

    // Metadata about props expected for PlasmicShareDialogContent
    internalVariantProps: PlasmicShareDialogContent__VariantProps,
    internalArgProps: PlasmicShareDialogContent__ArgProps,
  }
);

export default PlasmicShareDialogContent;
/* prettier-ignore-end */
