// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: lpGYGncEBV
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicAnalyticsHeader.module.css"; // plasmic-import: lpGYGncEBV/css

import image49X6ZsC5Ww5 from "../plasmic_kit_design_system/images/image4.svg"; // plasmic-import: 9X6ZsC5ww5/picture
import ArrowLeftsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowLeftSvg"; // plasmic-import: -d8Kjj4sp/icon

export type PlasmicAnalyticsHeader__VariantMembers = {};

export type PlasmicAnalyticsHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalyticsHeader__VariantsArgs;
export const PlasmicAnalyticsHeader__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAnalyticsHeader__ArgsType = {
  teamName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAnalyticsHeader__ArgsType;
export const PlasmicAnalyticsHeader__ArgProps = new Array<ArgPropType>(
  "teamName"
);

export type PlasmicAnalyticsHeader__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof p.PlasmicImg>;
  backBtn?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultAnalyticsHeaderProps {
  teamName?: React.ReactNode;
  className?: string;
}

function PlasmicAnalyticsHeader__RenderFunc(props: {
  variants: PlasmicAnalyticsHeader__VariantsArgs;
  args: PlasmicAnalyticsHeader__ArgsType;
  overrides: PlasmicAnalyticsHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox___4UBji)}>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iuSq1)}
            >
              <p.PlasmicImg
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                alt={""}
                className={classNames(sty.logo)}
                displayHeight={"2rem" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"2rem" as const}
                loading={"lazy" as const}
                src={{
                  src: image49X6ZsC5Ww5,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1,
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__qb1Yn)}>
                <div className={classNames(projectcss.all, sty.freeBox__z1Sar)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "Current team name",
                    value: args.teamName,
                    className: classNames(sty.slotTargetTeamName),
                  })}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3ZaQ
                  )}
                >
                  {"Analytics"}
                </div>
              </div>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"backBtn"}
            data-plasmic-override={overrides.backBtn}
            hasGap={true}
            className={classNames(projectcss.all, sty.backBtn)}
          >
            <ArrowLeftsvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rbN23
              )}
            >
              {"Back to projects/studio"}
            </div>
          </p.Stack>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "backBtn", "svg"],
  logo: ["logo"],
  backBtn: ["backBtn", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof p.PlasmicImg;
  backBtn: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalyticsHeader__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalyticsHeader__VariantsArgs;
    args?: PlasmicAnalyticsHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalyticsHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAnalyticsHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAnalyticsHeader__ArgProps,
          internalVariantPropNames: PlasmicAnalyticsHeader__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicAnalyticsHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnalyticsHeader";
  } else {
    func.displayName = `PlasmicAnalyticsHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalyticsHeader = Object.assign(
  // Top-level PlasmicAnalyticsHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    backBtn: makeNodeComponent("backBtn"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAnalyticsHeader
    internalVariantProps: PlasmicAnalyticsHeader__VariantProps,
    internalArgProps: PlasmicAnalyticsHeader__ArgProps,
  }
);

export default PlasmicAnalyticsHeader;
/* prettier-ignore-end */
