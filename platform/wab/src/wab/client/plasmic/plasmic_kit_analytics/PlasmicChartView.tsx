// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: vSQc3cNg5Q
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicChartView.module.css"; // plasmic-import: vSQc3cNg5Q/css

export type PlasmicChartView__VariantMembers = {
  loading: "loading";
  empty: "empty";
};

export type PlasmicChartView__VariantsArgs = {
  loading?: SingleBooleanChoiceArg<"loading">;
  empty?: SingleBooleanChoiceArg<"empty">;
};

type VariantPropType = keyof PlasmicChartView__VariantsArgs;
export const PlasmicChartView__VariantProps = new Array<VariantPropType>(
  "loading",
  "empty"
);

export type PlasmicChartView__ArgsType = {
  chart?: React.ReactNode;
};

type ArgPropType = keyof PlasmicChartView__ArgsType;
export const PlasmicChartView__ArgProps = new Array<ArgPropType>("chart");

export type PlasmicChartView__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  loadingBox?: p.Flex<"div">;
  emptyBox?: p.Flex<"div">;
};

export interface DefaultChartViewProps {
  chart?: React.ReactNode;
  loading?: SingleBooleanChoiceArg<"loading">;
  empty?: SingleBooleanChoiceArg<"empty">;
  className?: string;
}

function PlasmicChartView__RenderFunc(props: {
  variants: PlasmicChartView__VariantsArgs;
  args: PlasmicChartView__ArgsType;
  overrides: PlasmicChartView__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxempty]: hasVariant(variants, "empty", "empty"),
          [sty.freeBoxloading]: hasVariant(variants, "loading", "loading"),
        })}
      >
        {(
          hasVariant(variants, "empty", "empty")
            ? false
            : hasVariant(variants, "loading", "loading")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: null,
              value: args.chart,
            })
          : null}
        {(
          hasVariant(variants, "empty", "empty")
            ? true
            : hasVariant(variants, "loading", "loading")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"loadingBox"}
            data-plasmic-override={overrides.loadingBox}
            className={classNames(projectcss.all, sty.loadingBox, {
              [sty.loadingBoxempty]: hasVariant(variants, "empty", "empty"),
              [sty.loadingBoxloading]: hasVariant(
                variants,
                "loading",
                "loading"
              ),
            })}
          >
            {(
              hasVariant(variants, "empty", "empty")
                ? true
                : hasVariant(variants, "loading", "loading")
                ? true
                : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xBonR,
                  {
                    [sty.textempty__xBonRjihUh]: hasVariant(
                      variants,
                      "empty",
                      "empty"
                    ),

                    [sty.textloading__xBonR8Tb5V]: hasVariant(
                      variants,
                      "loading",
                      "loading"
                    ),
                  }
                )}
              >
                {"Loading your data ..."}
              </div>
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant(variants, "empty", "empty")
            ? true
            : hasVariant(variants, "loading", "loading")
            ? true
            : false
        ) ? (
          <div
            data-plasmic-name={"emptyBox"}
            data-plasmic-override={overrides.emptyBox}
            className={classNames(projectcss.all, sty.emptyBox, {
              [sty.emptyBoxempty]: hasVariant(variants, "empty", "empty"),
              [sty.emptyBoxloading]: hasVariant(variants, "loading", "loading"),
            })}
          >
            {(
              hasVariant(variants, "empty", "empty")
                ? true
                : hasVariant(variants, "loading", "loading")
                ? true
                : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qZTdF,
                  {
                    [sty.textempty__qZTdFjihUh]: hasVariant(
                      variants,
                      "empty",
                      "empty"
                    ),

                    [sty.textloading__qZTdF8Tb5V]: hasVariant(
                      variants,
                      "loading",
                      "loading"
                    ),
                  }
                )}
              >
                {hasVariant(variants, "empty", "empty")
                  ? "No data found"
                  : "Loading your data ..."}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "loadingBox", "emptyBox"],
  freeBox: ["freeBox", "loadingBox", "emptyBox"],
  loadingBox: ["loadingBox"],
  emptyBox: ["emptyBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  loadingBox: "div";
  emptyBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChartView__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChartView__VariantsArgs;
    args?: PlasmicChartView__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChartView__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChartView__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicChartView__ArgProps,
          internalVariantPropNames: PlasmicChartView__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicChartView__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChartView";
  } else {
    func.displayName = `PlasmicChartView.${nodeName}`;
  }
  return func;
}

export const PlasmicChartView = Object.assign(
  // Top-level PlasmicChartView renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    loadingBox: makeNodeComponent("loadingBox"),
    emptyBox: makeNodeComponent("emptyBox"),

    // Metadata about props expected for PlasmicChartView
    internalVariantProps: PlasmicChartView__VariantProps,
    internalArgProps: PlasmicChartView__ArgProps,
  }
);

export default PlasmicChartView;
/* prettier-ignore-end */
