// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: Dza4MqGNx4p
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import LabeledSelect from "../../components/analytics/LabeledSelect"; // plasmic-import: bQ74QBVIbHI/component
import PeriodPicker from "../../components/analytics/PeriodPicker"; // plasmic-import: Jt0CZzY1xy/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicDataFilters.module.css"; // plasmic-import: Dza4MqGNx4p/css

export type PlasmicDataFilters__VariantMembers = {};

export type PlasmicDataFilters__VariantsArgs = {};
type VariantPropType = keyof PlasmicDataFilters__VariantsArgs;
export const PlasmicDataFilters__VariantProps = new Array<VariantPropType>();

export type PlasmicDataFilters__ArgsType = {};
type ArgPropType = keyof PlasmicDataFilters__ArgsType;
export const PlasmicDataFilters__ArgProps = new Array<ArgPropType>();

export type PlasmicDataFilters__OverridesType = {
  root?: p.Flex<"div">;
  timeRangeFilter?: p.Flex<typeof LabeledSelect>;
  eventFilter?: p.Flex<typeof LabeledSelect>;
  periodPicker?: p.Flex<typeof PeriodPicker>;
  freeBox?: p.Flex<"div">;
  exportBtn?: p.Flex<typeof Button>;
  shareBtn?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
};

export interface DefaultDataFiltersProps {
  className?: string;
}

function PlasmicDataFilters__RenderFunc(props: {
  variants: PlasmicDataFilters__VariantsArgs;
  args: PlasmicDataFilters__ArgsType;
  overrides: PlasmicDataFilters__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <LabeledSelect
        data-plasmic-name={"timeRangeFilter"}
        data-plasmic-override={overrides.timeRangeFilter}
        className={classNames("__wab_instance", sty.timeRangeFilter)}
        label={"Time range"}
        noRightPadding={true}
      />

      <LabeledSelect
        data-plasmic-name={"eventFilter"}
        data-plasmic-override={overrides.eventFilter}
        className={classNames("__wab_instance", sty.eventFilter)}
        label={"Event"}
        noRightPadding={true}
      />

      <PeriodPicker
        data-plasmic-name={"periodPicker"}
        data-plasmic-override={overrides.periodPicker}
        className={classNames("__wab_instance", sty.periodPicker)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Button
          data-plasmic-name={"exportBtn"}
          data-plasmic-override={overrides.exportBtn}
          className={classNames("__wab_instance", sty.exportBtn)}
          size={"wide" as const}
          type={["clear"]}
        >
          {"Export"}
        </Button>

        <Button
          data-plasmic-name={"shareBtn"}
          data-plasmic-override={overrides.shareBtn}
          className={classNames("__wab_instance", sty.shareBtn)}
          size={"wide" as const}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Share"}
          </div>
        </Button>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "timeRangeFilter",
    "eventFilter",
    "periodPicker",
    "freeBox",
    "exportBtn",
    "shareBtn",
    "text",
  ],

  timeRangeFilter: ["timeRangeFilter"],
  eventFilter: ["eventFilter"],
  periodPicker: ["periodPicker"],
  freeBox: ["freeBox", "exportBtn", "shareBtn", "text"],
  exportBtn: ["exportBtn"],
  shareBtn: ["shareBtn", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  timeRangeFilter: typeof LabeledSelect;
  eventFilter: typeof LabeledSelect;
  periodPicker: typeof PeriodPicker;
  freeBox: "div";
  exportBtn: typeof Button;
  shareBtn: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataFilters__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataFilters__VariantsArgs;
    args?: PlasmicDataFilters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataFilters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDataFilters__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDataFilters__ArgProps,
          internalVariantPropNames: PlasmicDataFilters__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicDataFilters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataFilters";
  } else {
    func.displayName = `PlasmicDataFilters.${nodeName}`;
  }
  return func;
}

export const PlasmicDataFilters = Object.assign(
  // Top-level PlasmicDataFilters renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    timeRangeFilter: makeNodeComponent("timeRangeFilter"),
    eventFilter: makeNodeComponent("eventFilter"),
    periodPicker: makeNodeComponent("periodPicker"),
    freeBox: makeNodeComponent("freeBox"),
    exportBtn: makeNodeComponent("exportBtn"),
    shareBtn: makeNodeComponent("shareBtn"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicDataFilters
    internalVariantProps: PlasmicDataFilters__VariantProps,
    internalArgProps: PlasmicDataFilters__ArgProps,
  }
);

export default PlasmicDataFilters;
/* prettier-ignore-end */
