// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: bQ74QBVIbHI
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../../components/widgets/Select__Option"; // plasmic-import: rr-LWdMni2G/component
import Select__OptionGroup from "../../components/widgets/Select__OptionGroup"; // plasmic-import: _qMm1mtrqOi/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicLabeledSelect.module.css"; // plasmic-import: bQ74QBVIbHI/css

import InfoIcon from "../plasmic_kit/PlasmicIcon__Info"; // plasmic-import: BjAly3N4fWuWe/icon

export type PlasmicLabeledSelect__VariantMembers = {
  withBottomBorder: "withBottomBorder";
  noRightPadding: "noRightPadding";
  withInfo: "withInfo";
};

export type PlasmicLabeledSelect__VariantsArgs = {
  withBottomBorder?: SingleBooleanChoiceArg<"withBottomBorder">;
  noRightPadding?: SingleBooleanChoiceArg<"noRightPadding">;
  withInfo?: SingleBooleanChoiceArg<"withInfo">;
};

type VariantPropType = keyof PlasmicLabeledSelect__VariantsArgs;
export const PlasmicLabeledSelect__VariantProps = new Array<VariantPropType>(
  "withBottomBorder",
  "noRightPadding",
  "withInfo"
);

export type PlasmicLabeledSelect__ArgsType = {
  label?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLabeledSelect__ArgsType;
export const PlasmicLabeledSelect__ArgProps = new Array<ArgPropType>("label");

export type PlasmicLabeledSelect__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  info?: p.Flex<"svg">;
  select?: p.Flex<typeof Select>;
};

export interface DefaultLabeledSelectProps {
  label?: React.ReactNode;
  withBottomBorder?: SingleBooleanChoiceArg<"withBottomBorder">;
  noRightPadding?: SingleBooleanChoiceArg<"noRightPadding">;
  withInfo?: SingleBooleanChoiceArg<"withInfo">;
  className?: string;
}

function PlasmicLabeledSelect__RenderFunc(props: {
  variants: PlasmicLabeledSelect__VariantsArgs;
  args: PlasmicLabeledSelect__ArgsType;
  overrides: PlasmicLabeledSelect__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootnoRightPadding]: hasVariant(
            variants,
            "noRightPadding",
            "noRightPadding"
          ),

          [sty.rootwithBottomBorder]: hasVariant(
            variants,
            "withBottomBorder",
            "withBottomBorder"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxwithInfo]: hasVariant(variants, "withInfo", "withInfo"),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Label",
          value: args.label,
          className: classNames(sty.slotTargetLabel),
        })}

        {(hasVariant(variants, "withInfo", "withInfo") ? true : true) ? (
          <InfoIcon
            data-plasmic-name={"info"}
            data-plasmic-override={overrides.info}
            className={classNames(projectcss.all, sty.info, {
              [sty.infowithInfo]: hasVariant(variants, "withInfo", "withInfo"),
            })}
            role={"img"}
          />
        ) : null}
      </div>

      <Select
        data-plasmic-name={"select"}
        data-plasmic-override={overrides.select}
        className={classNames("__wab_instance", sty.select)}
        placeholder={"Select..."}
        selectedContent={null}
        type={"bordered" as const}
      >
        <Select__Option
          className={classNames("__wab_instance", sty.option__o4Vcn)}
          value={"value1" as const}
        >
          {"Option 1"}
        </Select__Option>

        <Select__Option
          className={classNames("__wab_instance", sty.option__joI6W)}
          value={"value2" as const}
        >
          {"Option 2"}
        </Select__Option>

        <Select__OptionGroup
          className={classNames("__wab_instance", sty.optionGroup__iiXo)}
          title={"Group Name"}
        >
          <Select__Option
            className={classNames("__wab_instance", sty.option__h2F3)}
            value={"option a" as const}
          >
            {"Option A"}
          </Select__Option>

          <Select__Option
            className={classNames("__wab_instance", sty.option___1IiGb)}
            value={"option b" as const}
          >
            {"Option B"}
          </Select__Option>
        </Select__OptionGroup>

        <Select__OptionGroup
          className={classNames("__wab_instance", sty.optionGroup__zctCi)}
          title={"Other Group"}
        >
          <Select__Option
            className={classNames("__wab_instance", sty.option__ekSaT)}
            value={"option c" as const}
          >
            {"Option C"}
          </Select__Option>

          <Select__Option
            className={classNames("__wab_instance", sty.option___1IiGb)}
            value={"option d" as const}
          >
            {"Option D"}
          </Select__Option>
        </Select__OptionGroup>

        <Select__Option
          className={classNames("__wab_instance", sty.option___7XjA)}
          value={"value3" as const}
        >
          {"Option 3"}
        </Select__Option>
      </Select>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "info", "select"],
  freeBox: ["freeBox", "info"],
  info: ["info"],
  select: ["select"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  info: "svg";
  select: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLabeledSelect__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLabeledSelect__VariantsArgs;
    args?: PlasmicLabeledSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLabeledSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLabeledSelect__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLabeledSelect__ArgProps,
          internalVariantPropNames: PlasmicLabeledSelect__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicLabeledSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLabeledSelect";
  } else {
    func.displayName = `PlasmicLabeledSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicLabeledSelect = Object.assign(
  // Top-level PlasmicLabeledSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    info: makeNodeComponent("info"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicLabeledSelect
    internalVariantProps: PlasmicLabeledSelect__VariantProps,
    internalArgProps: PlasmicLabeledSelect__ArgProps,
  }
);

export default PlasmicLabeledSelect;
/* prettier-ignore-end */
