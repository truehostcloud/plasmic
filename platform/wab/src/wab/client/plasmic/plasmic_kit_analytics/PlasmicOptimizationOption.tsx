// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: yvny0cDy_e
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicOptimizationOption.module.css"; // plasmic-import: yvny0cDy_e/css

import UnsetIcon from "../plasmic_kit/PlasmicIcon__Unset"; // plasmic-import: 8G7yEB3Bs8mxb/icon
import RocketsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__RocketSvg"; // plasmic-import: uRQfbBjV9/icon

export type PlasmicOptimizationOption__VariantMembers = {
  selected: "selected";
  unset: "unset";
};

export type PlasmicOptimizationOption__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  unset?: SingleBooleanChoiceArg<"unset">;
};

type VariantPropType = keyof PlasmicOptimizationOption__VariantsArgs;
export const PlasmicOptimizationOption__VariantProps =
  new Array<VariantPropType>("selected", "unset");

export type PlasmicOptimizationOption__ArgsType = {
  label?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOptimizationOption__ArgsType;
export const PlasmicOptimizationOption__ArgProps = new Array<ArgPropType>(
  "label"
);

export type PlasmicOptimizationOption__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultOptimizationOptionProps {
  label?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  unset?: SingleBooleanChoiceArg<"unset">;
  className?: string;
}

function PlasmicOptimizationOption__RenderFunc(props: {
  variants: PlasmicOptimizationOption__VariantsArgs;
  args: PlasmicOptimizationOption__ArgsType;
  overrides: PlasmicOptimizationOption__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootselected]: hasVariant(variants, "selected", "selected") }
      )}
    >
      <p.PlasmicIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant(variants, "unset", "unset") ? UnsetIcon : RocketsvgIcon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgselected]: hasVariant(variants, "selected", "selected"),
          [sty.svgunset]: hasVariant(variants, "unset", "unset"),
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselected]: hasVariant(variants, "selected", "selected"),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Label",
          value: args.label,
          className: classNames(sty.slotTargetLabel, {
            [sty.slotTargetLabelselected]: hasVariant(
              variants,
              "selected",
              "selected"
            ),
          }),
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOptimizationOption__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOptimizationOption__VariantsArgs;
    args?: PlasmicOptimizationOption__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOptimizationOption__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOptimizationOption__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOptimizationOption__ArgProps,
          internalVariantPropNames: PlasmicOptimizationOption__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicOptimizationOption__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOptimizationOption";
  } else {
    func.displayName = `PlasmicOptimizationOption.${nodeName}`;
  }
  return func;
}

export const PlasmicOptimizationOption = Object.assign(
  // Top-level PlasmicOptimizationOption renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicOptimizationOption
    internalVariantProps: PlasmicOptimizationOption__VariantProps,
    internalArgProps: PlasmicOptimizationOption__ArgProps,
  }
);

export default PlasmicOptimizationOption;
/* prettier-ignore-end */
