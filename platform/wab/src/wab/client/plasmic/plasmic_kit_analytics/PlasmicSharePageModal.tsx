// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: wQH36LoqQL
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicSharePageModal.module.css"; // plasmic-import: wQH36LoqQL/css

export type PlasmicSharePageModal__VariantMembers = {
  copied: "copied";
};

export type PlasmicSharePageModal__VariantsArgs = {
  copied?: SingleBooleanChoiceArg<"copied">;
};

type VariantPropType = keyof PlasmicSharePageModal__VariantsArgs;
export const PlasmicSharePageModal__VariantProps = new Array<VariantPropType>(
  "copied"
);

export type PlasmicSharePageModal__ArgsType = {};
type ArgPropType = keyof PlasmicSharePageModal__ArgsType;
export const PlasmicSharePageModal__ArgProps = new Array<ArgPropType>();

export type PlasmicSharePageModal__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  freeBox?: p.Flex<"div">;
  urlBox?: p.Flex<typeof Textbox>;
  copyBtn?: p.Flex<typeof Button>;
};

export interface DefaultSharePageModalProps {
  copied?: SingleBooleanChoiceArg<"copied">;
  className?: string;
}

function PlasmicSharePageModal__RenderFunc(props: {
  variants: PlasmicSharePageModal__VariantsArgs;
  args: PlasmicSharePageModal__ArgsType;
  overrides: PlasmicSharePageModal__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootcopied]: hasVariant(variants, "copied", "copied") }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"Share your analytics page"}
            </h2>
          }

          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <Textbox
            data-plasmic-name={"urlBox"}
            data-plasmic-override={overrides.urlBox}
            className={classNames("__wab_instance", sty.urlBox)}
            disabled={true}
            styleType={[]}
            whiteBackground={true}
          />

          <Button
            data-plasmic-name={"copyBtn"}
            data-plasmic-override={overrides.copyBtn}
            className={classNames("__wab_instance", sty.copyBtn, {
              [sty.copyBtncopied]: hasVariant(variants, "copied", "copied"),
            })}
            type={
              hasVariant(variants, "copied", "copied")
                ? ["clearPrimary"]
                : ["primary"]
            }
          >
            {hasVariant(variants, "copied", "copied") ? "Copied!" : "Copy"}
          </Button>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "h2", "freeBox", "urlBox", "copyBtn"],
  text: ["text", "h2"],
  h2: ["h2"],
  freeBox: ["freeBox", "urlBox", "copyBtn"],
  urlBox: ["urlBox"],
  copyBtn: ["copyBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  h2: "h2";
  freeBox: "div";
  urlBox: typeof Textbox;
  copyBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSharePageModal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSharePageModal__VariantsArgs;
    args?: PlasmicSharePageModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSharePageModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSharePageModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSharePageModal__ArgProps,
          internalVariantPropNames: PlasmicSharePageModal__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicSharePageModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSharePageModal";
  } else {
    func.displayName = `PlasmicSharePageModal.${nodeName}`;
  }
  return func;
}

export const PlasmicSharePageModal = Object.assign(
  // Top-level PlasmicSharePageModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    h2: makeNodeComponent("h2"),
    freeBox: makeNodeComponent("freeBox"),
    urlBox: makeNodeComponent("urlBox"),
    copyBtn: makeNodeComponent("copyBtn"),

    // Metadata about props expected for PlasmicSharePageModal
    internalVariantProps: PlasmicSharePageModal__VariantProps,
    internalArgProps: PlasmicSharePageModal__ArgProps,
  }
);

export default PlasmicSharePageModal;
/* prettier-ignore-end */
