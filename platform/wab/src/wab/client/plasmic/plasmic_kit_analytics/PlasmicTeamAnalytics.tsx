// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: RrG72JEyZOXn
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import AnalyticsHeader from "../../components/analytics/AnalyticsHeader"; // plasmic-import: lpGYGncEBV/component
import ChartView from "../../components/analytics/ChartView"; // plasmic-import: vSQc3cNg5Q/component
import DataFilters from "../../components/analytics/DataFilters"; // plasmic-import: Dza4MqGNx4p/component
import TeamFilters from "../../components/analytics/TeamFilters"; // plasmic-import: U5oM6fe0OlY/component

import { useScreenVariants as useScreenVariantsnXbQfeebYy0 } from "../q_4_text_mixins_product/PlasmicGlobalVariant__Screen"; // plasmic-import: NXbQfeebYy0/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicTeamAnalytics.module.css"; // plasmic-import: RrG72JEyZOXn/css

export type PlasmicTeamAnalytics__VariantMembers = {};

export type PlasmicTeamAnalytics__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeamAnalytics__VariantsArgs;
export const PlasmicTeamAnalytics__VariantProps = new Array<VariantPropType>();

export type PlasmicTeamAnalytics__ArgsType = {};
type ArgPropType = keyof PlasmicTeamAnalytics__ArgsType;
export const PlasmicTeamAnalytics__ArgProps = new Array<ArgPropType>();

export type PlasmicTeamAnalytics__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof AnalyticsHeader>;
  teamFilters?: p.Flex<typeof TeamFilters>;
  dataFilters?: p.Flex<typeof DataFilters>;
  chartView?: p.Flex<typeof ChartView>;
};

export interface DefaultTeamAnalyticsProps {
  className?: string;
}

function PlasmicTeamAnalytics__RenderFunc(props: {
  variants: PlasmicTeamAnalytics__VariantsArgs;
  args: PlasmicTeamAnalytics__ArgsType;
  overrides: PlasmicTeamAnalytics__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnXbQfeebYy0(),
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            plasmic_plasmic_kit_design_system_css.plasmic_tokens,
            plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <AnalyticsHeader
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            teamName={"Current team name"}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___65UDq)}>
              <TeamFilters
                data-plasmic-name={"teamFilters"}
                data-plasmic-override={overrides.teamFilters}
                className={classNames("__wab_instance", sty.teamFilters)}
              />

              <div className={classNames(projectcss.all, sty.freeBox___4Xw1X)}>
                <DataFilters
                  data-plasmic-name={"dataFilters"}
                  data-plasmic-override={overrides.dataFilters}
                  className={classNames("__wab_instance", sty.dataFilters)}
                />

                <ChartView
                  data-plasmic-name={"chartView"}
                  data-plasmic-override={overrides.chartView}
                  className={classNames("__wab_instance", sty.chartView)}
                />
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "teamFilters", "dataFilters", "chartView"],
  header: ["header"],
  teamFilters: ["teamFilters"],
  dataFilters: ["dataFilters"],
  chartView: ["chartView"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof AnalyticsHeader;
  teamFilters: typeof TeamFilters;
  dataFilters: typeof DataFilters;
  chartView: typeof ChartView;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamAnalytics__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamAnalytics__VariantsArgs;
    args?: PlasmicTeamAnalytics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeamAnalytics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamAnalytics__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTeamAnalytics__ArgProps,
          internalVariantPropNames: PlasmicTeamAnalytics__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicTeamAnalytics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamAnalytics";
  } else {
    func.displayName = `PlasmicTeamAnalytics.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamAnalytics = Object.assign(
  // Top-level PlasmicTeamAnalytics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    teamFilters: makeNodeComponent("teamFilters"),
    dataFilters: makeNodeComponent("dataFilters"),
    chartView: makeNodeComponent("chartView"),

    // Metadata about props expected for PlasmicTeamAnalytics
    internalVariantProps: PlasmicTeamAnalytics__VariantProps,
    internalArgProps: PlasmicTeamAnalytics__ArgProps,
  }
);

export default PlasmicTeamAnalytics;
/* prettier-ignore-end */
