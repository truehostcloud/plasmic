// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQnF1HuwK97HkvkrC6uRk2
// Component: U5oM6fe0OlY
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import LabeledSelect from "../../components/analytics/LabeledSelect"; // plasmic-import: bQ74QBVIbHI/component
import OptimizationOption from "../../components/analytics/OptimizationOption"; // plasmic-import: yvny0cDy_e/component
import OptimizationsSelect from "../../components/analytics/OptimizationsSelect"; // plasmic-import: 0bODOMCtGi/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_analytics.module.css"; // plasmic-import: cQnF1HuwK97HkvkrC6uRk2/projectcss
import sty from "./PlasmicTeamFilters.module.css"; // plasmic-import: U5oM6fe0OlY/css

export type PlasmicTeamFilters__VariantMembers = {};

export type PlasmicTeamFilters__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeamFilters__VariantsArgs;
export const PlasmicTeamFilters__VariantProps = new Array<VariantPropType>();

export type PlasmicTeamFilters__ArgsType = {};
type ArgPropType = keyof PlasmicTeamFilters__ArgsType;
export const PlasmicTeamFilters__ArgProps = new Array<ArgPropType>();

export type PlasmicTeamFilters__OverridesType = {
  root?: p.Flex<"div">;
  workspaceSelect?: p.Flex<typeof LabeledSelect>;
  projectSelect?: p.Flex<typeof LabeledSelect>;
  pageSelect?: p.Flex<typeof LabeledSelect>;
  optimizationsSelect?: p.Flex<typeof OptimizationsSelect>;
};

export interface DefaultTeamFiltersProps {
  className?: string;
}

function PlasmicTeamFilters__RenderFunc(props: {
  variants: PlasmicTeamFilters__VariantsArgs;
  args: PlasmicTeamFilters__ArgsType;
  overrides: PlasmicTeamFilters__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <LabeledSelect
          data-plasmic-name={"workspaceSelect"}
          data-plasmic-override={overrides.workspaceSelect}
          className={classNames("__wab_instance", sty.workspaceSelect)}
          label={"Workspace"}
        />
      ) : null}

      <LabeledSelect
        data-plasmic-name={"projectSelect"}
        data-plasmic-override={overrides.projectSelect}
        className={classNames("__wab_instance", sty.projectSelect)}
        label={"Project"}
        withBottomBorder={true}
      />

      <LabeledSelect
        data-plasmic-name={"pageSelect"}
        data-plasmic-override={overrides.pageSelect}
        className={classNames("__wab_instance", sty.pageSelect)}
        label={"Page or Component"}
        withBottomBorder={true}
        withInfo={true}
      />

      <OptimizationsSelect
        data-plasmic-name={"optimizationsSelect"}
        data-plasmic-override={overrides.optimizationsSelect}
        className={classNames("__wab_instance", sty.optimizationsSelect)}
      >
        <OptimizationOption
          className={classNames(
            "__wab_instance",
            sty.optimizationOption___6Xcl1
          )}
          label={"None"}
          selected={true}
          unset={true}
        />

        <OptimizationOption
          className={classNames("__wab_instance", sty.optimizationOption__zoY)}
          label={"A/B Test"}
        />

        <OptimizationOption
          className={classNames(
            "__wab_instance",
            sty.optimizationOption__sqjna
          )}
          label={"Experiment"}
        />

        <OptimizationOption
          className={classNames(
            "__wab_instance",
            sty.optimizationOption__s67Ed
          )}
          label={"Another one"}
        />
      </OptimizationsSelect>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "workspaceSelect",
    "projectSelect",
    "pageSelect",
    "optimizationsSelect",
  ],

  workspaceSelect: ["workspaceSelect"],
  projectSelect: ["projectSelect"],
  pageSelect: ["pageSelect"],
  optimizationsSelect: ["optimizationsSelect"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  workspaceSelect: typeof LabeledSelect;
  projectSelect: typeof LabeledSelect;
  pageSelect: typeof LabeledSelect;
  optimizationsSelect: typeof OptimizationsSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamFilters__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamFilters__VariantsArgs;
    args?: PlasmicTeamFilters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeamFilters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamFilters__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTeamFilters__ArgProps,
          internalVariantPropNames: PlasmicTeamFilters__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicTeamFilters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamFilters";
  } else {
    func.displayName = `PlasmicTeamFilters.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamFilters = Object.assign(
  // Top-level PlasmicTeamFilters renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    workspaceSelect: makeNodeComponent("workspaceSelect"),
    projectSelect: makeNodeComponent("projectSelect"),
    pageSelect: makeNodeComponent("pageSelect"),
    optimizationsSelect: makeNodeComponent("optimizationsSelect"),

    // Metadata about props expected for PlasmicTeamFilters
    internalVariantProps: PlasmicTeamFilters__VariantProps,
    internalArgProps: PlasmicTeamFilters__ArgProps,
  }
);

export default PlasmicTeamFilters;
/* prettier-ignore-end */
