// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ieacQ3Z46z4gwo1FnaB5vY
// Component: kX5_DA_mZR

import * as React from "react";

import {
  Flex as Flex__,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCmsLeftTabs.module.css"; // plasmic-import: kX5_DA_mZR/css
import projectcss from "./plasmic_plasmic_kit_cms.module.css"; // plasmic-import: ieacQ3Z46z4gwo1FnaB5vY/projectcss

import GearIcon from "../plasmic_kit/PlasmicIcon__Gear"; // plasmic-import: ZmVZmXEc9f_SR/icon
import PageIcon from "../plasmic_kit_design_system/icons/PlasmicIcon__Page"; // plasmic-import: p8KOsO82kk/icon
import BoxSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__BoxSvg"; // plasmic-import: 0qLNxfRGB/icon

createPlasmicElementProxy;

export type PlasmicCmsLeftTabs__VariantMembers = {
  activeTab: "content" | "schema" | "settings";
};
export type PlasmicCmsLeftTabs__VariantsArgs = {
  activeTab?: SingleChoiceArg<"content" | "schema" | "settings">;
};
type VariantPropType = keyof PlasmicCmsLeftTabs__VariantsArgs;
export const PlasmicCmsLeftTabs__VariantProps = new Array<VariantPropType>(
  "activeTab"
);

export type PlasmicCmsLeftTabs__ArgsType = {};
type ArgPropType = keyof PlasmicCmsLeftTabs__ArgsType;
export const PlasmicCmsLeftTabs__ArgProps = new Array<ArgPropType>();

export type PlasmicCmsLeftTabs__OverridesType = {
  root?: Flex__<"div">;
  contentButton?: Flex__<typeof IconButton>;
  schemaButton?: Flex__<typeof IconButton>;
  listSectionSeparator?: Flex__<typeof ListSectionSeparator>;
  settingsButton?: Flex__<typeof IconButton>;
};

export interface DefaultCmsLeftTabsProps {
  activeTab?: SingleChoiceArg<"content" | "schema" | "settings">;
  className?: string;
}

const $$ = {};

function PlasmicCmsLeftTabs__RenderFunc(props: {
  variants: PlasmicCmsLeftTabs__VariantsArgs;
  args: PlasmicCmsLeftTabs__ArgsType;
  overrides: PlasmicCmsLeftTabs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "activeTab",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.activeTab,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <IconButton
        data-plasmic-name={"contentButton"}
        data-plasmic-override={overrides.contentButton}
        className={classNames("__wab_instance", sty.contentButton, {
          [sty.contentButtonactiveTab_content]: hasVariant(
            $state,
            "activeTab",
            "content"
          ),
        })}
        isActive={hasVariant($state, "activeTab", "content") ? true : undefined}
        withBackgroundHover={true}
      >
        <PageIcon
          className={classNames(projectcss.all, sty.svg__mjTw)}
          role={"img"}
        />
      </IconButton>
      <IconButton
        data-plasmic-name={"schemaButton"}
        data-plasmic-override={overrides.schemaButton}
        className={classNames("__wab_instance", sty.schemaButton, {
          [sty.schemaButtonactiveTab_schema]: hasVariant(
            $state,
            "activeTab",
            "schema"
          ),
        })}
        isActive={hasVariant($state, "activeTab", "schema") ? true : undefined}
        withBackgroundHover={true}
      >
        <BoxSvgIcon
          className={classNames(projectcss.all, sty.svg__ex3Ca)}
          role={"img"}
        />
      </IconButton>
      <ListSectionSeparator
        data-plasmic-name={"listSectionSeparator"}
        data-plasmic-override={overrides.listSectionSeparator}
        className={classNames("__wab_instance", sty.listSectionSeparator)}
      />

      <IconButton
        data-plasmic-name={"settingsButton"}
        data-plasmic-override={overrides.settingsButton}
        className={classNames("__wab_instance", sty.settingsButton, {
          [sty.settingsButtonactiveTab_settings]: hasVariant(
            $state,
            "activeTab",
            "settings"
          ),
        })}
        isActive={
          hasVariant($state, "activeTab", "settings") ? true : undefined
        }
        withBackgroundHover={true}
      >
        <GearIcon
          className={classNames(projectcss.all, sty.svg__dp75)}
          role={"img"}
        />
      </IconButton>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "contentButton",
    "schemaButton",
    "listSectionSeparator",
    "settingsButton",
  ],

  contentButton: ["contentButton"],
  schemaButton: ["schemaButton"],
  listSectionSeparator: ["listSectionSeparator"],
  settingsButton: ["settingsButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentButton: typeof IconButton;
  schemaButton: typeof IconButton;
  listSectionSeparator: typeof ListSectionSeparator;
  settingsButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCmsLeftTabs__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCmsLeftTabs__VariantsArgs;
    args?: PlasmicCmsLeftTabs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCmsLeftTabs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCmsLeftTabs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCmsLeftTabs__ArgProps,
          internalVariantPropNames: PlasmicCmsLeftTabs__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCmsLeftTabs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCmsLeftTabs";
  } else {
    func.displayName = `PlasmicCmsLeftTabs.${nodeName}`;
  }
  return func;
}

export const PlasmicCmsLeftTabs = Object.assign(
  // Top-level PlasmicCmsLeftTabs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentButton: makeNodeComponent("contentButton"),
    schemaButton: makeNodeComponent("schemaButton"),
    listSectionSeparator: makeNodeComponent("listSectionSeparator"),
    settingsButton: makeNodeComponent("settingsButton"),

    // Metadata about props expected for PlasmicCmsLeftTabs
    internalVariantProps: PlasmicCmsLeftTabs__VariantProps,
    internalArgProps: PlasmicCmsLeftTabs__ArgProps,
  }
);

export default PlasmicCmsLeftTabs;
/* prettier-ignore-end */
