// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ieacQ3Z46z4gwo1FnaB5vY
// Component: M3aa84scyXT

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListSection from "../../components/ListSection"; // plasmic-import: znioE83CPU/component
import CmsModelItem from "../../components/cms/CmsModelItem"; // plasmic-import: FpZFUfiTA6/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Searchbox from "../../components/widgets/Searchbox"; // plasmic-import: po7gr0PX4_gWo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCmsModelsList.module.css"; // plasmic-import: M3aa84scyXT/css
import projectcss from "./plasmic_plasmic_kit_cms.module.css"; // plasmic-import: ieacQ3Z46z4gwo1FnaB5vY/projectcss

createPlasmicElementProxy;

export type PlasmicCmsModelsList__VariantMembers = {
  isEmpty: "isEmpty";
  isSchemaMode: "isSchemaMode";
  hasArchivedModels: "hasArchivedModels";
};
export type PlasmicCmsModelsList__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  isSchemaMode?: SingleBooleanChoiceArg<"isSchemaMode">;
  hasArchivedModels?: SingleBooleanChoiceArg<"hasArchivedModels">;
};
type VariantPropType = keyof PlasmicCmsModelsList__VariantsArgs;
export const PlasmicCmsModelsList__VariantProps = new Array<VariantPropType>(
  "isEmpty",
  "isSchemaMode",
  "hasArchivedModels"
);

export type PlasmicCmsModelsList__ArgsType = {
  children?: React.ReactNode;
  archivedModels?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCmsModelsList__ArgsType;
export const PlasmicCmsModelsList__ArgProps = new Array<ArgPropType>(
  "children",
  "archivedModels"
);

export type PlasmicCmsModelsList__OverridesType = {
  root?: Flex__<"div">;
  addModelButton?: Flex__<typeof IconButton>;
  searchInput?: Flex__<typeof Searchbox>;
  archivedModelsSection?: Flex__<typeof ListSection>;
};

export interface DefaultCmsModelsListProps {
  children?: React.ReactNode;
  archivedModels?: React.ReactNode;
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  isSchemaMode?: SingleBooleanChoiceArg<"isSchemaMode">;
  hasArchivedModels?: SingleBooleanChoiceArg<"hasArchivedModels">;
  className?: string;
}

const $$ = {};

function PlasmicCmsModelsList__RenderFunc(props: {
  variants: PlasmicCmsModelsList__VariantsArgs;
  args: PlasmicCmsModelsList__ArgsType;
  overrides: PlasmicCmsModelsList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isEmpty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isEmpty,
      },
      {
        path: "isSchemaMode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSchemaMode,
      },
      {
        path: "hasArchivedModels",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.hasArchivedModels,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasArchivedModels]: hasVariant(
            $state,
            "hasArchivedModels",
            "hasArchivedModels"
          ),
          [sty.rootisEmpty]: hasVariant($state, "isEmpty", "isEmpty"),
          [sty.rootisSchemaMode]: hasVariant(
            $state,
            "isSchemaMode",
            "isSchemaMode"
          ),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dprWy, {
          [sty.freeBoxhasArchivedModels__dprWyIc983]: hasVariant(
            $state,
            "hasArchivedModels",
            "hasArchivedModels"
          ),
          [sty.freeBoxisEmpty__dprWy6X5Ho]: hasVariant(
            $state,
            "isEmpty",
            "isEmpty"
          ),
          [sty.freeBoxisSchemaMode__dprWyv4Otj]: hasVariant(
            $state,
            "isSchemaMode",
            "isSchemaMode"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__mh5S4, {
            [sty.freeBoxisSchemaMode__mh5S4V4Otj]: hasVariant(
              $state,
              "isSchemaMode",
              "isSchemaMode"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__li4C4,
              {
                [sty.textisSchemaMode__li4C4V4Otj]: hasVariant(
                  $state,
                  "isSchemaMode",
                  "isSchemaMode"
                ),
              }
            )}
          >
            {hasVariant($state, "isSchemaMode", "isSchemaMode")
              ? "Edit Models"
              : "Models"}
          </div>
          {(
            hasVariant($state, "isSchemaMode", "isSchemaMode") ? true : false
          ) ? (
            <IconButton
              data-plasmic-name={"addModelButton"}
              data-plasmic-override={overrides.addModelButton}
              className={classNames("__wab_instance", sty.addModelButton, {
                [sty.addModelButtonisEmpty]: hasVariant(
                  $state,
                  "isEmpty",
                  "isEmpty"
                ),
                [sty.addModelButtonisSchemaMode]: hasVariant(
                  $state,
                  "isSchemaMode",
                  "isSchemaMode"
                ),
              })}
              withBackgroundHover={true}
            />
          ) : null}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___73Lo)}>
          <Searchbox
            data-plasmic-name={"searchInput"}
            data-plasmic-override={overrides.searchInput}
            className={classNames("__wab_instance", sty.searchInput)}
            placeholder={"Filter..."}
          />
        </div>
        {(hasVariant($state, "isEmpty", "isEmpty") ? false : true) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tBrpA, {
              [sty.freeBoxisEmpty__tBrpA6X5Ho]: hasVariant(
                $state,
                "isEmpty",
                "isEmpty"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <CmsModelItem
                    className={classNames(
                      "__wab_instance",
                      sty.cmsModelItem__jv1Xp
                    )}
                  />

                  <CmsModelItem
                    className={classNames(
                      "__wab_instance",
                      sty.cmsModelItem__lfM0I
                    )}
                  />
                </React.Fragment>
              ),

              value: args.children,
            })}
          </Stack__>
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vg3D3,
            {
              [sty.textisEmpty__vg3D36X5Ho]: hasVariant(
                $state,
                "isEmpty",
                "isEmpty"
              ),
            }
          )}
        >
          {"No models have been created."}
        </div>
      </Stack__>
      {(
        hasVariant($state, "hasArchivedModels", "hasArchivedModels")
          ? true
          : false
      ) ? (
        <ListSection
          data-plasmic-name={"archivedModelsSection"}
          data-plasmic-override={overrides.archivedModelsSection}
          className={classNames("__wab_instance", sty.archivedModelsSection, {
            [sty.archivedModelsSectionhasArchivedModels]: hasVariant(
              $state,
              "hasArchivedModels",
              "hasArchivedModels"
            ),
            [sty.archivedModelsSectionisEmpty]: hasVariant(
              $state,
              "isEmpty",
              "isEmpty"
            ),
          })}
          collapseState={"expanded"}
          isLast={true}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r8NEf
              )}
            >
              {"Archived models"}
            </div>
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0Dez, {
              [sty.freeBoxisEmpty___0Dez6X5Ho]: hasVariant(
                $state,
                "isEmpty",
                "isEmpty"
              ),
              [sty.freeBoxisSchemaMode___0DezV4Otj]: hasVariant(
                $state,
                "isSchemaMode",
                "isSchemaMode"
              ),
            })}
          >
            {(hasVariant($state, "isEmpty", "isEmpty") ? false : true) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rIsR7, {
                  [sty.freeBoxisEmpty__rIsR76X5Ho]: hasVariant(
                    $state,
                    "isEmpty",
                    "isEmpty"
                  ),
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <CmsModelItem
                        className={classNames(
                          "__wab_instance",
                          sty.cmsModelItem__zXyI
                        )}
                      />

                      <CmsModelItem
                        className={classNames(
                          "__wab_instance",
                          sty.cmsModelItem__bha17
                        )}
                      />
                    </React.Fragment>
                  ),

                  value: args.archivedModels,
                })}
              </Stack__>
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tFwPn,
                {
                  [sty.textisEmpty__tFwPn6X5Ho]: hasVariant(
                    $state,
                    "isEmpty",
                    "isEmpty"
                  ),
                }
              )}
            >
              {"No models have been created."}
            </div>
          </Stack__>
        </ListSection>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "addModelButton", "searchInput", "archivedModelsSection"],
  addModelButton: ["addModelButton"],
  searchInput: ["searchInput"],
  archivedModelsSection: ["archivedModelsSection"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  addModelButton: typeof IconButton;
  searchInput: typeof Searchbox;
  archivedModelsSection: typeof ListSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCmsModelsList__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCmsModelsList__VariantsArgs;
    args?: PlasmicCmsModelsList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCmsModelsList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCmsModelsList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCmsModelsList__ArgProps,
          internalVariantPropNames: PlasmicCmsModelsList__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCmsModelsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCmsModelsList";
  } else {
    func.displayName = `PlasmicCmsModelsList.${nodeName}`;
  }
  return func;
}

export const PlasmicCmsModelsList = Object.assign(
  // Top-level PlasmicCmsModelsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    addModelButton: makeNodeComponent("addModelButton"),
    searchInput: makeNodeComponent("searchInput"),
    archivedModelsSection: makeNodeComponent("archivedModelsSection"),

    // Metadata about props expected for PlasmicCmsModelsList
    internalVariantProps: PlasmicCmsModelsList__VariantProps,
    internalArgProps: PlasmicCmsModelsList__ArgProps,
  }
);

export default PlasmicCmsModelsList;
/* prettier-ignore-end */
