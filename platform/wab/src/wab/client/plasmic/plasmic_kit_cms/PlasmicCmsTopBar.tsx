// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ieacQ3Z46z4gwo1FnaB5vY
// Component: FxC1c7NZtR

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import InlineEditable from "../../components/InlineEditable"; // plasmic-import: btpz7A3thO/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCmsTopBar.module.css"; // plasmic-import: FxC1c7NZtR/css
import projectcss from "./plasmic_plasmic_kit_cms.module.css"; // plasmic-import: ieacQ3Z46z4gwo1FnaB5vY/projectcss

import MarkFullColorIcon from "../plasmic_kit_design_system/PlasmicIcon__MarkFullColor"; // plasmic-import: l_n_OBLJg/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: G_dU2TC5Bu/icon

createPlasmicElementProxy;

export type PlasmicCmsTopBar__VariantMembers = {};
export type PlasmicCmsTopBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicCmsTopBar__VariantsArgs;
export const PlasmicCmsTopBar__VariantProps = new Array<VariantPropType>();

export type PlasmicCmsTopBar__ArgsType = {};
type ArgPropType = keyof PlasmicCmsTopBar__ArgsType;
export const PlasmicCmsTopBar__ArgProps = new Array<ArgPropType>();

export type PlasmicCmsTopBar__OverridesType = {
  root?: Flex__<"div">;
  left?: Flex__<"div">;
  link?: Flex__<"a">;
  svg?: Flex__<"svg">;
  cmsName?: Flex__<typeof InlineEditable>;
  cmsNameValue?: Flex__<"div">;
  middle?: Flex__<"div">;
  right?: Flex__<"div">;
};

export interface DefaultCmsTopBarProps {
  className?: string;
}

const $$ = {};

function PlasmicCmsTopBar__RenderFunc(props: {
  variants: PlasmicCmsTopBar__VariantsArgs;
  args: PlasmicCmsTopBar__ArgsType;
  overrides: PlasmicCmsTopBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isSvgHover, triggerSvgHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_svg: isSvgHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"left"}
        data-plasmic-override={overrides.left}
        hasGap={true}
        className={classNames(projectcss.all, sty.left)}
      >
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          href={"/"}
          platform={"react"}
        >
          <PlasmicIcon__
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            PlasmicIconType={triggers.hover_svg ? MarkFullColorIcon : Icon3Icon}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
            data-plasmic-trigger-props={[triggerSvgHoverProps]}
          />
        </PlasmicLink__>
        <InlineEditable
          data-plasmic-name={"cmsName"}
          data-plasmic-override={overrides.cmsName}
          className={classNames("__wab_instance", sty.cmsName)}
        >
          <div
            data-plasmic-name={"cmsNameValue"}
            data-plasmic-override={overrides.cmsNameValue}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.cmsNameValue
            )}
          >
            {"Some CMS"}
          </div>
        </InlineEditable>
      </Stack__>
      <div
        data-plasmic-name={"middle"}
        data-plasmic-override={overrides.middle}
        className={classNames(projectcss.all, sty.middle)}
      />

      <div
        data-plasmic-name={"right"}
        data-plasmic-override={overrides.right}
        className={classNames(projectcss.all, sty.right)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "left",
    "link",
    "svg",
    "cmsName",
    "cmsNameValue",
    "middle",
    "right",
  ],

  left: ["left", "link", "svg", "cmsName", "cmsNameValue"],
  link: ["link", "svg"],
  svg: ["svg"],
  cmsName: ["cmsName", "cmsNameValue"],
  cmsNameValue: ["cmsNameValue"],
  middle: ["middle"],
  right: ["right"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  left: "div";
  link: "a";
  svg: "svg";
  cmsName: typeof InlineEditable;
  cmsNameValue: "div";
  middle: "div";
  right: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCmsTopBar__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCmsTopBar__VariantsArgs;
    args?: PlasmicCmsTopBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCmsTopBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCmsTopBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCmsTopBar__ArgProps,
          internalVariantPropNames: PlasmicCmsTopBar__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCmsTopBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCmsTopBar";
  } else {
    func.displayName = `PlasmicCmsTopBar.${nodeName}`;
  }
  return func;
}

export const PlasmicCmsTopBar = Object.assign(
  // Top-level PlasmicCmsTopBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    left: makeNodeComponent("left"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),
    cmsName: makeNodeComponent("cmsName"),
    cmsNameValue: makeNodeComponent("cmsNameValue"),
    middle: makeNodeComponent("middle"),
    right: makeNodeComponent("right"),

    // Metadata about props expected for PlasmicCmsTopBar
    internalVariantProps: PlasmicCmsTopBar__VariantProps,
    internalArgProps: PlasmicCmsTopBar__ArgProps,
  }
);

export default PlasmicCmsTopBar;
/* prettier-ignore-end */
