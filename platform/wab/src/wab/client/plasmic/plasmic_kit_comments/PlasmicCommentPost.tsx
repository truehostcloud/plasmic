// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: l_AKXl2AAu

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import ReactionButton from "../../components/comments/ReactionButton"; // plasmic-import: FOzDmFDbWm/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentPost.module.css"; // plasmic-import: l_AKXl2AAu/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import EmojiHappysvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EmojiHappySvg"; // plasmic-import: 1Vli2Q2_d/icon
import _69B43A437055B398Eff90A515Ed4F551Svg2AijDeIx4X from "./images/_69B43A437055B398Eff90A515Ed4F551Svg.svg"; // plasmic-import: 2aijDEIx4x/picture

createPlasmicElementProxy;

export type PlasmicCommentPost__VariantMembers = {
  thread: "thread";
};
export type PlasmicCommentPost__VariantsArgs = {
  thread?: SingleBooleanChoiceArg<"thread">;
};
type VariantPropType = keyof PlasmicCommentPost__VariantsArgs;
export const PlasmicCommentPost__VariantProps = new Array<VariantPropType>(
  "thread"
);

export type PlasmicCommentPost__ArgsType = {};
type ArgPropType = keyof PlasmicCommentPost__ArgsType;
export const PlasmicCommentPost__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentPost__OverridesType = {
  root?: p.Flex<"div">;
  avatarContainer?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  text?: p.Flex<"div">;
  userFullName?: p.Flex<"span">;
  timestamp?: p.Flex<"span">;
  actions?: p.Flex<"div">;
  btnMore?: p.Flex<typeof MenuButton>;
  subjectLabel?: p.Flex<"div">;
  body?: p.Flex<"div">;
  btnAddReaction?: p.Flex<typeof IconButton>;
  reactionsContainer?: p.Flex<"div">;
  btnAddReaction2?: p.Flex<typeof IconButton>;
  repliesLink?: p.Flex<typeof Button>;
};

export interface DefaultCommentPostProps {
  thread?: SingleBooleanChoiceArg<"thread">;
  className?: string;
}

const $$ = {};

function PlasmicCommentPost__RenderFunc(props: {
  variants: PlasmicCommentPost__VariantsArgs;
  args: PlasmicCommentPost__ArgsType;
  overrides: PlasmicCommentPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "thread",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.thread,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootthread]: hasVariant($state, "thread", "thread") }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sfn9I, {
          [sty.freeBoxthread__sfn9IkhQ]: hasVariant($state, "thread", "thread"),
        })}
      >
        <div
          data-plasmic-name={"avatarContainer"}
          data-plasmic-override={overrides.avatarContainer}
          className={classNames(projectcss.all, sty.avatarContainer)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: _69B43A437055B398Eff90A515Ed4F551Svg2AijDeIx4X,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1,
            }}
          />
        </div>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textthread]: hasVariant($state, "thread", "thread") }
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            {
              <span
                data-plasmic-name={"userFullName"}
                data-plasmic-override={overrides.userFullName}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.userFullName
                )}
              >
                {"User Name"}
              </span>
            }

            <React.Fragment> </React.Fragment>
            {
              <span
                data-plasmic-name={"timestamp"}
                data-plasmic-override={overrides.timestamp}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.timestamp
                )}
              >
                {"3 hours ago"}
              </span>
            }

            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
        <div
          data-plasmic-name={"actions"}
          data-plasmic-override={overrides.actions}
          className={classNames(projectcss.all, sty.actions)}
        >
          <MenuButton
            data-plasmic-name={"btnMore"}
            data-plasmic-override={overrides.btnMore}
            className={classNames("__wab_instance", sty.btnMore, {
              [sty.btnMorethread]: hasVariant($state, "thread", "thread"),
            })}
            size={"small"}
            withBackgroundHover={true}
          />
        </div>
      </p.Stack>
      <div
        className={classNames(projectcss.all, sty.freeBox___5UHnq, {
          [sty.freeBoxthread___5UHnqKhQ]: hasVariant(
            $state,
            "thread",
            "thread"
          ),
        })}
      >
        {(hasVariant($state, "thread", "thread") ? true : false) ? (
          <div
            data-plasmic-name={"subjectLabel"}
            data-plasmic-override={overrides.subjectLabel}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subjectLabel,
              {
                [sty.subjectLabelthread]: hasVariant(
                  $state,
                  "thread",
                  "thread"
                ),
              }
            )}
          >
            {hasVariant($state, "thread", "thread")
              ? "Unnamed element in MyComponent"
              : "Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. "}
          </div>
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__dc1JV, {
            [sty.freeBoxthread__dc1JVkhQ]: hasVariant(
              $state,
              "thread",
              "thread"
            ),
          })}
        >
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.body,
              { [sty.bodythread]: hasVariant($state, "thread", "thread") }
            )}
          >
            {
              "Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. "
            }
          </div>
          <IconButton
            data-plasmic-name={"btnAddReaction"}
            data-plasmic-override={overrides.btnAddReaction}
            className={classNames("__wab_instance", sty.btnAddReaction)}
            size={"small"}
          >
            <EmojiHappysvgIcon
              className={classNames(projectcss.all, sty.svg___61Fdh)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__xBuRf)}>
              <PlusIcon
                className={classNames(projectcss.all, sty.svg__lgliq)}
                role={"img"}
              />
            </div>
          </IconButton>
        </div>
        <p.Stack
          as={"div"}
          data-plasmic-name={"reactionsContainer"}
          data-plasmic-override={overrides.reactionsContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.reactionsContainer)}
        >
          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__cMbVc)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__fahBu)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__oy7Cy)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__lNxki)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__yxwte)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__nAY7)}
          />

          <IconButton
            data-plasmic-name={"btnAddReaction2"}
            data-plasmic-override={overrides.btnAddReaction2}
            className={classNames("__wab_instance", sty.btnAddReaction2)}
            size={"small"}
          >
            <EmojiHappysvgIcon
              className={classNames(projectcss.all, sty.svg__bs35C)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox___0N5Wz)}>
              <PlusIcon
                className={classNames(projectcss.all, sty.svg__qvPY)}
                role={"img"}
              />
            </div>
          </IconButton>
        </p.Stack>
      </div>
      <Button
        data-plasmic-name={"repliesLink"}
        data-plasmic-override={overrides.repliesLink}
        className={classNames("__wab_instance", sty.repliesLink, {
          [sty.repliesLinkthread]: hasVariant($state, "thread", "thread"),
        })}
        type={["link"]}
      >
        {"3 replies"}
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatarContainer",
    "img",
    "text",
    "userFullName",
    "timestamp",
    "actions",
    "btnMore",
    "subjectLabel",
    "body",
    "btnAddReaction",
    "reactionsContainer",
    "btnAddReaction2",
    "repliesLink",
  ],

  avatarContainer: ["avatarContainer", "img"],
  img: ["img"],
  text: ["text", "userFullName", "timestamp"],
  userFullName: ["userFullName"],
  timestamp: ["timestamp"],
  actions: ["actions", "btnMore"],
  btnMore: ["btnMore"],
  subjectLabel: ["subjectLabel"],
  body: ["body"],
  btnAddReaction: ["btnAddReaction"],
  reactionsContainer: ["reactionsContainer", "btnAddReaction2"],
  btnAddReaction2: ["btnAddReaction2"],
  repliesLink: ["repliesLink"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatarContainer: "div";
  img: typeof p.PlasmicImg;
  text: "div";
  userFullName: "span";
  timestamp: "span";
  actions: "div";
  btnMore: typeof MenuButton;
  subjectLabel: "div";
  body: "div";
  btnAddReaction: typeof IconButton;
  reactionsContainer: "div";
  btnAddReaction2: typeof IconButton;
  repliesLink: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentPost__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentPost__VariantsArgs;
    args?: PlasmicCommentPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCommentPost__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentPost__ArgProps,
          internalVariantPropNames: PlasmicCommentPost__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentPost";
  } else {
    func.displayName = `PlasmicCommentPost.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentPost = Object.assign(
  // Top-level PlasmicCommentPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatarContainer: makeNodeComponent("avatarContainer"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    userFullName: makeNodeComponent("userFullName"),
    timestamp: makeNodeComponent("timestamp"),
    actions: makeNodeComponent("actions"),
    btnMore: makeNodeComponent("btnMore"),
    subjectLabel: makeNodeComponent("subjectLabel"),
    body: makeNodeComponent("body"),
    btnAddReaction: makeNodeComponent("btnAddReaction"),
    reactionsContainer: makeNodeComponent("reactionsContainer"),
    btnAddReaction2: makeNodeComponent("btnAddReaction2"),
    repliesLink: makeNodeComponent("repliesLink"),

    // Metadata about props expected for PlasmicCommentPost
    internalVariantProps: PlasmicCommentPost__VariantProps,
    internalArgProps: PlasmicCommentPost__ArgProps,
  }
);

export default PlasmicCommentPost;
/* prettier-ignore-end */
