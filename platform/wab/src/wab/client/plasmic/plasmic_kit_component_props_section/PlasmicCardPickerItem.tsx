// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 783YKJdyRRPxZbx3qiNi5Q
// Component: -ZWJykIq5V-3F
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useTrigger,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_component_props_section.module.css"; // plasmic-import: 783YKJdyRRPxZbx3qiNi5Q/projectcss
import sty from "./PlasmicCardPickerItem.module.css"; // plasmic-import: -ZWJykIq5V-3F/css

import EyesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EyeSvg"; // plasmic-import: oFYcZi8LU/icon

export type PlasmicCardPickerItem__VariantMembers = {
  isSelected: "isSelected";
  large: "large";
};

export type PlasmicCardPickerItem__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  large?: SingleBooleanChoiceArg<"large">;
};

type VariantPropType = keyof PlasmicCardPickerItem__VariantsArgs;
export const PlasmicCardPickerItem__VariantProps = new Array<VariantPropType>(
  "isSelected",
  "large"
);

export type PlasmicCardPickerItem__ArgsType = {
  title?: React.ReactNode;
  controls?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardPickerItem__ArgsType;
export const PlasmicCardPickerItem__ArgProps = new Array<ArgPropType>(
  "title",
  "controls"
);

export type PlasmicCardPickerItem__OverridesType = {
  root?: p.Flex<"button">;
  image?: p.Flex<"div">;
};

export interface DefaultCardPickerItemProps {
  title?: React.ReactNode;
  controls?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  large?: SingleBooleanChoiceArg<"large">;
  className?: string;
}

function PlasmicCardPickerItem__RenderFunc(props: {
  variants: PlasmicCardPickerItem__VariantsArgs;
  args: PlasmicCardPickerItem__ArgsType;
  overrides: PlasmicCardPickerItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        initFunc: ($props, $state) => $props.isSelected,
      },

      {
        path: "large",
        type: "private",
        initFunc: ($props, $state) => $props.large,
      },
    ],

    [$props]
  );

  const $state = p.useDollarState(stateSpecs, $props);

  const [isRootFocus, triggerRootFocusProps] = useTrigger("useFocused", {});
  const triggers = {
    focus_root: isRootFocus,
  };

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.rootlarge]: hasVariant($state, "large", "large"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusProps]}
    >
      <div
        data-plasmic-name={"image"}
        data-plasmic-override={overrides.image}
        className={classNames(projectcss.all, sty.image, {
          [sty.imageisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.imagelarge]: hasVariant($state, "large", "large"),
        })}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__sxDqT, {
          [sty.freeBoxisSelected__sxDqT5OaEf]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Element footer",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitleisSelected]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            ),
          }),
        })}

        {false
          ? p.renderPlasmicSlot({
              defaultContents: (
                <EyesvgIcon
                  className={classNames(projectcss.all, sty.svg__es6UG)}
                  role={"img"}
                />
              ),

              value: args.controls,
            })
          : null}
      </div>

      {(triggers.focus_root ? true : false) ? (
        <div className={classNames(projectcss.all, sty.freeBox__rbX2U)} />
      ) : null}
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "image"],
  image: ["image"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  image: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardPickerItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardPickerItem__VariantsArgs;
    args?: PlasmicCardPickerItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardPickerItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardPickerItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardPickerItem__ArgProps,
          internalVariantPropNames: PlasmicCardPickerItem__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicCardPickerItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardPickerItem";
  } else {
    func.displayName = `PlasmicCardPickerItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPickerItem = Object.assign(
  // Top-level PlasmicCardPickerItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    image: makeNodeComponent("image"),

    // Metadata about props expected for PlasmicCardPickerItem
    internalVariantProps: PlasmicCardPickerItem__VariantProps,
    internalArgProps: PlasmicCardPickerItem__ArgProps,
  }
);

export default PlasmicCardPickerItem;
/* prettier-ignore-end */
