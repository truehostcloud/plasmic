// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 783YKJdyRRPxZbx3qiNi5Q
// Component: 6ODOBecfUs5
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Modal from "../../components/Modal"; // plasmic-import: rD0wOVzSnE/component
import CardPickerItem from "../../components/sidebar-tabs/ComponentProps/CardPickerItem"; // plasmic-import: -ZWJykIq5V-3F/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_component_props_section.module.css"; // plasmic-import: 783YKJdyRRPxZbx3qiNi5Q/projectcss
import sty from "./PlasmicCardPickerModal.module.css"; // plasmic-import: 6ODOBecfUs5/css

import TrashIcon from "../plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon
import TriangleBottomIcon from "../plasmic_kit/PlasmicIcon__TriangleBottom"; // plasmic-import: A8NQUZ7Lg1OHO/icon
import eyesvgZxKyHRa6Q6Pa from "../plasmic_kit_design_system/images/eyeSvg.svg"; // plasmic-import: Zx-kyHRa6Q6PA/picture

export type PlasmicCardPickerModal__VariantMembers = {
  showInput: "showInput";
};

export type PlasmicCardPickerModal__VariantsArgs = {
  showInput?: SingleBooleanChoiceArg<"showInput">;
};

type VariantPropType = keyof PlasmicCardPickerModal__VariantsArgs;
export const PlasmicCardPickerModal__VariantProps = new Array<VariantPropType>(
  "showInput"
);

export type PlasmicCardPickerModal__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardPickerModal__ArgsType;
export const PlasmicCardPickerModal__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicCardPickerModal__OverridesType = {
  root?: p.Flex<typeof Modal>;
  textbox?: p.Flex<typeof Textbox>;
  items?: p.Flex<"div">;
  cancelButton?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
  saveButton?: p.Flex<typeof Button>;
};

export interface DefaultCardPickerModalProps {
  children?: React.ReactNode;
  showInput?: SingleBooleanChoiceArg<"showInput">;
  className?: string;
}

function PlasmicCardPickerModal__RenderFunc(props: {
  variants: PlasmicCardPickerModal__VariantsArgs;
  args: PlasmicCardPickerModal__ArgsType;
  overrides: PlasmicCardPickerModal__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "showInput",
        type: "private",
        initFunc: ($props, $state) => $props.showInput,
      },
    ],

    [$props]
  );

  const $state = p.useDollarState(stateSpecs, $props);

  return (
    <Modal
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      footer={
        <React.Fragment>
          <Button
            data-plasmic-name={"cancelButton"}
            data-plasmic-override={overrides.cancelButton}
            className={classNames("__wab_instance", sty.cancelButton)}
            endIcon={
              <TriangleBottomIcon
                className={classNames(projectcss.all, sty.svg__qszen)}
                role={"img"}
              />
            }
            size={"wide" as const}
            startIcon={
              <TrashIcon
                className={classNames(projectcss.all, sty.svg__srP7)}
                role={"img"}
              />
            }
            type={"clear" as const}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Cancel"}
            </div>
          </Button>

          {true ? (
            <Button
              data-plasmic-name={"saveButton"}
              data-plasmic-override={overrides.saveButton}
              className={classNames("__wab_instance", sty.saveButton)}
              endIcon={
                <TriangleBottomIcon
                  className={classNames(projectcss.all, sty.svg__ovm4)}
                  role={"img"}
                />
              }
              size={"wide" as const}
              startIcon={
                <TrashIcon
                  className={classNames(projectcss.all, sty.svg__vKndu)}
                  role={"img"}
                />
              }
              type={"primary" as const}
            >
              {"Save"}
            </Button>
          ) : null}
        </React.Fragment>
      }
      title={"Card Picker"}
    >
      {(hasVariant($state, "showInput", "showInput") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__bJFoi, {
            [sty.freeBoxshowInput__bJFoi6TmFq]: hasVariant(
              $state,
              "showInput",
              "showInput"
            ),
          })}
        >
          <Textbox
            data-plasmic-name={"textbox"}
            data-plasmic-override={overrides.textbox}
            className={classNames("__wab_instance", sty.textbox, {
              [sty.textboxshowInput]: hasVariant(
                $state,
                "showInput",
                "showInput"
              ),
            })}
            placeholder={"Search..." as const}
            styleType={["bordered"]}
          />
        </div>
      ) : null}
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___05Thu, {
            [sty.freeBoxshowInput___05Thu6TmFq]: hasVariant(
              $state,
              "showInput",
              "showInput"
            ),
          })}
        >
          <div
            data-plasmic-name={"items"}
            data-plasmic-override={overrides.items}
            className={classNames(projectcss.all, sty.items)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <CardPickerItem
                    className={classNames(
                      "__wab_instance",
                      sty.cardPickerItem___7PX8D
                    )}
                    controls={
                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__kuaav
                        )}
                        loading={"lazy" as const}
                        src={eyesvgZxKyHRa6Q6Pa}
                      />
                    }
                  />

                  <CardPickerItem
                    className={classNames(
                      "__wab_instance",
                      sty.cardPickerItem__e44Y
                    )}
                    controls={
                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img___6Yped
                        )}
                        loading={"lazy" as const}
                        src={eyesvgZxKyHRa6Q6Pa}
                      />
                    }
                  />

                  <CardPickerItem
                    className={classNames(
                      "__wab_instance",
                      sty.cardPickerItem__r8Mvp
                    )}
                    controls={
                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__oukL
                        )}
                        loading={"lazy" as const}
                        src={eyesvgZxKyHRa6Q6Pa}
                      />
                    }
                  />

                  <CardPickerItem
                    className={classNames(
                      "__wab_instance",
                      sty.cardPickerItem__kadg
                    )}
                    controls={
                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__u6EpR
                        )}
                        loading={"lazy" as const}
                        src={eyesvgZxKyHRa6Q6Pa}
                      />
                    }
                  />
                </React.Fragment>
              ),

              value: args.children,
            })}
          </div>
        </div>
      ) : null}
    </Modal>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textbox", "items", "cancelButton", "text", "saveButton"],
  textbox: ["textbox"],
  items: ["items"],
  cancelButton: ["cancelButton", "text"],
  text: ["text"],
  saveButton: ["saveButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Modal;
  textbox: typeof Textbox;
  items: "div";
  cancelButton: typeof Button;
  text: "div";
  saveButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardPickerModal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardPickerModal__VariantsArgs;
    args?: PlasmicCardPickerModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardPickerModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardPickerModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardPickerModal__ArgProps,
          internalVariantPropNames: PlasmicCardPickerModal__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicCardPickerModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardPickerModal";
  } else {
    func.displayName = `PlasmicCardPickerModal.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPickerModal = Object.assign(
  // Top-level PlasmicCardPickerModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),
    items: makeNodeComponent("items"),
    cancelButton: makeNodeComponent("cancelButton"),
    text: makeNodeComponent("text"),
    saveButton: makeNodeComponent("saveButton"),

    // Metadata about props expected for PlasmicCardPickerModal
    internalVariantProps: PlasmicCardPickerModal__VariantProps,
    internalArgProps: PlasmicCardPickerModal__ArgProps,
  }
);

export default PlasmicCardPickerModal;
/* prettier-ignore-end */
