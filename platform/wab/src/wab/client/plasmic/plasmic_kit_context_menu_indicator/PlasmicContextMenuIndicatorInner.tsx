// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fuzE93KTc4ZKNBYf3LAfy
// Component: juosawBbMz

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import BoundingBoxHighlighter from "../../components/ContextMenuIndicator/BoundingBoxHighlighter"; // plasmic-import: iKmOjRERju/component
import MenuIndicator from "../../components/ContextMenuIndicator/MenuIndicator"; // plasmic-import: 5RLoIE7-j5/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_plasmic_kit_context_menu_indicator.module.css"; // plasmic-import: fuzE93KTc4ZKNBYf3LAfy/projectcss
import sty from "./PlasmicContextMenuIndicatorInner.module.css"; // plasmic-import: juosawBbMz/css

createPlasmicElementProxy;

export type PlasmicContextMenuIndicatorInner__VariantMembers = {
  interactive: "interactive";
  active: "active";
  isRecording: "isRecording";
};
export type PlasmicContextMenuIndicatorInner__VariantsArgs = {
  interactive?: SingleBooleanChoiceArg<"interactive">;
  active?: SingleBooleanChoiceArg<"active">;
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
};
type VariantPropType = keyof PlasmicContextMenuIndicatorInner__VariantsArgs;
export const PlasmicContextMenuIndicatorInner__VariantProps =
  new Array<VariantPropType>("interactive", "active", "isRecording");

export type PlasmicContextMenuIndicatorInner__ArgsType = {};
type ArgPropType = keyof PlasmicContextMenuIndicatorInner__ArgsType;
export const PlasmicContextMenuIndicatorInner__ArgProps =
  new Array<ArgPropType>();

export type PlasmicContextMenuIndicatorInner__OverridesType = {
  root?: p.Flex<"div">;
  menuIndicator?: p.Flex<typeof MenuIndicator>;
  freeBox?: p.Flex<"div">;
  boundingBoxHighlighter?: p.Flex<typeof BoundingBoxHighlighter>;
};

export interface DefaultContextMenuIndicatorInnerProps {
  interactive?: SingleBooleanChoiceArg<"interactive">;
  active?: SingleBooleanChoiceArg<"active">;
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  className?: string;
}

const $$ = {};

function PlasmicContextMenuIndicatorInner__RenderFunc(props: {
  variants: PlasmicContextMenuIndicatorInner__VariantsArgs;
  args: PlasmicContextMenuIndicatorInner__ArgsType;
  overrides: PlasmicContextMenuIndicatorInner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "interactive",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.interactive,
      },
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active,
      },
      {
        path: "isRecording",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isRecording,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootactive]: hasVariant($state, "active", "active") }
      )}
    >
      <MenuIndicator
        data-plasmic-name={"menuIndicator"}
        data-plasmic-override={overrides.menuIndicator}
        className={classNames("__wab_instance", sty.menuIndicator, {
          [sty.menuIndicatoractive]: hasVariant($state, "active", "active"),
          [sty.menuIndicatorinteractive]: hasVariant(
            $state,
            "interactive",
            "interactive"
          ),
          [sty.menuIndicatorisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        })}
        interactive={
          hasVariant($state, "interactive", "interactive") ? true : undefined
        }
        isRecording={
          hasVariant($state, "isRecording", "isRecording") ? true : undefined
        }
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxactive]: hasVariant($state, "active", "active"),
          [sty.freeBoxinteractive]: hasVariant(
            $state,
            "interactive",
            "interactive"
          ),
          [sty.freeBoxisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        })}
      >
        <BoundingBoxHighlighter
          data-plasmic-name={"boundingBoxHighlighter"}
          data-plasmic-override={overrides.boundingBoxHighlighter}
          className={classNames("__wab_instance", sty.boundingBoxHighlighter, {
            [sty.boundingBoxHighlighteractive]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.boundingBoxHighlighterinteractive]: hasVariant(
              $state,
              "interactive",
              "interactive"
            ),
            [sty.boundingBoxHighlighterisRecording]: hasVariant(
              $state,
              "isRecording",
              "isRecording"
            ),
          })}
          isRecording={
            hasVariant($state, "isRecording", "isRecording") ? true : undefined
          }
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "menuIndicator", "freeBox", "boundingBoxHighlighter"],
  menuIndicator: ["menuIndicator"],
  freeBox: ["freeBox", "boundingBoxHighlighter"],
  boundingBoxHighlighter: ["boundingBoxHighlighter"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuIndicator: typeof MenuIndicator;
  freeBox: "div";
  boundingBoxHighlighter: typeof BoundingBoxHighlighter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContextMenuIndicatorInner__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContextMenuIndicatorInner__VariantsArgs;
    args?: PlasmicContextMenuIndicatorInner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContextMenuIndicatorInner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContextMenuIndicatorInner__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContextMenuIndicatorInner__ArgProps,
          internalVariantPropNames:
            PlasmicContextMenuIndicatorInner__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicContextMenuIndicatorInner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContextMenuIndicatorInner";
  } else {
    func.displayName = `PlasmicContextMenuIndicatorInner.${nodeName}`;
  }
  return func;
}

export const PlasmicContextMenuIndicatorInner = Object.assign(
  // Top-level PlasmicContextMenuIndicatorInner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuIndicator: makeNodeComponent("menuIndicator"),
    freeBox: makeNodeComponent("freeBox"),
    boundingBoxHighlighter: makeNodeComponent("boundingBoxHighlighter"),

    // Metadata about props expected for PlasmicContextMenuIndicatorInner
    internalVariantProps: PlasmicContextMenuIndicatorInner__VariantProps,
    internalArgProps: PlasmicContextMenuIndicatorInner__ArgProps,
  }
);

export default PlasmicContextMenuIndicatorInner;
/* prettier-ignore-end */
