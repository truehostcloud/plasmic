// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: SdMPiPjcB9G

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import CopilotMsg from "../../components/CopilotMsg"; // plasmic-import: CdMYaSGMjG/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicCopilotCodePrompt.module.css"; // plasmic-import: SdMPiPjcB9G/css

import HistoryIcon from "../plasmic_kit/PlasmicIcon__History"; // plasmic-import: 6ZOswzsUR/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SendsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SendSvg"; // plasmic-import: h2npYh74m/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: udef47udLQ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: EfDOV4MDLj/icon
import imageUYmVmRYjy from "./images/image.png"; // plasmic-import: UYmVmRYjy/picture

createPlasmicElementProxy;

export type PlasmicCopilotCodePrompt__VariantMembers = {
  state:
    | "ready"
    | "loading"
    | "error"
    | "quotaExceeded"
    | "history"
    | "historyEmpty";
};
export type PlasmicCopilotCodePrompt__VariantsArgs = {
  state?: SingleChoiceArg<
    "ready" | "loading" | "error" | "quotaExceeded" | "history" | "historyEmpty"
  >;
};
type VariantPropType = keyof PlasmicCopilotCodePrompt__VariantsArgs;
export const PlasmicCopilotCodePrompt__VariantProps =
  new Array<VariantPropType>("state");

export type PlasmicCopilotCodePrompt__ArgsType = {};
type ArgPropType = keyof PlasmicCopilotCodePrompt__ArgsType;
export const PlasmicCopilotCodePrompt__ArgProps = new Array<ArgPropType>();

export type PlasmicCopilotCodePrompt__OverridesType = {
  root?: p.Flex<"div">;
  openCopilotBtn?: p.Flex<typeof Button>;
  popoverPlaceholder?: p.Flex<"div">;
  sizerContainer?: p.Flex<"div">;
  promptDialog?: p.Flex<"div">;
  headerContainer?: p.Flex<"div">;
  promptLabel?: p.Flex<"div">;
  history?: p.Flex<"h6">;
  rightButtons?: p.Flex<"div">;
  historyBtn?: p.Flex<typeof IconButton>;
  cancelBtn?: p.Flex<typeof IconButton>;
  contents?: p.Flex<"div">;
  historyContainer?: p.Flex<"div">;
  historyEmptyMsg?: p.Flex<"div">;
  historyContents?: p.Flex<"div">;
  historyBottomDiv?: p.Flex<"div">;
  onLoadTrigger?: p.Flex<typeof p.PlasmicImg>;
  promptContainer?: p.Flex<"div">;
  promptInput?: p.Flex<typeof Textbox>;
  runPromptBtn?: p.Flex<typeof IconButton>;
  errorMessage?: p.Flex<"div">;
  quotaExceededMsg?: p.Flex<"div">;
  reply?: p.Flex<typeof CopilotMsg>;
};

export interface DefaultCopilotCodePromptProps {
  state?: SingleChoiceArg<
    "ready" | "loading" | "error" | "quotaExceeded" | "history" | "historyEmpty"
  >;

  className?: string;
}

const $$ = {};

function PlasmicCopilotCodePrompt__RenderFunc(props: {
  variants: PlasmicCopilotCodePrompt__VariantsArgs;
  args: PlasmicCopilotCodePrompt__ArgsType;
  overrides: PlasmicCopilotCodePrompt__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstate_error]: hasVariant($state, "state", "error"),
          [sty.rootstate_historyEmpty]: hasVariant(
            $state,
            "state",
            "historyEmpty"
          ),
          [sty.rootstate_history]: hasVariant($state, "state", "history"),
          [sty.rootstate_loading]: hasVariant($state, "state", "loading"),
          [sty.rootstate_ready]: hasVariant($state, "state", "ready"),
        }
      )}
    >
      <Button
        data-plasmic-name={"openCopilotBtn"}
        data-plasmic-override={overrides.openCopilotBtn}
        caption={"Caption"}
        className={classNames("__wab_instance", sty.openCopilotBtn, {
          [sty.openCopilotBtnstate_error]: hasVariant($state, "state", "error"),
          [sty.openCopilotBtnstate_loading]: hasVariant(
            $state,
            "state",
            "loading"
          ),
          [sty.openCopilotBtnstate_ready]: hasVariant($state, "state", "ready"),
        })}
        disabled={hasVariant($state, "state", "loading") ? true : undefined}
        size={"small"}
        type={["primary", "chip"]}
      >
        <Icon2Icon
          className={classNames(projectcss.all, sty.svg__ubknx, {
            [sty.svgstate_error__ubknXmAOr]: hasVariant(
              $state,
              "state",
              "error"
            ),
            [sty.svgstate_loading__ubknXa4Pzr]: hasVariant(
              $state,
              "state",
              "loading"
            ),
          })}
          role={"img"}
        />
      </Button>
      {(
        hasVariant($state, "state", "historyEmpty")
          ? true
          : hasVariant($state, "state", "history")
          ? true
          : hasVariant($state, "state", "quotaExceeded")
          ? true
          : hasVariant($state, "state", "error")
          ? true
          : hasVariant($state, "state", "loading")
          ? true
          : hasVariant($state, "state", "ready")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"popoverPlaceholder"}
          data-plasmic-override={overrides.popoverPlaceholder}
          className={classNames(projectcss.all, sty.popoverPlaceholder, {
            [sty.popoverPlaceholderstate_error]: hasVariant(
              $state,
              "state",
              "error"
            ),
            [sty.popoverPlaceholderstate_historyEmpty]: hasVariant(
              $state,
              "state",
              "historyEmpty"
            ),
            [sty.popoverPlaceholderstate_history]: hasVariant(
              $state,
              "state",
              "history"
            ),
            [sty.popoverPlaceholderstate_loading]: hasVariant(
              $state,
              "state",
              "loading"
            ),
            [sty.popoverPlaceholderstate_quotaExceeded]: hasVariant(
              $state,
              "state",
              "quotaExceeded"
            ),
            [sty.popoverPlaceholderstate_ready]: hasVariant(
              $state,
              "state",
              "ready"
            ),
          })}
        >
          <div
            data-plasmic-name={"sizerContainer"}
            data-plasmic-override={overrides.sizerContainer}
            className={classNames(projectcss.all, sty.sizerContainer, {
              [sty.sizerContainerstate_error]: hasVariant(
                $state,
                "state",
                "error"
              ),
              [sty.sizerContainerstate_historyEmpty]: hasVariant(
                $state,
                "state",
                "historyEmpty"
              ),
              [sty.sizerContainerstate_history]: hasVariant(
                $state,
                "state",
                "history"
              ),
              [sty.sizerContainerstate_loading]: hasVariant(
                $state,
                "state",
                "loading"
              ),
              [sty.sizerContainerstate_quotaExceeded]: hasVariant(
                $state,
                "state",
                "quotaExceeded"
              ),
              [sty.sizerContainerstate_ready]: hasVariant(
                $state,
                "state",
                "ready"
              ),
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"promptDialog"}
              data-plasmic-override={overrides.promptDialog}
              hasGap={true}
              className={classNames(projectcss.all, sty.promptDialog, {
                [sty.promptDialogstate_historyEmpty]: hasVariant(
                  $state,
                  "state",
                  "historyEmpty"
                ),
                [sty.promptDialogstate_history]: hasVariant(
                  $state,
                  "state",
                  "history"
                ),
                [sty.promptDialogstate_loading]: hasVariant(
                  $state,
                  "state",
                  "loading"
                ),
                [sty.promptDialogstate_ready]: hasVariant(
                  $state,
                  "state",
                  "ready"
                ),
              })}
            >
              <div
                data-plasmic-name={"headerContainer"}
                data-plasmic-override={overrides.headerContainer}
                className={classNames(projectcss.all, sty.headerContainer, {
                  [sty.headerContainerstate_historyEmpty]: hasVariant(
                    $state,
                    "state",
                    "historyEmpty"
                  ),
                  [sty.headerContainerstate_history]: hasVariant(
                    $state,
                    "state",
                    "history"
                  ),
                  [sty.headerContainerstate_loading]: hasVariant(
                    $state,
                    "state",
                    "loading"
                  ),
                  [sty.headerContainerstate_quotaExceeded]: hasVariant(
                    $state,
                    "state",
                    "quotaExceeded"
                  ),
                  [sty.headerContainerstate_ready]: hasVariant(
                    $state,
                    "state",
                    "ready"
                  ),
                })}
              >
                <div
                  data-plasmic-name={"promptLabel"}
                  data-plasmic-override={overrides.promptLabel}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.promptLabel,
                    {
                      [sty.promptLabelstate_historyEmpty]: hasVariant(
                        $state,
                        "state",
                        "historyEmpty"
                      ),
                      [sty.promptLabelstate_history]: hasVariant(
                        $state,
                        "state",
                        "history"
                      ),
                      [sty.promptLabelstate_loading]: hasVariant(
                        $state,
                        "state",
                        "loading"
                      ),
                      [sty.promptLabelstate_quotaExceeded]: hasVariant(
                        $state,
                        "state",
                        "quotaExceeded"
                      ),
                    }
                  )}
                >
                  {"Describe what you want to get:"}
                </div>
                <h6
                  data-plasmic-name={"history"}
                  data-plasmic-override={overrides.history}
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.history,
                    {
                      [sty.historystate_historyEmpty]: hasVariant(
                        $state,
                        "state",
                        "historyEmpty"
                      ),
                      [sty.historystate_history]: hasVariant(
                        $state,
                        "state",
                        "history"
                      ),
                      [sty.historystate_loading]: hasVariant(
                        $state,
                        "state",
                        "loading"
                      ),
                      [sty.historystate_quotaExceeded]: hasVariant(
                        $state,
                        "state",
                        "quotaExceeded"
                      ),
                    }
                  )}
                >
                  {"Suggestion history"}
                </h6>
                <div
                  data-plasmic-name={"rightButtons"}
                  data-plasmic-override={overrides.rightButtons}
                  className={classNames(projectcss.all, sty.rightButtons)}
                >
                  <IconButton
                    data-plasmic-name={"historyBtn"}
                    data-plasmic-override={overrides.historyBtn}
                    className={classNames("__wab_instance", sty.historyBtn, {
                      [sty.historyBtnstate_historyEmpty]: hasVariant(
                        $state,
                        "state",
                        "historyEmpty"
                      ),
                      [sty.historyBtnstate_history]: hasVariant(
                        $state,
                        "state",
                        "history"
                      ),
                    })}
                    size={"small"}
                  >
                    <HistoryIcon
                      className={classNames(projectcss.all, sty.svg__nhiay, {
                        [sty.svgstate_historyEmpty__nhiay176IJ]: hasVariant(
                          $state,
                          "state",
                          "historyEmpty"
                        ),
                        [sty.svgstate_history__nhiay6YQr]: hasVariant(
                          $state,
                          "state",
                          "history"
                        ),
                      })}
                      role={"img"}
                    />
                  </IconButton>
                  <IconButton
                    data-plasmic-name={"cancelBtn"}
                    data-plasmic-override={overrides.cancelBtn}
                    className={classNames("__wab_instance", sty.cancelBtn, {
                      [sty.cancelBtnstate_quotaExceeded]: hasVariant(
                        $state,
                        "state",
                        "quotaExceeded"
                      ),
                      [sty.cancelBtnstate_ready]: hasVariant(
                        $state,
                        "state",
                        "ready"
                      ),
                    })}
                    size={"small"}
                  >
                    <ClosesvgIcon
                      className={classNames(projectcss.all, sty.svg__ySl6)}
                      role={"img"}
                    />
                  </IconButton>
                </div>
              </div>
              <p.Stack
                as={"div"}
                data-plasmic-name={"contents"}
                data-plasmic-override={overrides.contents}
                hasGap={true}
                className={classNames(projectcss.all, sty.contents, {
                  [sty.contentsstate_historyEmpty]: hasVariant(
                    $state,
                    "state",
                    "historyEmpty"
                  ),
                  [sty.contentsstate_history]: hasVariant(
                    $state,
                    "state",
                    "history"
                  ),
                  [sty.contentsstate_quotaExceeded]: hasVariant(
                    $state,
                    "state",
                    "quotaExceeded"
                  ),
                })}
              >
                {(
                  hasVariant($state, "state", "historyEmpty")
                    ? true
                    : hasVariant($state, "state", "history")
                    ? true
                    : false
                ) ? (
                  <div
                    data-plasmic-name={"historyContainer"}
                    data-plasmic-override={overrides.historyContainer}
                    className={classNames(
                      projectcss.all,
                      sty.historyContainer,
                      {
                        [sty.historyContainerstate_historyEmpty]: hasVariant(
                          $state,
                          "state",
                          "historyEmpty"
                        ),
                        [sty.historyContainerstate_history]: hasVariant(
                          $state,
                          "state",
                          "history"
                        ),
                      }
                    )}
                  >
                    <div
                      data-plasmic-name={"historyEmptyMsg"}
                      data-plasmic-override={overrides.historyEmptyMsg}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.historyEmptyMsg,
                        {
                          [sty.historyEmptyMsgstate_historyEmpty]: hasVariant(
                            $state,
                            "state",
                            "historyEmpty"
                          ),
                          [sty.historyEmptyMsgstate_history]: hasVariant(
                            $state,
                            "state",
                            "history"
                          ),
                        }
                      )}
                    >
                      {hasVariant($state, "state", "historyEmpty")
                        ? "No data"
                        : "Enter some text"}
                    </div>
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"historyContents"}
                      data-plasmic-override={overrides.historyContents}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.historyContents,
                        {
                          [sty.historyContentsstate_historyEmpty]: hasVariant(
                            $state,
                            "state",
                            "historyEmpty"
                          ),
                          [sty.historyContentsstate_history]: hasVariant(
                            $state,
                            "state",
                            "history"
                          ),
                        }
                      )}
                    >
                      <CopilotMsg
                        className={classNames(
                          "__wab_instance",
                          sty.copilotMsg__yTnCa,
                          {
                            [sty.copilotMsgstate_historyEmpty__yTnCa176IJ]:
                              hasVariant($state, "state", "historyEmpty"),
                            [sty.copilotMsgstate_history__yTnCa6YQr]:
                              hasVariant($state, "state", "history"),
                          }
                        )}
                        userPrompt={true}
                      />

                      <CopilotMsg
                        className={classNames(
                          "__wab_instance",
                          sty.copilotMsg__li4VX,
                          {
                            [sty.copilotMsgstate_historyEmpty__li4VX176IJ]:
                              hasVariant($state, "state", "historyEmpty"),
                            [sty.copilotMsgstate_history__li4VX6YQr]:
                              hasVariant($state, "state", "history"),
                          }
                        )}
                        rightMargin={true}
                      />

                      <CopilotMsg
                        className={classNames(
                          "__wab_instance",
                          sty.copilotMsg___5GBpq,
                          {
                            [sty.copilotMsgstate_historyEmpty___5GBpq176IJ]:
                              hasVariant($state, "state", "historyEmpty"),
                            [sty.copilotMsgstate_history___5GBpq6YQr]:
                              hasVariant($state, "state", "history"),
                          }
                        )}
                        userPrompt={true}
                      />

                      <CopilotMsg
                        className={classNames(
                          "__wab_instance",
                          sty.copilotMsg___3Ib5I,
                          {
                            [sty.copilotMsgstate_historyEmpty___3Ib5I176IJ]:
                              hasVariant($state, "state", "historyEmpty"),
                            [sty.copilotMsgstate_history___3Ib5I6YQr]:
                              hasVariant($state, "state", "history"),
                          }
                        )}
                        rightMargin={true}
                      />
                    </p.Stack>
                    <div
                      data-plasmic-name={"historyBottomDiv"}
                      data-plasmic-override={overrides.historyBottomDiv}
                      className={classNames(
                        projectcss.all,
                        sty.historyBottomDiv,
                        {
                          [sty.historyBottomDivstate_historyEmpty]: hasVariant(
                            $state,
                            "state",
                            "historyEmpty"
                          ),
                          [sty.historyBottomDivstate_history]: hasVariant(
                            $state,
                            "state",
                            "history"
                          ),
                        }
                      )}
                      id={"history-bottom-div"}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"onLoadTrigger"}
                        data-plasmic-override={overrides.onLoadTrigger}
                        alt={""}
                        className={classNames(sty.onLoadTrigger, {
                          [sty.onLoadTriggerstate_historyEmpty]: hasVariant(
                            $state,
                            "state",
                            "historyEmpty"
                          ),
                          [sty.onLoadTriggerstate_history]: hasVariant(
                            $state,
                            "state",
                            "history"
                          ),
                        })}
                        displayHeight={
                          hasVariant($state, "state", "historyEmpty")
                            ? "1px"
                            : hasVariant($state, "state", "history")
                            ? "1px"
                            : "auto"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant($state, "state", "historyEmpty")
                            ? "1px"
                            : hasVariant($state, "state", "history")
                            ? "1px"
                            : "auto"
                        }
                        loading={"eager"}
                        onLoad={async (event) => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return document
                                      .getElementById("history-bottom-div")
                                      .scrollIntoView();
                                  },
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        src={
                          hasVariant($state, "state", "historyEmpty")
                            ? {
                                src: imageUYmVmRYjy,
                                fullWidth: 1,
                                fullHeight: 1,
                                aspectRatio: undefined,
                              }
                            : hasVariant($state, "state", "history")
                            ? {
                                src: imageUYmVmRYjy,
                                fullWidth: 1,
                                fullHeight: 1,
                                aspectRatio: undefined,
                              }
                            : undefined
                        }
                      />
                    </div>
                  </div>
                ) : null}
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"promptContainer"}
                  data-plasmic-override={overrides.promptContainer}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.promptContainer, {
                    [sty.promptContainerstate_historyEmpty]: hasVariant(
                      $state,
                      "state",
                      "historyEmpty"
                    ),
                    [sty.promptContainerstate_history]: hasVariant(
                      $state,
                      "state",
                      "history"
                    ),
                    [sty.promptContainerstate_ready]: hasVariant(
                      $state,
                      "state",
                      "ready"
                    ),
                  })}
                >
                  <Textbox
                    data-plasmic-name={"promptInput"}
                    data-plasmic-override={overrides.promptInput}
                    className={classNames("__wab_instance", sty.promptInput, {
                      [sty.promptInputstate_error]: hasVariant(
                        $state,
                        "state",
                        "error"
                      ),
                      [sty.promptInputstate_loading]: hasVariant(
                        $state,
                        "state",
                        "loading"
                      ),
                      [sty.promptInputstate_ready]: hasVariant(
                        $state,
                        "state",
                        "ready"
                      ),
                    })}
                    placeholder={'e.g. "Current month name"'}
                    styleType={["gray"]}
                  />

                  <IconButton
                    data-plasmic-name={"runPromptBtn"}
                    data-plasmic-override={overrides.runPromptBtn}
                    className={classNames("__wab_instance", sty.runPromptBtn, {
                      [sty.runPromptBtnstate_error]: hasVariant(
                        $state,
                        "state",
                        "error"
                      ),
                      [sty.runPromptBtnstate_ready]: hasVariant(
                        $state,
                        "state",
                        "ready"
                      ),
                    })}
                    size={"small"}
                    type={
                      hasVariant($state, "state", "ready")
                        ? ["clear"]
                        : undefined
                    }
                    withBackgroundHover={
                      hasVariant($state, "state", "ready") ? true : undefined
                    }
                  >
                    <SendsvgIcon
                      className={classNames(projectcss.all, sty.svg__hRxiI, {
                        [sty.svgstate_ready__hRxiIPecJh]: hasVariant(
                          $state,
                          "state",
                          "ready"
                        ),
                      })}
                      role={"img"}
                    />
                  </IconButton>
                </p.Stack>
                {(hasVariant($state, "state", "loading") ? true : false) ? (
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__x55Ap, {
                      [sty.svgstate_loading__x55Apa4Pzr]: hasVariant(
                        $state,
                        "state",
                        "loading"
                      ),
                    })}
                    role={"img"}
                  />
                ) : null}
                <div
                  data-plasmic-name={"errorMessage"}
                  data-plasmic-override={overrides.errorMessage}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.errorMessage,
                    {
                      [sty.errorMessagestate_error]: hasVariant(
                        $state,
                        "state",
                        "error"
                      ),
                      [sty.errorMessagestate_loading]: hasVariant(
                        $state,
                        "state",
                        "loading"
                      ),
                    }
                  )}
                >
                  {"Error! \ud83d\ude14"}
                </div>
                <div
                  data-plasmic-name={"quotaExceededMsg"}
                  data-plasmic-override={overrides.quotaExceededMsg}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.quotaExceededMsg,
                    {
                      [sty.quotaExceededMsgstate_error]: hasVariant(
                        $state,
                        "state",
                        "error"
                      ),
                      [sty.quotaExceededMsgstate_loading]: hasVariant(
                        $state,
                        "state",
                        "loading"
                      ),
                      [sty.quotaExceededMsgstate_quotaExceeded]: hasVariant(
                        $state,
                        "state",
                        "quotaExceeded"
                      ),
                      [sty.quotaExceededMsgstate_ready]: hasVariant(
                        $state,
                        "state",
                        "ready"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "state", "quotaExceeded")
                    ? "Oops!\nYou have exceeded the daily limit for using Plasmic Copilot.\nPlease come back tomorrow or at a later time to continue using the service."
                    : "Enter some text"}
                </div>
                <CopilotMsg
                  data-plasmic-name={"reply"}
                  data-plasmic-override={overrides.reply}
                  className={classNames("__wab_instance", sty.reply, {
                    [sty.replystate_quotaExceeded]: hasVariant(
                      $state,
                      "state",
                      "quotaExceeded"
                    ),
                    [sty.replystate_ready]: hasVariant(
                      $state,
                      "state",
                      "ready"
                    ),
                  })}
                />
              </p.Stack>
            </p.Stack>
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "openCopilotBtn",
    "popoverPlaceholder",
    "sizerContainer",
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "runPromptBtn",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],

  openCopilotBtn: ["openCopilotBtn"],
  popoverPlaceholder: [
    "popoverPlaceholder",
    "sizerContainer",
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "runPromptBtn",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],

  sizerContainer: [
    "sizerContainer",
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "runPromptBtn",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],

  promptDialog: [
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "runPromptBtn",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],

  headerContainer: [
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
  ],

  promptLabel: ["promptLabel"],
  history: ["history"],
  rightButtons: ["rightButtons", "historyBtn", "cancelBtn"],
  historyBtn: ["historyBtn"],
  cancelBtn: ["cancelBtn"],
  contents: [
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "runPromptBtn",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],

  historyContainer: [
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
  ],

  historyEmptyMsg: ["historyEmptyMsg"],
  historyContents: ["historyContents"],
  historyBottomDiv: ["historyBottomDiv", "onLoadTrigger"],
  onLoadTrigger: ["onLoadTrigger"],
  promptContainer: ["promptContainer", "promptInput", "runPromptBtn"],
  promptInput: ["promptInput"],
  runPromptBtn: ["runPromptBtn"],
  errorMessage: ["errorMessage"],
  quotaExceededMsg: ["quotaExceededMsg"],
  reply: ["reply"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  openCopilotBtn: typeof Button;
  popoverPlaceholder: "div";
  sizerContainer: "div";
  promptDialog: "div";
  headerContainer: "div";
  promptLabel: "div";
  history: "h6";
  rightButtons: "div";
  historyBtn: typeof IconButton;
  cancelBtn: typeof IconButton;
  contents: "div";
  historyContainer: "div";
  historyEmptyMsg: "div";
  historyContents: "div";
  historyBottomDiv: "div";
  onLoadTrigger: typeof p.PlasmicImg;
  promptContainer: "div";
  promptInput: typeof Textbox;
  runPromptBtn: typeof IconButton;
  errorMessage: "div";
  quotaExceededMsg: "div";
  reply: typeof CopilotMsg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopilotCodePrompt__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopilotCodePrompt__VariantsArgs;
    args?: PlasmicCopilotCodePrompt__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopilotCodePrompt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCopilotCodePrompt__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCopilotCodePrompt__ArgProps,
          internalVariantPropNames: PlasmicCopilotCodePrompt__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCopilotCodePrompt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopilotCodePrompt";
  } else {
    func.displayName = `PlasmicCopilotCodePrompt.${nodeName}`;
  }
  return func;
}

export const PlasmicCopilotCodePrompt = Object.assign(
  // Top-level PlasmicCopilotCodePrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    openCopilotBtn: makeNodeComponent("openCopilotBtn"),
    popoverPlaceholder: makeNodeComponent("popoverPlaceholder"),
    sizerContainer: makeNodeComponent("sizerContainer"),
    promptDialog: makeNodeComponent("promptDialog"),
    headerContainer: makeNodeComponent("headerContainer"),
    promptLabel: makeNodeComponent("promptLabel"),
    history: makeNodeComponent("history"),
    rightButtons: makeNodeComponent("rightButtons"),
    historyBtn: makeNodeComponent("historyBtn"),
    cancelBtn: makeNodeComponent("cancelBtn"),
    contents: makeNodeComponent("contents"),
    historyContainer: makeNodeComponent("historyContainer"),
    historyEmptyMsg: makeNodeComponent("historyEmptyMsg"),
    historyContents: makeNodeComponent("historyContents"),
    historyBottomDiv: makeNodeComponent("historyBottomDiv"),
    onLoadTrigger: makeNodeComponent("onLoadTrigger"),
    promptContainer: makeNodeComponent("promptContainer"),
    promptInput: makeNodeComponent("promptInput"),
    runPromptBtn: makeNodeComponent("runPromptBtn"),
    errorMessage: makeNodeComponent("errorMessage"),
    quotaExceededMsg: makeNodeComponent("quotaExceededMsg"),
    reply: makeNodeComponent("reply"),

    // Metadata about props expected for PlasmicCopilotCodePrompt
    internalVariantProps: PlasmicCopilotCodePrompt__VariantProps,
    internalArgProps: PlasmicCopilotCodePrompt__ArgProps,
  }
);

export default PlasmicCopilotCodePrompt;
/* prettier-ignore-end */
