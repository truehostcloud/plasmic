// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4nEqjj19Sbp3EVnBkgQMP1
// Component: cOWhlnv8o5
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import SimplePathColumn from "../../components/SimplePathColumn"; // plasmic-import: D_TguRKWxB/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import defaultcss from "../PP__plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import sty from "./PlasmicSimplePathBuilder.module.css"; // plasmic-import: cOWhlnv8o5/css
import projectcss from "./plasmic_plasmic_kit_data_expressions.module.css"; // plasmic-import: 4nEqjj19Sbp3EVnBkgQMP1/projectcss

export type PlasmicSimplePathBuilder__VariantMembers = {};

export type PlasmicSimplePathBuilder__VariantsArgs = {};
type VariantPropType = keyof PlasmicSimplePathBuilder__VariantsArgs;
export const PlasmicSimplePathBuilder__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSimplePathBuilder__ArgsType = {};
type ArgPropType = keyof PlasmicSimplePathBuilder__ArgsType;
export const PlasmicSimplePathBuilder__ArgProps = new Array<ArgPropType>();

export type PlasmicSimplePathBuilder__OverridesType = {
  root?: p.Flex<"div">;
  helpButton?: p.Flex<typeof Button>;
  columns?: p.Flex<"div">;
  path?: p.Flex<"div">;
  saveButton?: p.Flex<typeof Button>;
};

export interface DefaultSimplePathBuilderProps {
  className?: string;
}

function PlasmicSimplePathBuilder__RenderFunc(props: {
  variants: PlasmicSimplePathBuilder__VariantsArgs;
  args: PlasmicSimplePathBuilder__ArgsType;
  overrides: PlasmicSimplePathBuilder__OverridesType;
  dataFetches?: PlasmicSimplePathBuilder__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__pqYTq)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__nA8)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__u86Qf
            )}
          >
            {"Select data"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___6BrWs)}
        >
          <Button
            data-plasmic-name={"helpButton"}
            data-plasmic-override={overrides.helpButton}
            type={"link" as const}
          >
            {"Help"}
          </Button>
        </p.Stack>
      </div>

      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(defaultcss.all, sty.columns)}
      >
        <SimplePathColumn
          className={classNames("__wab_instance", sty.simplePathColumn__sWTyv)}
          isUnfocused={"isUnfocused" as const}
        />

        <SimplePathColumn
          className={classNames("__wab_instance", sty.simplePathColumn__aFxuP)}
        />
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__frde7)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"path"}
          data-plasmic-override={overrides.path}
          hasGap={true}
          className={classNames(defaultcss.all, sty.path)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__hirXo
            )}
          >
            {"result"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text___5PsXt
            )}
          >
            {"▸"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text___3Xhkr
            )}
          >
            {"blogPosts"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__umUt0
            )}
          >
            {"▸"}
          </div>
        </p.Stack>

        <Button
          data-plasmic-name={"saveButton"}
          data-plasmic-override={overrides.saveButton}
          className={classNames("__wab_instance", sty.saveButton)}
          type={"primary" as const}
        >
          {"Save"}
        </Button>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "helpButton", "columns", "path", "saveButton"],
  helpButton: ["helpButton"],
  columns: ["columns"],
  path: ["path"],
  saveButton: ["saveButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  helpButton: typeof Button;
  columns: "div";
  path: "div";
  saveButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSimplePathBuilder__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSimplePathBuilder__VariantsArgs;
  args?: PlasmicSimplePathBuilder__ArgsType;
  overrides?: NodeOverridesType<T>;
  dataFetches?: PlasmicSimplePathBuilder__Fetches;
} & Omit<PlasmicSimplePathBuilder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSimplePathBuilder__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSimplePathBuilder__ArgProps,
      internalVariantPropNames: PlasmicSimplePathBuilder__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicSimplePathBuilder__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSimplePathBuilder";
  } else {
    func.displayName = `PlasmicSimplePathBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicSimplePathBuilder = Object.assign(
  // Top-level PlasmicSimplePathBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    helpButton: makeNodeComponent("helpButton"),
    columns: makeNodeComponent("columns"),
    path: makeNodeComponent("path"),
    saveButton: makeNodeComponent("saveButton"),

    // Metadata about props expected for PlasmicSimplePathBuilder
    internalVariantProps: PlasmicSimplePathBuilder__VariantProps,
    internalArgProps: PlasmicSimplePathBuilder__ArgProps,
  }
);

export default PlasmicSimplePathBuilder;
/* prettier-ignore-end */
