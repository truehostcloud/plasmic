// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4nEqjj19Sbp3EVnBkgQMP1
// Component: D_TguRKWxB
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  SingleBooleanChoiceArg,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import SimplePathRow from "../../components/SimplePathRow"; // plasmic-import: FOLsgsm2iy/component
import SimplePathRowHeader from "../../components/SimplePathRowHeader"; // plasmic-import: LRUE0mIhfL/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import defaultcss from "../PP__plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import sty from "./PlasmicSimplePathColumn.module.css"; // plasmic-import: D_TguRKWxB/css
import projectcss from "./plasmic_plasmic_kit_data_expressions.module.css"; // plasmic-import: 4nEqjj19Sbp3EVnBkgQMP1/projectcss

export type PlasmicSimplePathColumn__VariantMembers = {
  isUnfocused: "isUnfocused";
};

export type PlasmicSimplePathColumn__VariantsArgs = {
  isUnfocused?: SingleBooleanChoiceArg<"isUnfocused">;
};

type VariantPropType = keyof PlasmicSimplePathColumn__VariantsArgs;
export const PlasmicSimplePathColumn__VariantProps = new Array<VariantPropType>(
  "isUnfocused"
);

export type PlasmicSimplePathColumn__ArgsType = {};
type ArgPropType = keyof PlasmicSimplePathColumn__ArgsType;
export const PlasmicSimplePathColumn__ArgProps = new Array<ArgPropType>();

export type PlasmicSimplePathColumn__OverridesType = {
  root?: p.Flex<"div">;
  searchInput?: p.Flex<typeof Textbox>;
  rows?: p.Flex<"div">;
  mask?: p.Flex<"div">;
};

export interface DefaultSimplePathColumnProps {
  isUnfocused?: SingleBooleanChoiceArg<"isUnfocused">;
  className?: string;
}

function PlasmicSimplePathColumn__RenderFunc(props: {
  variants: PlasmicSimplePathColumn__VariantsArgs;
  args: PlasmicSimplePathColumn__ArgsType;
  overrides: PlasmicSimplePathColumn__OverridesType;
  dataFetches?: PlasmicSimplePathColumn__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isUnfocused]: hasVariant(
          variants,
          "isUnfocused",
          "isUnfocused"
        ),
      })}
    >
      <Textbox
        data-plasmic-name={"searchInput"}
        data-plasmic-override={overrides.searchInput}
        placeholder={"Search" as const}
        styleType={["bordered"]}
      />

      <div
        data-plasmic-name={"rows"}
        data-plasmic-override={overrides.rows}
        className={classNames(defaultcss.all, sty.rows)}
      >
        <SimplePathRowHeader
          className={classNames(
            "__wab_instance",
            sty.simplePathRowHeader__qncat
          )}
        />

        <SimplePathRow
          className={classNames("__wab_instance", sty.simplePathRow__sPuM, {
            [sty.simplePathRow__isUnfocused__sPuMjkxgU]: hasVariant(
              variants,
              "isUnfocused",
              "isUnfocused"
            ),
          })}
          isSelected={"isSelected" as const}
        />

        <SimplePathRow
          className={classNames("__wab_instance", sty.simplePathRow__q4J2Z)}
        />

        <SimplePathRowHeader
          className={classNames(
            "__wab_instance",
            sty.simplePathRowHeader__nlqgo
          )}
        >
          {"Functions"}
        </SimplePathRowHeader>

        <SimplePathRow
          className={classNames("__wab_instance", sty.simplePathRow___1Trf1)}
        />

        <SimplePathRow
          className={classNames("__wab_instance", sty.simplePathRow__xcPdf)}
        />
      </div>

      {(hasVariant(variants, "isUnfocused", "isUnfocused") ? true : false) ? (
        <div
          data-plasmic-name={"mask"}
          data-plasmic-override={overrides.mask}
          className={classNames(defaultcss.all, sty.mask, {
            [sty.mask__isUnfocused]: hasVariant(
              variants,
              "isUnfocused",
              "isUnfocused"
            ),
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "searchInput", "rows", "mask"],
  searchInput: ["searchInput"],
  rows: ["rows"],
  mask: ["mask"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  searchInput: typeof Textbox;
  rows: "div";
  mask: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSimplePathColumn__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSimplePathColumn__VariantsArgs;
  args?: PlasmicSimplePathColumn__ArgsType;
  overrides?: NodeOverridesType<T>;
  dataFetches?: PlasmicSimplePathColumn__Fetches;
} & Omit<PlasmicSimplePathColumn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSimplePathColumn__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSimplePathColumn__ArgProps,
      internalVariantPropNames: PlasmicSimplePathColumn__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicSimplePathColumn__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSimplePathColumn";
  } else {
    func.displayName = `PlasmicSimplePathColumn.${nodeName}`;
  }
  return func;
}

export const PlasmicSimplePathColumn = Object.assign(
  // Top-level PlasmicSimplePathColumn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchInput: makeNodeComponent("searchInput"),
    rows: makeNodeComponent("rows"),
    mask: makeNodeComponent("mask"),

    // Metadata about props expected for PlasmicSimplePathColumn
    internalVariantProps: PlasmicSimplePathColumn__VariantProps,
    internalArgProps: PlasmicSimplePathColumn__ArgProps,
  }
);

export default PlasmicSimplePathColumn;
/* prettier-ignore-end */
