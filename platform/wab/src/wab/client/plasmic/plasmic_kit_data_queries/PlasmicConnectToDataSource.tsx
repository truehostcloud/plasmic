// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9csusiyEETC5n9fFKLeYNK
// Component: Rh23GExBNXe
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import Modal from "../../components/Modal"; // plasmic-import: rD0wOVzSnE/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import TrashIcon from "../plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon
import TriangleBottomIcon from "../plasmic_kit/PlasmicIcon__TriangleBottom"; // plasmic-import: A8NQUZ7Lg1OHO/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_queries.module.css"; // plasmic-import: 9csusiyEETC5n9fFKLeYNK/projectcss
import sty from "./PlasmicConnectToDataSource.module.css"; // plasmic-import: Rh23GExBNXe/css

export type PlasmicConnectToDataSource__VariantMembers = {};

export type PlasmicConnectToDataSource__VariantsArgs = {};
type VariantPropType = keyof PlasmicConnectToDataSource__VariantsArgs;
export const PlasmicConnectToDataSource__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConnectToDataSource__ArgsType = {};
type ArgPropType = keyof PlasmicConnectToDataSource__ArgsType;
export const PlasmicConnectToDataSource__ArgProps = new Array<ArgPropType>();

export type PlasmicConnectToDataSource__OverridesType = {
  root?: p.Flex<"div">;
  modal?: p.Flex<typeof Modal>;
  title?: p.Flex<"div">;
  instruction?: p.Flex<"div">;
  keyInput?: p.Flex<typeof Textbox>;
  picker?: p.Flex<typeof Select>;
  cancelButton?: p.Flex<typeof Button>;
  nextButton?: p.Flex<typeof Button>;
};

export interface DefaultConnectToDataSourceProps {
  className?: string;
}

function PlasmicConnectToDataSource__RenderFunc(props: {
  variants: PlasmicConnectToDataSource__VariantsArgs;
  args: PlasmicConnectToDataSource__ArgsType;
  overrides: PlasmicConnectToDataSource__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Modal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        footer={
          <React.Fragment>
            <Button
              data-plasmic-name={"cancelButton"}
              data-plasmic-override={overrides.cancelButton}
              className={classNames("__wab_instance", sty.cancelButton)}
              endIcon={
                <TriangleBottomIcon
                  className={classNames(projectcss.all, sty.svg___5G2Sd)}
                  role={"img"}
                />
              }
              startIcon={
                <TrashIcon
                  className={classNames(projectcss.all, sty.svg__cwvqw)}
                  role={"img"}
                />
              }
              type={"secondary" as const}
            >
              {"Cancel"}
            </Button>

            <Button
              data-plasmic-name={"nextButton"}
              data-plasmic-override={overrides.nextButton}
              className={classNames("__wab_instance", sty.nextButton)}
              endIcon={
                <TriangleBottomIcon
                  className={classNames(projectcss.all, sty.svg__lcGbe)}
                  role={"img"}
                />
              }
              startIcon={
                <TrashIcon
                  className={classNames(projectcss.all, sty.svg__mVw8J)}
                  role={"img"}
                />
              }
              type={"primary" as const}
            >
              {"Next"}
            </Button>
          </React.Fragment>
        }
        title={
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title
            )}
          >
            {"Connect to {data source}"}
          </div>
        }
      >
        <div
          data-plasmic-name={"instruction"}
          data-plasmic-override={overrides.instruction}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.instruction
          )}
        >
          {"Enter your API key. You can find it by clicking XXX."}
        </div>

        <Textbox
          data-plasmic-name={"keyInput"}
          data-plasmic-override={overrides.keyInput}
          className={classNames("__wab_instance", sty.keyInput)}
          placeholder={"Enter API key" as const}
          prefixIcon={
            <SearchsvgIcon
              className={classNames(projectcss.all, sty.svg__fdl9P)}
              role={"img"}
            />
          }
          styleType={["bordered"]}
          suffixIcon={
            <ClosesvgIcon
              className={classNames(projectcss.all, sty.svg__mZYxA)}
              role={"img"}
            />
          }
        />

        <Select
          data-plasmic-name={"picker"}
          data-plasmic-override={overrides.picker}
          className={classNames("__wab_instance", sty.picker)}
        />
      </Modal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "title",
    "instruction",
    "keyInput",
    "picker",
    "cancelButton",
    "nextButton",
  ],

  modal: [
    "modal",
    "title",
    "instruction",
    "keyInput",
    "picker",
    "cancelButton",
    "nextButton",
  ],

  title: ["title"],
  instruction: ["instruction"],
  keyInput: ["keyInput"],
  picker: ["picker"],
  cancelButton: ["cancelButton"],
  nextButton: ["nextButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof Modal;
  title: "div";
  instruction: "div";
  keyInput: typeof Textbox;
  picker: typeof Select;
  cancelButton: typeof Button;
  nextButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnectToDataSource__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicConnectToDataSource__VariantsArgs;
  args?: PlasmicConnectToDataSource__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicConnectToDataSource__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicConnectToDataSource__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicConnectToDataSource__ArgProps,
      internalVariantPropNames: PlasmicConnectToDataSource__VariantProps,
    });

    return PlasmicConnectToDataSource__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnectToDataSource";
  } else {
    func.displayName = `PlasmicConnectToDataSource.${nodeName}`;
  }
  return func;
}

export const PlasmicConnectToDataSource = Object.assign(
  // Top-level PlasmicConnectToDataSource renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    title: makeNodeComponent("title"),
    instruction: makeNodeComponent("instruction"),
    keyInput: makeNodeComponent("keyInput"),
    picker: makeNodeComponent("picker"),
    cancelButton: makeNodeComponent("cancelButton"),
    nextButton: makeNodeComponent("nextButton"),

    // Metadata about props expected for PlasmicConnectToDataSource
    internalVariantProps: PlasmicConnectToDataSource__VariantProps,
    internalArgProps: PlasmicConnectToDataSource__ArgProps,
  }
);

export default PlasmicConnectToDataSource;
/* prettier-ignore-end */
