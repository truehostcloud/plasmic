// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9csusiyEETC5n9fFKLeYNK
// Component: _Lp0iIQjbN
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import image9IFo08KkR from "./images/image.png"; // plasmic-import: 9iFo08KkR/picture
import projectcss from "./plasmic_plasmic_kit_data_queries.module.css"; // plasmic-import: 9csusiyEETC5n9fFKLeYNK/projectcss
import sty from "./PlasmicDataSource.module.css"; // plasmic-import: _Lp0iIQjbN/css

export type PlasmicDataSource__VariantMembers = {};

export type PlasmicDataSource__VariantsArgs = {};
type VariantPropType = keyof PlasmicDataSource__VariantsArgs;
export const PlasmicDataSource__VariantProps = new Array<VariantPropType>();

export type PlasmicDataSource__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDataSource__ArgsType;
export const PlasmicDataSource__ArgProps = new Array<ArgPropType>("children");

export type PlasmicDataSource__OverridesType = {
  root?: p.Flex<"button">;
};

export interface DefaultDataSourceProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicDataSource__RenderFunc(props: {
  variants: PlasmicDataSource__VariantsArgs;
  args: PlasmicDataSource__ArgsType;
  overrides: PlasmicDataSource__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__iv9Z2
            )}
            src={image9IFo08KkR}
          />
        ),

        value: args.children,
      })}
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataSource__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDataSource__VariantsArgs;
  args?: PlasmicDataSource__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDataSource__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDataSource__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDataSource__ArgProps,
      internalVariantPropNames: PlasmicDataSource__VariantProps,
    });

    return PlasmicDataSource__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataSource";
  } else {
    func.displayName = `PlasmicDataSource.${nodeName}`;
  }
  return func;
}

export const PlasmicDataSource = Object.assign(
  // Top-level PlasmicDataSource renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDataSource
    internalVariantProps: PlasmicDataSource__VariantProps,
    internalArgProps: PlasmicDataSource__ArgProps,
  }
);

export default PlasmicDataSource;
/* prettier-ignore-end */
