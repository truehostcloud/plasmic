// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9csusiyEETC5n9fFKLeYNK
// Component: udG9wNYCNL
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  SingleBooleanChoiceArg,
  StrictProps,
  useTrigger,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import TrashIcon from "../plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_queries.module.css"; // plasmic-import: 9csusiyEETC5n9fFKLeYNK/projectcss
import sty from "./PlasmicKeyValueRow.module.css"; // plasmic-import: udG9wNYCNL/css

export type PlasmicKeyValueRow__VariantMembers = {
  readOnlyKey: "readOnlyKey";
  readOnlyValue: "readOnlyValue";
  noIconButton: "noIconButton";
};

export type PlasmicKeyValueRow__VariantsArgs = {
  readOnlyKey?: SingleBooleanChoiceArg<"readOnlyKey">;
  readOnlyValue?: SingleBooleanChoiceArg<"readOnlyValue">;
  noIconButton?: SingleBooleanChoiceArg<"noIconButton">;
};

type VariantPropType = keyof PlasmicKeyValueRow__VariantsArgs;
export const PlasmicKeyValueRow__VariantProps = new Array<VariantPropType>(
  "readOnlyKey",
  "readOnlyValue",
  "noIconButton"
);

export type PlasmicKeyValueRow__ArgsType = {
  keyLabel?: React.ReactNode;
  icon?: React.ReactNode;
  value?: React.ReactNode;
};

type ArgPropType = keyof PlasmicKeyValueRow__ArgsType;
export const PlasmicKeyValueRow__ArgProps = new Array<ArgPropType>(
  "keyLabel",
  "icon",
  "value"
);

export type PlasmicKeyValueRow__OverridesType = {
  root?: p.Flex<"div">;
  keyInput?: p.Flex<typeof Textbox>;
  valueInput?: p.Flex<typeof Textbox>;
  iconButton?: p.Flex<typeof IconButton>;
};

export interface DefaultKeyValueRowProps {
  keyLabel?: React.ReactNode;
  icon?: React.ReactNode;
  value?: React.ReactNode;
  readOnlyKey?: SingleBooleanChoiceArg<"readOnlyKey">;
  readOnlyValue?: SingleBooleanChoiceArg<"readOnlyValue">;
  noIconButton?: SingleBooleanChoiceArg<"noIconButton">;
  className?: string;
}

function PlasmicKeyValueRow__RenderFunc(props: {
  variants: PlasmicKeyValueRow__VariantsArgs;
  args: PlasmicKeyValueRow__ArgsType;
  overrides: PlasmicKeyValueRow__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootreadOnlyKey]: hasVariant(
            variants,
            "readOnlyKey",
            "readOnlyKey"
          ),

          [sty.rootreadOnlyValue]: hasVariant(
            variants,
            "readOnlyValue",
            "readOnlyValue"
          ),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__x28HV, {
          [sty.freeBoxreadOnlyKey__x28HVqt3QE]: hasVariant(
            variants,
            "readOnlyKey",
            "readOnlyKey"
          ),
        })}
      >
        {(hasVariant(variants, "readOnlyKey", "readOnlyKey") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: "Label",
              value: args.keyLabel,
            })
          : null}
        {(hasVariant(variants, "readOnlyKey", "readOnlyKey") ? false : true) ? (
          <Textbox
            data-plasmic-name={"keyInput"}
            data-plasmic-override={overrides.keyInput}
            className={classNames("__wab_instance", sty.keyInput, {
              [sty.keyInputreadOnlyKey]: hasVariant(
                variants,
                "readOnlyKey",
                "readOnlyKey"
              ),
            })}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__taKU)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__oBc)}
                role={"img"}
              />
            }
          />
        ) : null}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__vYrtT, {
          [sty.freeBoxnoIconButton__vYrtTgtRln]: hasVariant(
            variants,
            "noIconButton",
            "noIconButton"
          ),

          [sty.freeBoxreadOnlyValue__vYrtTq1IjC]: hasVariant(
            variants,
            "readOnlyValue",
            "readOnlyValue"
          ),
        })}
      >
        {(
          hasVariant(variants, "readOnlyValue", "readOnlyValue") ? false : true
        ) ? (
          <Textbox
            data-plasmic-name={"valueInput"}
            data-plasmic-override={overrides.valueInput}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__yay2D)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg___78OQf)}
                role={"img"}
              />
            }
          />
        ) : null}
        {(hasVariant(variants, "readOnlyValue", "readOnlyValue") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.value,
            })
          : null}
      </div>

      {(hasVariant(variants, "noIconButton", "noIconButton") ? false : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___3Xs3, {
            [sty.freeBoxnoIconButton___3Xs3GtRln]: hasVariant(
              variants,
              "noIconButton",
              "noIconButton"
            ),

            [sty.freeBoxreadOnlyValue___3Xs3Q1IjC]: hasVariant(
              variants,
              "readOnlyValue",
              "readOnlyValue"
            ),
          })}
        >
          {(triggers.hover_root ? true : false) ? (
            <IconButton
              data-plasmic-name={"iconButton"}
              data-plasmic-override={overrides.iconButton}
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__dvVmK)}
                  role={"img"}
                />
              }
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <TrashIcon
                    className={classNames(projectcss.all, sty.svg__tp2Vg)}
                    role={"img"}
                  />
                ),

                value: args.icon,
              })}
            </IconButton>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "keyInput", "valueInput", "iconButton"],
  keyInput: ["keyInput"],
  valueInput: ["valueInput"],
  iconButton: ["iconButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  keyInput: typeof Textbox;
  valueInput: typeof Textbox;
  iconButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicKeyValueRow__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicKeyValueRow__VariantsArgs;
  args?: PlasmicKeyValueRow__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicKeyValueRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicKeyValueRow__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicKeyValueRow__ArgProps,
      internalVariantPropNames: PlasmicKeyValueRow__VariantProps,
    });

    return PlasmicKeyValueRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicKeyValueRow";
  } else {
    func.displayName = `PlasmicKeyValueRow.${nodeName}`;
  }
  return func;
}

export const PlasmicKeyValueRow = Object.assign(
  // Top-level PlasmicKeyValueRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    keyInput: makeNodeComponent("keyInput"),
    valueInput: makeNodeComponent("valueInput"),
    iconButton: makeNodeComponent("iconButton"),

    // Metadata about props expected for PlasmicKeyValueRow
    internalVariantProps: PlasmicKeyValueRow__VariantProps,
    internalArgProps: PlasmicKeyValueRow__ArgProps,
  }
);

export default PlasmicKeyValueRow;
/* prettier-ignore-end */
