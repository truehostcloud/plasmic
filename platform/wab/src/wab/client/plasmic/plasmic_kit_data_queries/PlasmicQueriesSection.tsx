// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9csusiyEETC5n9fFKLeYNK
// Component: SsRHEyfw_M
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import ListBuilder from "../../components/ListBuilder"; // plasmic-import: _VRtHiszCx/component
import QueryRow from "../../components/QueryRow"; // plasmic-import: dtgx0NGfys/component
import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_queries.module.css"; // plasmic-import: 9csusiyEETC5n9fFKLeYNK/projectcss
import sty from "./PlasmicQueriesSection.module.css"; // plasmic-import: SsRHEyfw_M/css

export type PlasmicQueriesSection__VariantMembers = {};

export type PlasmicQueriesSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicQueriesSection__VariantsArgs;
export const PlasmicQueriesSection__VariantProps = new Array<VariantPropType>();

export type PlasmicQueriesSection__ArgsType = {};
type ArgPropType = keyof PlasmicQueriesSection__ArgsType;
export const PlasmicQueriesSection__ArgProps = new Array<ArgPropType>();

export type PlasmicQueriesSection__OverridesType = {
  root?: p.Flex<"div">;
  queriesList?: p.Flex<typeof ListBuilder>;
  svg?: p.Flex<"svg">;
};

export interface DefaultQueriesSectionProps {
  className?: string;
}

function PlasmicQueriesSection__RenderFunc(props: {
  variants: PlasmicQueriesSection__VariantsArgs;
  args: PlasmicQueriesSection__ArgsType;
  overrides: PlasmicQueriesSection__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <ListBuilder
        data-plasmic-name={"queriesList"}
        data-plasmic-override={overrides.queriesList}
        className={classNames("__wab_instance", sty.queriesList)}
        icon={
          <PlusIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        title={"Queries"}
      >
        <QueryRow
          className={classNames("__wab_instance", sty.queryRow___4BhyA)}
        />

        <QueryRow
          className={classNames("__wab_instance", sty.queryRow__aG2Ud)}
        />
      </ListBuilder>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "queriesList", "svg"],
  queriesList: ["queriesList", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  queriesList: typeof ListBuilder;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQueriesSection__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicQueriesSection__VariantsArgs;
  args?: PlasmicQueriesSection__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicQueriesSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicQueriesSection__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicQueriesSection__ArgProps,
      internalVariantPropNames: PlasmicQueriesSection__VariantProps,
    });

    return PlasmicQueriesSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQueriesSection";
  } else {
    func.displayName = `PlasmicQueriesSection.${nodeName}`;
  }
  return func;
}

export const PlasmicQueriesSection = Object.assign(
  // Top-level PlasmicQueriesSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    queriesList: makeNodeComponent("queriesList"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicQueriesSection
    internalVariantProps: PlasmicQueriesSection__VariantProps,
    internalArgProps: PlasmicQueriesSection__ArgProps,
  }
);

export default PlasmicQueriesSection;
/* prettier-ignore-end */
