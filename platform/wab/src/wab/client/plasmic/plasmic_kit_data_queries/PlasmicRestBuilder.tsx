// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9csusiyEETC5n9fFKLeYNK
// Component: hkmuxJmyM9
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  SingleBooleanChoiceArg,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import AuthForm from "../../components/AuthForm"; // plasmic-import: 1ooaehe0m9/component
import KeyValueRow from "../../components/KeyValueRow"; // plasmic-import: udG9wNYCNL/component
import ListBuilder from "../../components/ListBuilder"; // plasmic-import: _VRtHiszCx/component
import TextWithInfo from "../../components/TextWithInfo"; // plasmic-import: -EsDm7v023/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Checkbox from "../../components/widgets/Checkbox"; // plasmic-import: W-rO7NZqPjZ/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import HelpIcon from "../plasmic_kit/PlasmicIcon__Help"; // plasmic-import: -9-68IGPdLG-5/icon
import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import TrashIcon from "../plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon
import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon
import WarningTrianglesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__WarningTriangleSvg"; // plasmic-import: S0L-xosWD/icon
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import ChevronBottomIcon from "./icons/PlasmicIcon__ChevronBottom"; // plasmic-import: 6YWYAmDA19k/icon
import projectcss from "./plasmic_plasmic_kit_data_queries.module.css"; // plasmic-import: 9csusiyEETC5n9fFKLeYNK/projectcss
import sty from "./PlasmicRestBuilder.module.css"; // plasmic-import: hkmuxJmyM9/css

export type PlasmicRestBuilder__VariantMembers = {
  builtInDataSource: "builtInDataSource";
};

export type PlasmicRestBuilder__VariantsArgs = {
  builtInDataSource?: SingleBooleanChoiceArg<"builtInDataSource">;
};

type VariantPropType = keyof PlasmicRestBuilder__VariantsArgs;
export const PlasmicRestBuilder__VariantProps = new Array<VariantPropType>(
  "builtInDataSource"
);

export type PlasmicRestBuilder__ArgsType = {};
type ArgPropType = keyof PlasmicRestBuilder__ArgsType;
export const PlasmicRestBuilder__ArgProps = new Array<ArgPropType>();

export type PlasmicRestBuilder__OverridesType = {
  root?: p.Flex<"div">;
  title?: p.Flex<"div">;
  helpButton?: p.Flex<typeof Button>;
  importButton?: p.Flex<typeof Button>;
  topControls?: p.Flex<"div">;
  methodSelect?: p.Flex<typeof Select>;
  urlInput?: p.Flex<typeof Textbox>;
  hintButton?: p.Flex<typeof IconButton>;
  builtinParams?: p.Flex<typeof ListBuilder>;
  queryParamsSection?: p.Flex<typeof ListBuilder>;
  pathVariablesSection?: p.Flex<typeof ListBuilder>;
  headersSection?: p.Flex<typeof ListBuilder>;
  authSection?: p.Flex<typeof ListBuilder>;
  text?: p.Flex<"div">;
  authForm?: p.Flex<typeof AuthForm>;
  bodySection?: p.Flex<typeof ListBuilder>;
  bodyInput?: p.Flex<"textarea">;
  previewButton?: p.Flex<typeof Button>;
  responseStatus?: p.Flex<"div">;
  responseData?: p.Flex<"div">;
  serverSideCheckbox?: p.Flex<typeof Checkbox>;
  textWithInfo?: p.Flex<typeof TextWithInfo>;
  doneButton?: p.Flex<typeof Button>;
};

export interface DefaultRestBuilderProps {
  builtInDataSource?: SingleBooleanChoiceArg<"builtInDataSource">;
  className?: string;
}

function PlasmicRestBuilder__RenderFunc(props: {
  variants: PlasmicRestBuilder__VariantsArgs;
  args: PlasmicRestBuilder__ArgsType;
  overrides: PlasmicRestBuilder__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootbuiltInDataSource]: hasVariant(
            variants,
            "builtInDataSource",
            "builtInDataSource"
          ),
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xFdb6, {
          [sty.freeBoxbuiltInDataSource__xFdb6VeAhc]: hasVariant(
            variants,
            "builtInDataSource",
            "builtInDataSource"
          ),
        })}
      >
        <div
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.title,
            {
              [sty.titlebuiltInDataSource]: hasVariant(
                variants,
                "builtInDataSource",
                "builtInDataSource"
              ),
            }
          )}
        >
          {"REST query builder"}
        </div>

        <Button
          data-plasmic-name={"helpButton"}
          data-plasmic-override={overrides.helpButton}
          className={classNames("__wab_instance", sty.helpButton)}
          endIcon={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg___6EdNp)}
              role={"img"}
            />
          }
          startIcon={
            <ArrowRightsvgIcon
              className={classNames(projectcss.all, sty.svg___0BvRi)}
              role={"img"}
            />
          }
          type={"link" as const}
        >
          {"Help"}
        </Button>

        <Button
          data-plasmic-name={"importButton"}
          data-plasmic-override={overrides.importButton}
          className={classNames("__wab_instance", sty.importButton)}
          endIcon={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg__tXk6H)}
              role={"img"}
            />
          }
          startIcon={
            <ArrowRightsvgIcon
              className={classNames(projectcss.all, sty.svg__gTyAy)}
              role={"img"}
            />
          }
          type={"link" as const}
        >
          {"Import"}
        </Button>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fOvJ)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dSjt, {
            [sty.freeBoxbuiltInDataSource__dSjtVeAhc]: hasVariant(
              variants,
              "builtInDataSource",
              "builtInDataSource"
            ),
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"topControls"}
            data-plasmic-override={overrides.topControls}
            hasGap={true}
            className={classNames(projectcss.all, sty.topControls)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oU0S, {
                [sty.freeBoxbuiltInDataSource__oU0SVeAhc]: hasVariant(
                  variants,
                  "builtInDataSource",
                  "builtInDataSource"
                ),
              })}
            >
              <Select
                data-plasmic-name={"methodSelect"}
                data-plasmic-override={overrides.methodSelect}
                className={classNames("__wab_instance", sty.methodSelect)}
                type={"hugging" as const}
              />

              <Textbox
                data-plasmic-name={"urlInput"}
                data-plasmic-override={overrides.urlInput}
                className={classNames("__wab_instance", sty.urlInput, {
                  [sty.urlInputbuiltInDataSource]: hasVariant(
                    variants,
                    "builtInDataSource",
                    "builtInDataSource"
                  ),
                })}
                prefixIcon={
                  <SearchsvgIcon
                    className={classNames(projectcss.all, sty.svg__c8YtQ)}
                    role={"img"}
                  />
                }
                styleType={["bordered"]}
                suffixIcon={
                  <ClosesvgIcon
                    className={classNames(projectcss.all, sty.svg__oVyHp)}
                    role={"img"}
                  />
                }
              />

              <IconButton
                data-plasmic-name={"hintButton"}
                data-plasmic-override={overrides.hintButton}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__yD3B)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.hintButton)}
              >
                <HelpIcon
                  className={classNames(projectcss.all, sty.svg__uPGoh)}
                  role={"img"}
                />
              </IconButton>
            </p.Stack>
          </p.Stack>

          <ListBuilder
            data-plasmic-name={"builtinParams"}
            data-plasmic-override={overrides.builtinParams}
            className={classNames("__wab_instance", sty.builtinParams)}
            hideIconButton={true}
            icon={
              <PlusIcon
                className={classNames(projectcss.all, sty.svg__mhL)}
                role={"img"}
              />
            }
            title={"Params"}
          >
            <KeyValueRow
              className={classNames("__wab_instance", sty.keyValueRow__nqPMs)}
              icon={
                <TrashIcon
                  className={classNames(projectcss.all, sty.svg__m5RHm)}
                  role={"img"}
                />
              }
            />
          </ListBuilder>

          {(
            hasVariant(variants, "builtInDataSource", "builtInDataSource")
              ? false
              : true
          ) ? (
            <ListBuilder
              data-plasmic-name={"queryParamsSection"}
              data-plasmic-override={overrides.queryParamsSection}
              className={classNames("__wab_instance", sty.queryParamsSection, {
                [sty.queryParamsSectionbuiltInDataSource]: hasVariant(
                  variants,
                  "builtInDataSource",
                  "builtInDataSource"
                ),
              })}
              icon={
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__gbpS3)}
                  role={"img"}
                />
              }
              title={"Query params"}
            >
              <KeyValueRow
                className={classNames("__wab_instance", sty.keyValueRow__v9KhP)}
                icon={
                  <TrashIcon
                    className={classNames(projectcss.all, sty.svg__oCmWv)}
                    role={"img"}
                  />
                }
              />
            </ListBuilder>
          ) : null}
          {(
            hasVariant(variants, "builtInDataSource", "builtInDataSource")
              ? false
              : true
          ) ? (
            <ListBuilder
              data-plasmic-name={"pathVariablesSection"}
              data-plasmic-override={overrides.pathVariablesSection}
              className={classNames(
                "__wab_instance",
                sty.pathVariablesSection,
                {
                  [sty.pathVariablesSectionbuiltInDataSource]: hasVariant(
                    variants,
                    "builtInDataSource",
                    "builtInDataSource"
                  ),
                }
              )}
              icon={
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg___9V4J8)}
                  role={"img"}
                />
              }
              title={"Path variables"}
            >
              <KeyValueRow
                className={classNames(
                  "__wab_instance",
                  sty.keyValueRow___4ASav
                )}
                icon={
                  <TrashIcon
                    className={classNames(projectcss.all, sty.svg__uz6Cg)}
                    role={"img"}
                  />
                }
              />
            </ListBuilder>
          ) : null}
          {(
            hasVariant(variants, "builtInDataSource", "builtInDataSource")
              ? false
              : true
          ) ? (
            <ListBuilder
              data-plasmic-name={"headersSection"}
              data-plasmic-override={overrides.headersSection}
              className={classNames("__wab_instance", sty.headersSection, {
                [sty.headersSectionbuiltInDataSource]: hasVariant(
                  variants,
                  "builtInDataSource",
                  "builtInDataSource"
                ),
              })}
              icon={
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__kPzH)}
                  role={"img"}
                />
              }
              title={"Headers"}
            >
              <KeyValueRow
                className={classNames("__wab_instance", sty.keyValueRow__smJs5)}
                icon={
                  <TrashIcon
                    className={classNames(projectcss.all, sty.svg__kjkYp)}
                    role={"img"}
                  />
                }
              />
            </ListBuilder>
          ) : null}

          <ListBuilder
            data-plasmic-name={"authSection"}
            data-plasmic-override={overrides.authSection}
            className={classNames("__wab_instance", sty.authSection, {
              [sty.authSectionbuiltInDataSource]: hasVariant(
                variants,
                "builtInDataSource",
                "builtInDataSource"
              ),
            })}
            icon={
              <PlusIcon
                className={classNames(projectcss.all, sty.svg__qloff)}
                role={"img"}
              />
            }
            title={"Auth"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__grCty)}
            >
              <WarningTrianglesvgIcon
                className={classNames(projectcss.all, sty.svg__hYuMe)}
                role={"img"}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {
                  "Codegen must be configured to prevent emitting credentials into client-side code—[learn more]."
                }
              </div>
            </p.Stack>

            <AuthForm
              data-plasmic-name={"authForm"}
              data-plasmic-override={overrides.authForm}
              className={classNames("__wab_instance", sty.authForm)}
            />
          </ListBuilder>

          <ListBuilder
            data-plasmic-name={"bodySection"}
            data-plasmic-override={overrides.bodySection}
            className={classNames("__wab_instance", sty.bodySection, {
              [sty.bodySectionbuiltInDataSource]: hasVariant(
                variants,
                "builtInDataSource",
                "builtInDataSource"
              ),
            })}
            icon={
              <ChevronBottomIcon
                className={classNames(projectcss.all, sty.svg__gbvNi)}
                role={"img"}
              />
            }
            title={"Body"}
          >
            <textarea
              data-plasmic-name={"bodyInput"}
              data-plasmic-override={overrides.bodyInput}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.bodyInput
              )}
            />
          </ListBuilder>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fG1Tr)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vKTg)}>
            <Button
              data-plasmic-name={"previewButton"}
              data-plasmic-override={overrides.previewButton}
              endIcon={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__euaqn)}
                  role={"img"}
                />
              }
              startIcon={
                <ArrowRightsvgIcon
                  className={classNames(projectcss.all, sty.svg__e2R0P)}
                  role={"img"}
                />
              }
              type={"primary" as const}
            >
              {"Send"}
            </Button>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hAYM)}
          >
            <div
              data-plasmic-name={"responseStatus"}
              data-plasmic-override={overrides.responseStatus}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.responseStatus
              )}
            >
              {"Response: 200 OK"}
            </div>

            <div
              data-plasmic-name={"responseData"}
              data-plasmic-override={overrides.responseData}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.responseData
              )}
            >
              {"{\n  data: {\n  }\n}"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <div
        className={classNames(projectcss.all, sty.freeBox__q8FFe, {
          [sty.freeBoxbuiltInDataSource__q8FFeVeAhc]: hasVariant(
            variants,
            "builtInDataSource",
            "builtInDataSource"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___0XN9, {
            [sty.freeBoxbuiltInDataSource___0XN9VeAhc]: hasVariant(
              variants,
              "builtInDataSource",
              "builtInDataSource"
            ),
          })}
        >
          <Checkbox
            data-plasmic-name={"serverSideCheckbox"}
            data-plasmic-override={overrides.serverSideCheckbox}
            className={classNames("__wab_instance", sty.serverSideCheckbox)}
          >
            <TextWithInfo
              data-plasmic-name={"textWithInfo"}
              data-plasmic-override={overrides.textWithInfo}
              className={classNames("__wab_instance", sty.textWithInfo)}
            >
              {"Run query on Plasmic servers"}
            </TextWithInfo>
          </Checkbox>
        </div>

        <Button
          data-plasmic-name={"doneButton"}
          data-plasmic-override={overrides.doneButton}
          className={classNames("__wab_instance", sty.doneButton)}
          endIcon={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg__qUyVq)}
              role={"img"}
            />
          }
          startIcon={
            <ArrowRightsvgIcon
              className={classNames(projectcss.all, sty.svg__yl3A2)}
              role={"img"}
            />
          }
          type={"secondary" as const}
        >
          {"Done"}
        </Button>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "title",
    "helpButton",
    "importButton",
    "topControls",
    "methodSelect",
    "urlInput",
    "hintButton",
    "builtinParams",
    "queryParamsSection",
    "pathVariablesSection",
    "headersSection",
    "authSection",
    "text",
    "authForm",
    "bodySection",
    "bodyInput",
    "previewButton",
    "responseStatus",
    "responseData",
    "serverSideCheckbox",
    "textWithInfo",
    "doneButton",
  ],

  title: ["title"],
  helpButton: ["helpButton"],
  importButton: ["importButton"],
  topControls: ["topControls", "methodSelect", "urlInput", "hintButton"],
  methodSelect: ["methodSelect"],
  urlInput: ["urlInput"],
  hintButton: ["hintButton"],
  builtinParams: ["builtinParams"],
  queryParamsSection: ["queryParamsSection"],
  pathVariablesSection: ["pathVariablesSection"],
  headersSection: ["headersSection"],
  authSection: ["authSection", "text", "authForm"],
  text: ["text"],
  authForm: ["authForm"],
  bodySection: ["bodySection", "bodyInput"],
  bodyInput: ["bodyInput"],
  previewButton: ["previewButton"],
  responseStatus: ["responseStatus"],
  responseData: ["responseData"],
  serverSideCheckbox: ["serverSideCheckbox", "textWithInfo"],
  textWithInfo: ["textWithInfo"],
  doneButton: ["doneButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  title: "div";
  helpButton: typeof Button;
  importButton: typeof Button;
  topControls: "div";
  methodSelect: typeof Select;
  urlInput: typeof Textbox;
  hintButton: typeof IconButton;
  builtinParams: typeof ListBuilder;
  queryParamsSection: typeof ListBuilder;
  pathVariablesSection: typeof ListBuilder;
  headersSection: typeof ListBuilder;
  authSection: typeof ListBuilder;
  text: "div";
  authForm: typeof AuthForm;
  bodySection: typeof ListBuilder;
  bodyInput: "textarea";
  previewButton: typeof Button;
  responseStatus: "div";
  responseData: "div";
  serverSideCheckbox: typeof Checkbox;
  textWithInfo: typeof TextWithInfo;
  doneButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRestBuilder__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicRestBuilder__VariantsArgs;
  args?: PlasmicRestBuilder__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicRestBuilder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicRestBuilder__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRestBuilder__ArgProps,
      internalVariantPropNames: PlasmicRestBuilder__VariantProps,
    });

    return PlasmicRestBuilder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRestBuilder";
  } else {
    func.displayName = `PlasmicRestBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicRestBuilder = Object.assign(
  // Top-level PlasmicRestBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    helpButton: makeNodeComponent("helpButton"),
    importButton: makeNodeComponent("importButton"),
    topControls: makeNodeComponent("topControls"),
    methodSelect: makeNodeComponent("methodSelect"),
    urlInput: makeNodeComponent("urlInput"),
    hintButton: makeNodeComponent("hintButton"),
    builtinParams: makeNodeComponent("builtinParams"),
    queryParamsSection: makeNodeComponent("queryParamsSection"),
    pathVariablesSection: makeNodeComponent("pathVariablesSection"),
    headersSection: makeNodeComponent("headersSection"),
    authSection: makeNodeComponent("authSection"),
    text: makeNodeComponent("text"),
    authForm: makeNodeComponent("authForm"),
    bodySection: makeNodeComponent("bodySection"),
    bodyInput: makeNodeComponent("bodyInput"),
    previewButton: makeNodeComponent("previewButton"),
    responseStatus: makeNodeComponent("responseStatus"),
    responseData: makeNodeComponent("responseData"),
    serverSideCheckbox: makeNodeComponent("serverSideCheckbox"),
    textWithInfo: makeNodeComponent("textWithInfo"),
    doneButton: makeNodeComponent("doneButton"),

    // Metadata about props expected for PlasmicRestBuilder
    internalVariantProps: PlasmicRestBuilder__VariantProps,
    internalArgProps: PlasmicRestBuilder__ArgProps,
  }
);

export default PlasmicRestBuilder;
/* prettier-ignore-end */
