// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: vY12pF45uf
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import ListItem from "../../components/ListItem"; // plasmic-import: v31d9_ANqk/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicComponentListItem.module.css"; // plasmic-import: vY12pF45uf/css

import ComponentIcon from "../plasmic_kit/PlasmicIcon__Component"; // plasmic-import: nNWEF4jI3s5DI/icon

export type PlasmicComponentListItem__VariantMembers = {
  isSelected: "isSelected";
};

export type PlasmicComponentListItem__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};

type VariantPropType = keyof PlasmicComponentListItem__VariantsArgs;
export const PlasmicComponentListItem__VariantProps =
  new Array<VariantPropType>("isSelected");

export type PlasmicComponentListItem__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicComponentListItem__ArgsType;
export const PlasmicComponentListItem__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicComponentListItem__OverridesType = {
  root?: p.Flex<"a">;
  listItem?: p.Flex<typeof ListItem>;
  svg?: p.Flex<"svg">;
};

export interface DefaultComponentListItemProps {
  children?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

export const defaultComponentListItem__Args: Partial<PlasmicComponentListItem__ArgsType> =
  {};

function PlasmicComponentListItem__RenderFunc(props: {
  variants: PlasmicComponentListItem__VariantsArgs;
  args: PlasmicComponentListItem__ArgsType;
  overrides: PlasmicComponentListItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultComponentListItem__Args, props.args);
  const $props = args;

  return (
    <a
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),
        }
      )}
    >
      <ListItem
        data-plasmic-name={"listItem"}
        data-plasmic-override={overrides.listItem}
        className={classNames("__wab_instance", sty.listItem, {
          [sty.listItemisSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),
        })}
        icon={
          <ComponentIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        isSelected={
          hasVariant(variants, "isSelected", "isSelected") ? true : undefined
        }
      >
        {p.renderPlasmicSlot({
          defaultContents: "Item name",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenisSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            ),
          }),
        })}
      </ListItem>
    </a>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "listItem", "svg"],
  listItem: ["listItem", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  listItem: typeof ListItem;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentListItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicComponentListItem__VariantsArgs;
  args?: PlasmicComponentListItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicComponentListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicComponentListItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicComponentListItem__ArgProps,
      internalVariantPropNames: PlasmicComponentListItem__VariantProps,
    });

    return PlasmicComponentListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentListItem";
  } else {
    func.displayName = `PlasmicComponentListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentListItem = Object.assign(
  // Top-level PlasmicComponentListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listItem: makeNodeComponent("listItem"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicComponentListItem
    internalVariantProps: PlasmicComponentListItem__VariantProps,
    internalArgProps: PlasmicComponentListItem__ArgProps,
  }
);

export default PlasmicComponentListItem;
/* prettier-ignore-end */
