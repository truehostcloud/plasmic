// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: twJQ9idqHQ
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicDocsCollapsibleExplanation.module.css"; // plasmic-import: twJQ9idqHQ/css

import InfoIcon from "../plasmic_kit/PlasmicIcon__Info"; // plasmic-import: BjAly3N4fWuWe/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ChevronBottomIcon from "./icons/PlasmicIcon__ChevronBottom"; // plasmic-import: c8L1Wu5s-LH/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: zDswZrFKQ1z/icon

export type PlasmicDocsCollapsibleExplanation__VariantMembers = {
  isExpanded: "isExpanded";
};

export type PlasmicDocsCollapsibleExplanation__VariantsArgs = {
  isExpanded?: SingleBooleanChoiceArg<"isExpanded">;
};

type VariantPropType = keyof PlasmicDocsCollapsibleExplanation__VariantsArgs;
export const PlasmicDocsCollapsibleExplanation__VariantProps =
  new Array<VariantPropType>("isExpanded");

export type PlasmicDocsCollapsibleExplanation__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDocsCollapsibleExplanation__ArgsType;
export const PlasmicDocsCollapsibleExplanation__ArgProps =
  new Array<ArgPropType>("children");

export type PlasmicDocsCollapsibleExplanation__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  iconButton?: p.Flex<typeof IconButton>;
};

export interface DefaultDocsCollapsibleExplanationProps {
  children?: React.ReactNode;
  isExpanded?: SingleBooleanChoiceArg<"isExpanded">;
  className?: string;
}

export const defaultDocsCollapsibleExplanation__Args: Partial<PlasmicDocsCollapsibleExplanation__ArgsType> =
  {};

function PlasmicDocsCollapsibleExplanation__RenderFunc(props: {
  variants: PlasmicDocsCollapsibleExplanation__VariantsArgs;
  args: PlasmicDocsCollapsibleExplanation__ArgsType;
  overrides: PlasmicDocsCollapsibleExplanation__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign(
    {},
    defaultDocsCollapsibleExplanation__Args,
    props.args
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisExpanded]: hasVariant(
            variants,
            "isExpanded",
            "isExpanded"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxisExpanded]: hasVariant(
            variants,
            "isExpanded",
            "isExpanded"
          ),
        })}
      >
        <InfoIcon
          className={classNames(projectcss.all, sty.svg__scvin, {
            [sty.svgisExpanded__scvinDAT]: hasVariant(
              variants,
              "isExpanded",
              "isExpanded"
            ),
          })}
          role={"img"}
        />

        {p.renderPlasmicSlot({
          defaultContents:
            "Some explanation lksdj flskdfj sldkfj sdlfkj sldkfj l\n\nwhatlkj sdlkfj sldkfj lk\n\nsdfkjokjsdfl k",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenisExpanded]: hasVariant(
              variants,
              "isExpanded",
              "isExpanded"
            ),
          }),
        })}
      </div>

      <IconButton
        data-plasmic-name={"iconButton"}
        data-plasmic-override={overrides.iconButton}
        children2={
          <ChevronDownsvgIcon
            className={classNames(projectcss.all, sty.svg__tTdeq)}
            role={"img"}
          />
        }
        className={classNames("__wab_instance", sty.iconButton, {
          [sty.iconButtonisExpanded]: hasVariant(
            variants,
            "isExpanded",
            "isExpanded"
          ),
        })}
        isActive={
          hasVariant(variants, "isExpanded", "isExpanded") ? true : undefined
        }
        type={["roundClear"]}
      >
        <p.PlasmicIcon
          PlasmicIconType={
            hasVariant(variants, "isExpanded", "isExpanded")
              ? ChevronBottomIcon
              : ChevronLeftIcon
          }
          className={classNames(projectcss.all, sty.svg__wReSa, {
            [sty.svgisExpanded__wReSaDAT]: hasVariant(
              variants,
              "isExpanded",
              "isExpanded"
            ),
          })}
          role={"img"}
        />
      </IconButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "iconButton"],
  freeBox: ["freeBox"],
  iconButton: ["iconButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  iconButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocsCollapsibleExplanation__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDocsCollapsibleExplanation__VariantsArgs;
  args?: PlasmicDocsCollapsibleExplanation__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDocsCollapsibleExplanation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDocsCollapsibleExplanation__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocsCollapsibleExplanation__ArgProps,
      internalVariantPropNames: PlasmicDocsCollapsibleExplanation__VariantProps,
    });

    return PlasmicDocsCollapsibleExplanation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocsCollapsibleExplanation";
  } else {
    func.displayName = `PlasmicDocsCollapsibleExplanation.${nodeName}`;
  }
  return func;
}

export const PlasmicDocsCollapsibleExplanation = Object.assign(
  // Top-level PlasmicDocsCollapsibleExplanation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    iconButton: makeNodeComponent("iconButton"),

    // Metadata about props expected for PlasmicDocsCollapsibleExplanation
    internalVariantProps: PlasmicDocsCollapsibleExplanation__VariantProps,
    internalArgProps: PlasmicDocsCollapsibleExplanation__ArgProps,
  }
);

export default PlasmicDocsCollapsibleExplanation;
/* prettier-ignore-end */
