// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: MQIZtdluUpm
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import CodePreviewSnippet from "../../components/docs/CodePreviewSnippet"; // plasmic-import: X5avWz1hNF/component
import ComponentTogglesPanel from "../../components/docs/ComponentTogglesPanel"; // plasmic-import: dwF8TMwvPf/component
import ComponentView from "../../components/docs/ComponentView"; // plasmic-import: fiIuU8gs9A/component
import LabeledProp from "../../components/docs/LabeledProp"; // plasmic-import: 95ed9ODv12/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicDocsComponentsPortal.module.css"; // plasmic-import: MQIZtdluUpm/css

import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import ComponentIcon from "../plasmic_kit/PlasmicIcon__Component"; // plasmic-import: nNWEF4jI3s5DI/icon
import HStackBlockIcon from "../plasmic_kit/PlasmicIcon__HStackBlock"; // plasmic-import: vrE0GHgUiSGkm/icon
import LinkIcon from "../plasmic_kit/PlasmicIcon__Link"; // plasmic-import: BQBWbw0fg66Lw/icon
import SearchIcon from "../plasmic_kit/PlasmicIcon__Search"; // plasmic-import: sjONHoK61vpSz/icon
import SlotIcon from "../plasmic_kit/PlasmicIcon__Slot"; // plasmic-import: 5bfQ64bu7lE1W/icon
import VariantGroupIcon from "../plasmic_kit/PlasmicIcon__VariantGroup"; // plasmic-import: pyS6pK4Spx-QF/icon
import TextInputIcon from "../plasmic_kit_design_system/PlasmicIcon__TextInput"; // plasmic-import: -URGgj7hu6/icon

export type PlasmicDocsComponentsPortal__VariantMembers = {
  componentType: "plume" | "code";
};

export type PlasmicDocsComponentsPortal__VariantsArgs = {
  componentType?: SingleChoiceArg<"plume" | "code">;
};

type VariantPropType = keyof PlasmicDocsComponentsPortal__VariantsArgs;
export const PlasmicDocsComponentsPortal__VariantProps =
  new Array<VariantPropType>("componentType");

export type PlasmicDocsComponentsPortal__ArgsType = {};
type ArgPropType = keyof PlasmicDocsComponentsPortal__ArgsType;
export const PlasmicDocsComponentsPortal__ArgProps = new Array<ArgPropType>();

export type PlasmicDocsComponentsPortal__OverridesType = {
  root?: p.Flex<"div">;
  togglesContainer?: p.Flex<"div">;
  componentTogglesPanel?: p.Flex<typeof ComponentTogglesPanel>;
  viewport?: p.Flex<"div">;
  editor?: p.Flex<"div">;
  componentView?: p.Flex<typeof ComponentView>;
};

export interface DefaultDocsComponentsPortalProps {
  componentType?: SingleChoiceArg<"plume" | "code">;
  className?: string;
}

export const defaultDocsComponentsPortal__Args: Partial<PlasmicDocsComponentsPortal__ArgsType> =
  {};

function PlasmicDocsComponentsPortal__RenderFunc(props: {
  variants: PlasmicDocsComponentsPortal__VariantsArgs;
  args: PlasmicDocsComponentsPortal__ArgsType;
  overrides: PlasmicDocsComponentsPortal__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDocsComponentsPortal__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcomponentType_code]: hasVariant(
            variants,
            "componentType",
            "code"
          ),

          [sty.rootcomponentType_plume]: hasVariant(
            variants,
            "componentType",
            "plume"
          ),
        }
      )}
    >
      {(
        hasVariant(variants, "componentType", "code")
          ? false
          : hasVariant(variants, "componentType", "plume")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__yrVjt, {
            [sty.freeBoxcomponentType_code__yrVjtEelg]: hasVariant(
              variants,
              "componentType",
              "code"
            ),

            [sty.freeBoxcomponentType_plume__yrVjtNpXbx]: hasVariant(
              variants,
              "componentType",
              "plume"
            ),
          })}
        >
          <div
            data-plasmic-name={"togglesContainer"}
            data-plasmic-override={overrides.togglesContainer}
            className={classNames(projectcss.all, sty.togglesContainer)}
          >
            <ComponentTogglesPanel
              data-plasmic-name={"componentTogglesPanel"}
              data-plasmic-override={overrides.componentTogglesPanel}
              elementProps={
                <React.Fragment>
                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__mNgPf
                    )}
                    icon={
                      <HStackBlockIcon
                        className={classNames(projectcss.all, sty.svg__j1F3S)}
                        role={"img"}
                      />
                    }
                    label={"root"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__keHqg
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__oQahZ)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__z1DE3)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>

                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__n8YSl
                    )}
                    icon={
                      <TextInputIcon
                        className={classNames(projectcss.all, sty.svg__hmnAd)}
                        role={"img"}
                      />
                    }
                    label={"textbox"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__c1Kut
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__foJav)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__ehh6B)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>

                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__x8Beo
                    )}
                    icon={
                      <ComponentIcon
                        className={classNames(projectcss.all, sty.svg__kAVxS)}
                        role={"img"}
                      />
                    }
                    label={"dismissButton"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__ijCyp
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__etZrz)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__nSD)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>
                </React.Fragment>
              }
              header={"Props for PlasmicTextbox"}
              linkedProps={
                <React.Fragment>
                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__hgv4F
                    )}
                    icon={
                      <LinkIcon
                        className={classNames(projectcss.all, sty.svg__cho8M)}
                        role={"img"}
                      />
                    }
                    label={"value"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__oU5TX
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__fOjab)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__c9H20)}
                          role={"img"}
                        />
                      }
                      value={"Something" as const}
                    />
                  </LabeledProp>

                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__aTrz
                    )}
                    icon={
                      <LinkIcon
                        className={classNames(projectcss.all, sty.svg__skLah)}
                        role={"img"}
                      />
                    }
                    label={"placeholder"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__iOtzN
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__ez3X9)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__nEty0)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>
                </React.Fragment>
              }
              slotProps={
                <React.Fragment>
                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__llVjx
                    )}
                    icon={
                      <SlotIcon
                        className={classNames(projectcss.all, sty.svg__gsoiw)}
                        role={"img"}
                      />
                    }
                    label={"startIcon"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__ptxo4
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__b6FHn)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg___6TQ1)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>

                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp___0HvoM
                    )}
                    icon={
                      <SlotIcon
                        className={classNames(projectcss.all, sty.svg__tL0Ov)}
                        role={"img"}
                      />
                    }
                    label={"endIcon"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__dHeuy
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0Rb6Z
                          )}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__zBMoc)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>
                </React.Fragment>
              }
              variantProps={
                <React.Fragment>
                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp__ji10M
                    )}
                    icon={
                      <VariantGroupIcon
                        className={classNames(projectcss.all, sty.svg__kNvx)}
                        role={"img"}
                      />
                    }
                    label={"color"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox___0J3Yp
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__gkR4F)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___16Alj
                          )}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>

                  <LabeledProp
                    className={classNames(
                      "__wab_instance",
                      sty.labeledProp___4MqSk
                    )}
                    icon={
                      <VariantGroupIcon
                        className={classNames(projectcss.all, sty.svg__litoE)}
                        role={"img"}
                      />
                    }
                    label={"isDisabled"}
                  >
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__zVZh6
                      )}
                      prefixIcon={
                        <SearchIcon
                          className={classNames(projectcss.all, sty.svg__p8EJ)}
                          role={"img"}
                        />
                      }
                      suffixIcon={
                        <CloseIcon
                          className={classNames(projectcss.all, sty.svg__fe1Ja)}
                          role={"img"}
                        />
                      }
                    />
                  </LabeledProp>
                </React.Fragment>
              }
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ll9Az)}
          >
            <div
              data-plasmic-name={"viewport"}
              data-plasmic-override={overrides.viewport}
              className={classNames(projectcss.all, sty.viewport)}
            >
              <Textbox
                className={classNames("__wab_instance", sty.textbox__f3JUg)}
                prefixIcon={
                  <SearchIcon
                    className={classNames(projectcss.all, sty.svg___8TrlV)}
                    role={"img"}
                  />
                }
                styleType={["white"]}
                suffixIcon={
                  <CloseIcon
                    className={classNames(projectcss.all, sty.svg__p3MO7)}
                    role={"img"}
                  />
                }
                value={"Something" as const}
              />
            </div>

            <div
              data-plasmic-name={"editor"}
              data-plasmic-override={overrides.editor}
              className={classNames(projectcss.all, sty.editor)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ldsNa
                )}
              >
                {"<PlasmicTextbox\n\n/>"}
              </div>
            </div>
          </p.Stack>
        </div>
      ) : null}
      {(
        hasVariant(variants, "componentType", "code")
          ? true
          : hasVariant(variants, "componentType", "plume")
          ? true
          : false
      ) ? (
        <ComponentView
          data-plasmic-name={"componentView"}
          data-plasmic-override={overrides.componentView}
          className={classNames("__wab_instance", sty.componentView, {
            [sty.componentViewcomponentType_code]: hasVariant(
              variants,
              "componentType",
              "code"
            ),

            [sty.componentViewcomponentType_plume]: hasVariant(
              variants,
              "componentType",
              "plume"
            ),
          })}
          componentType={
            hasVariant(variants, "componentType", "code")
              ? ("code" as const)
              : hasVariant(variants, "componentType", "plume")
              ? ("plume" as const)
              : undefined
          }
          examples={
            <React.Fragment>
              {(hasVariant(variants, "componentType", "code") ? true : true) ? (
                <CodePreviewSnippet
                  className={classNames("__wab_instance", {
                    [sty.codePreviewSnippetcomponentType_code__glO39Eelg]:
                      hasVariant(variants, "componentType", "code"),
                  })}
                  info={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kKdzj
                      )}
                    >
                      {
                        "You can use isChecked/onChange to control your checkbox component."
                      }
                    </div>
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xtmgU,
                        {
                          [sty.textcomponentType_code__xtmgUEelg]: hasVariant(
                            variants,
                            "componentType",
                            "code"
                          ),
                        }
                      )}
                    >
                      {"Controlled Checkbox"}
                    </div>
                  }
                />
              ) : null}
              {(hasVariant(variants, "componentType", "code") ? true : true) ? (
                <CodePreviewSnippet
                  className={classNames("__wab_instance", {
                    [sty.codePreviewSnippetcomponentType_code__ocV1LEelg]:
                      hasVariant(variants, "componentType", "code"),
                  })}
                  info={
                    "You can have an uncontrolled checkbox if you don't specify isChecked/onChange props."
                  }
                />
              ) : null}
            </React.Fragment>
          }
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "togglesContainer",
    "componentTogglesPanel",
    "viewport",
    "editor",
    "componentView",
  ],

  togglesContainer: ["togglesContainer", "componentTogglesPanel"],
  componentTogglesPanel: ["componentTogglesPanel"],
  viewport: ["viewport"],
  editor: ["editor"],
  componentView: ["componentView"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  togglesContainer: "div";
  componentTogglesPanel: typeof ComponentTogglesPanel;
  viewport: "div";
  editor: "div";
  componentView: typeof ComponentView;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocsComponentsPortal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDocsComponentsPortal__VariantsArgs;
  args?: PlasmicDocsComponentsPortal__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDocsComponentsPortal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDocsComponentsPortal__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocsComponentsPortal__ArgProps,
      internalVariantPropNames: PlasmicDocsComponentsPortal__VariantProps,
    });

    return PlasmicDocsComponentsPortal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocsComponentsPortal";
  } else {
    func.displayName = `PlasmicDocsComponentsPortal.${nodeName}`;
  }
  return func;
}

export const PlasmicDocsComponentsPortal = Object.assign(
  // Top-level PlasmicDocsComponentsPortal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    togglesContainer: makeNodeComponent("togglesContainer"),
    componentTogglesPanel: makeNodeComponent("componentTogglesPanel"),
    viewport: makeNodeComponent("viewport"),
    editor: makeNodeComponent("editor"),
    componentView: makeNodeComponent("componentView"),

    // Metadata about props expected for PlasmicDocsComponentsPortal
    internalVariantProps: PlasmicDocsComponentsPortal__VariantProps,
    internalArgProps: PlasmicDocsComponentsPortal__ArgProps,
  }
);

export default PlasmicDocsComponentsPortal;
/* prettier-ignore-end */
