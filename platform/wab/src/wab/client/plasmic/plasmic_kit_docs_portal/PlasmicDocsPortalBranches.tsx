// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: -rnSZERM6Kf
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
} from "@plasmicapp/react-web";
import DocsPortalBranch from "../../components/docs/DocsPortalBranch"; // plasmic-import: mJFZOBWGNu/component
import DocsPortalHeader from "../../components/docs/DocsPortalHeader"; // plasmic-import: 6yrnCqYwJf/component

import { useCodegenType } from "./PlasmicGlobalVariant__CodegenType"; // plasmic-import: IFgLgWglLv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicDocsPortalBranches.module.css"; // plasmic-import: -rnSZERM6Kf/css

import OpenIcon from "../plasmic_kit/PlasmicIcon__Open"; // plasmic-import: 7D0GDLdF72udM/icon

export type PlasmicDocsPortalBranches__VariantMembers = {};

export type PlasmicDocsPortalBranches__VariantsArgs = {};
type VariantPropType = keyof PlasmicDocsPortalBranches__VariantsArgs;
export const PlasmicDocsPortalBranches__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDocsPortalBranches__ArgsType = {};
type ArgPropType = keyof PlasmicDocsPortalBranches__ArgsType;
export const PlasmicDocsPortalBranches__ArgProps = new Array<ArgPropType>();

export type PlasmicDocsPortalBranches__OverridesType = {
  root?: p.Flex<"div">;
  docsPortalHeader?: p.Flex<typeof DocsPortalHeader>;
  codegenBranch?: p.Flex<typeof DocsPortalBranch>;
  loaderBranch?: p.Flex<typeof DocsPortalBranch>;
  link?: p.Flex<"a">;
  svg?: p.Flex<"svg">;
};

export interface DefaultDocsPortalBranchesProps {
  className?: string;
}

export const defaultDocsPortalBranches__Args: Partial<PlasmicDocsPortalBranches__ArgsType> =
  {};

function PlasmicDocsPortalBranches__RenderFunc(props: {
  variants: PlasmicDocsPortalBranches__VariantsArgs;
  args: PlasmicDocsPortalBranches__ArgsType;
  overrides: PlasmicDocsPortalBranches__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDocsPortalBranches__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    codegenType: useCodegenType(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_codegenType_codegen]: hasVariant(
            globalVariants,
            "codegenType",
            "codegen"
          ),

          [sty.rootglobal_codegenType_loader]: hasVariant(
            globalVariants,
            "codegenType",
            "loader"
          ),
        }
      )}
    >
      <DocsPortalHeader
        data-plasmic-name={"docsPortalHeader"}
        data-plasmic-override={overrides.docsPortalHeader}
        className={classNames("__wab_instance", sty.docsPortalHeader)}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__iOr8P, {
          [sty.freeBoxglobal_codegenType_codegen__iOr8PqLpg]: hasVariant(
            globalVariants,
            "codegenType",
            "codegen"
          ),

          [sty.freeBoxglobal_codegenType_loader__iOr8Pgc32L]: hasVariant(
            globalVariants,
            "codegenType",
            "loader"
          ),
        })}
      >
        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2__vmyBz
          )}
        >
          {"âš¡ Design to working React code"}
        </h2>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__e6W8M,
            {
              [sty.textglobal_codegenType_codegen__e6W8MqLpg]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),

              [sty.textglobal_codegenType_loader__e6W8MGc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {
            "Plasmic generates presentational React code from your designs. You can optionally attach event handlers, behavior, state, and additional hooks to these components in code, and still update your components with new designs without losing your changes."
          }
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___8Vv7O,
            {
              [sty.textglobal_codegenType_codegen___8Vv7OqLpg]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),

              [sty.textglobal_codegenType_loader___8Vv7Ogc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {
            "There are two ways to integrate Plasmic-designed content into your application codebase:"
          }
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___4NIrx, {
            [sty.freeBoxglobal_codegenType_codegen___4NIrXqLpg]: hasVariant(
              globalVariants,
              "codegenType",
              "codegen"
            ),
          })}
        >
          <DocsPortalBranch
            data-plasmic-name={"codegenBranch"}
            data-plasmic-override={overrides.codegenBranch}
            className={classNames("__wab_instance", sty.codegenBranch, {
              [sty.codegenBranchglobal_codegenType_codegen]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),
            })}
            destination={"/" as const}
            slot={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z1Fo
                  )}
                >
                  {"Generate presentational components into your codebase."}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4G3Po
                  )}
                >
                  {"Recommended for building rich stateful applications."}
                </div>
              </React.Fragment>
            }
          />

          <DocsPortalBranch
            data-plasmic-name={"loaderBranch"}
            data-plasmic-override={overrides.loaderBranch}
            className={classNames("__wab_instance", sty.loaderBranch, {
              [sty.loaderBranchglobal_codegenType_codegen]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),
            })}
            destination={"/" as const}
            slot={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__djXcg
                  )}
                >
                  {
                    "Load pages/components at build-time without generating code into your repo or version history."
                  }
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tX4Fm
                  )}
                >
                  {
                    "Recommended for websites and other projects that do not need heavy code instrumentation."
                  }
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wI0Nv
                  )}
                >
                  {"For Next.js/Gatsby only. "}
                </div>
              </React.Fragment>
            }
          >
            {"PlasmicLoader (CMS mode)"}
          </DocsPortalBranch>
        </p.Stack>

        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link, {
            [sty.linkglobal_codegenType_codegen]: hasVariant(
              globalVariants,
              "codegenType",
              "codegen"
            ),
          })}
          href={"https://www.plasmic.app/learn/loader-vs-codegen/" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1V3Pg
            )}
          >
            {"Learn more about Codegen vs. PlasmicLoader "}
          </div>

          <OpenIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </a>

        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2__qv6Bk
          )}
        >
          {"The API Explorer"}
        </h2>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__swGq,
            {
              [sty.textglobal_codegenType_loader__swGqgc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {
            "This API Explorer lets you see and play with all the props that each component exposes.  You can toggle the different props, or even directly edit the code snippet, and see how they look in the live preview.."
          }
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "docsPortalHeader",
    "codegenBranch",
    "loaderBranch",
    "link",
    "svg",
  ],

  docsPortalHeader: ["docsPortalHeader"],
  codegenBranch: ["codegenBranch"],
  loaderBranch: ["loaderBranch"],
  link: ["link", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  docsPortalHeader: typeof DocsPortalHeader;
  codegenBranch: typeof DocsPortalBranch;
  loaderBranch: typeof DocsPortalBranch;
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocsPortalBranches__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDocsPortalBranches__VariantsArgs;
  args?: PlasmicDocsPortalBranches__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDocsPortalBranches__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDocsPortalBranches__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocsPortalBranches__ArgProps,
      internalVariantPropNames: PlasmicDocsPortalBranches__VariantProps,
    });

    return PlasmicDocsPortalBranches__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocsPortalBranches";
  } else {
    func.displayName = `PlasmicDocsPortalBranches.${nodeName}`;
  }
  return func;
}

export const PlasmicDocsPortalBranches = Object.assign(
  // Top-level PlasmicDocsPortalBranches renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    docsPortalHeader: makeNodeComponent("docsPortalHeader"),
    codegenBranch: makeNodeComponent("codegenBranch"),
    loaderBranch: makeNodeComponent("loaderBranch"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicDocsPortalBranches
    internalVariantProps: PlasmicDocsPortalBranches__VariantProps,
    internalArgProps: PlasmicDocsPortalBranches__ArgProps,
  }
);

export default PlasmicDocsPortalBranches;
/* prettier-ignore-end */
