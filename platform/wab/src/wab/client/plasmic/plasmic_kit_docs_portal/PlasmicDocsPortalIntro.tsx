// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: 13UGPPY1WI6
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
} from "@plasmicapp/react-web";
import DocsCodeSnippet from "../../components/docs/DocsCodeSnippet"; // plasmic-import: P6rYMyYSiZ/component
import SyncProjectSnippet from "../../components/docs/SyncProjectSnippet"; // plasmic-import: 7KLBF1De9n/component

import { useCodegenType } from "./PlasmicGlobalVariant__CodegenType"; // plasmic-import: IFgLgWglLv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicDocsPortalIntro.module.css"; // plasmic-import: 13UGPPY1WI6/css

import DotBulletIcon from "../plasmic_kit/PlasmicIcon__DotBullet"; // plasmic-import: sABZLvi9xLkb_/icon
import OpenIcon from "../plasmic_kit/PlasmicIcon__Open"; // plasmic-import: 7D0GDLdF72udM/icon

export type PlasmicDocsPortalIntro__VariantMembers = {};

export type PlasmicDocsPortalIntro__VariantsArgs = {};
type VariantPropType = keyof PlasmicDocsPortalIntro__VariantsArgs;
export const PlasmicDocsPortalIntro__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDocsPortalIntro__ArgsType = {};
type ArgPropType = keyof PlasmicDocsPortalIntro__ArgsType;
export const PlasmicDocsPortalIntro__ArgProps = new Array<ArgPropType>();

export type PlasmicDocsPortalIntro__OverridesType = {
  root?: p.Flex<"div">;
  introText?: p.Flex<"div">;
  introText2?: p.Flex<"div">;
  introText3?: p.Flex<"div">;
  nextConfig?: p.Flex<typeof DocsCodeSnippet>;
  gatsbyConfig?: p.Flex<typeof DocsCodeSnippet>;
  syncProjectSnippet?: p.Flex<typeof SyncProjectSnippet>;
  loaderv2Config?: p.Flex<typeof DocsCodeSnippet>;
};

export interface DefaultDocsPortalIntroProps {
  className?: string;
}

export const defaultDocsPortalIntro__Args: Partial<PlasmicDocsPortalIntro__ArgsType> =
  {};

function PlasmicDocsPortalIntro__RenderFunc(props: {
  variants: PlasmicDocsPortalIntro__VariantsArgs;
  args: PlasmicDocsPortalIntro__ArgsType;
  overrides: PlasmicDocsPortalIntro__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDocsPortalIntro__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    codegenType: useCodegenType(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_codegenType_codegen]: hasVariant(
            globalVariants,
            "codegenType",
            "codegen"
          ),

          [sty.rootglobal_codegenType_loader2]: hasVariant(
            globalVariants,
            "codegenType",
            "loader2"
          ),

          [sty.rootglobal_codegenType_loader]: hasVariant(
            globalVariants,
            "codegenType",
            "loader"
          ),
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jHwmp, {
          [sty.freeBoxglobal_codegenType_codegen__jHwmPqLpg]: hasVariant(
            globalVariants,
            "codegenType",
            "codegen"
          ),

          [sty.freeBoxglobal_codegenType_loader2__jHwmpzGeqY]: hasVariant(
            globalVariants,
            "codegenType",
            "loader2"
          ),

          [sty.freeBoxglobal_codegenType_loader__jHwmpgc32L]: hasVariant(
            globalVariants,
            "codegenType",
            "loader"
          ),
        })}
      >
        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2__pWcRs,
            {
              [sty.h2global_codegenType_loader__pWcRsgc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {"⚡ Design to working React code"}
        </h2>

        <div
          data-plasmic-name={"introText"}
          data-plasmic-override={overrides.introText}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.introText,
            {
              [sty.introTextglobal_codegenType_codegen]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),

              [sty.introTextglobal_codegenType_loader2]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.introTextglobal_codegenType_loader]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {hasVariant(globalVariants, "codegenType", "loader2")
            ? "Plasmic generates presentational React code from your designs. You can easily attach event handlers, behavior, state, and additional hooks to these components in code, and still update your components with new designs without losing your changes.\n\nThe Headless API lets you load these pages and components at build-time and runtime into your React, Next.js and Gatsby applications, without actually needing to store code into your repo/version history. In this way, it lets you integrate Plasmic content in a manner similar to a CMS (but one that offers free-form page-editing capability).\n\nYou can alternatively generate code into your codebase—[switch to viewing the Codegen API]."
            : hasVariant(globalVariants, "codegenType", "loader")
            ? "Plasmic generates presentational React code from your designs. You can easily attach event handlers, behavior, state, and additional hooks to these components in code, and still update your components with new designs without losing your changes.\n\nPlasmicLoader lets you load these pages and components at build-time into your Next.js and Gatsby applications, without actually needing to store code into your repo/version history. In this way, it lets you integrate Plasmic content in a manner similar to a CMS (but one that offers free-form page-editing capability).\n\nYou can alternatively generate code into your codebase—[switch to viewing the Codegen API]."
            : "Plasmic generates presentational React components from your designs. You can easily attach event handlers, behavior, state, and additional hooks to these components in code, and still update your components with new designs without losing your changes."}
        </div>

        {(
          hasVariant(globalVariants, "codegenType", "codegen") ? true : false
        ) ? (
          <div
            data-plasmic-name={"introText2"}
            data-plasmic-override={overrides.introText2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.introText2,
              {
                [sty.introText2global_codegenType_codegen]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "codegen"
                ),

                [sty.introText2global_codegenType_loader]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "codegen")
              ? "An alternative to codegen is PlasmicLoader, which lets you load pages and components at build-time into your Next.js and Gatsby applications, without actually needing to store code into your repo/version history. [Switch to viewing the PlasmicLoader API]."
              : hasVariant(globalVariants, "codegenType", "loader")
              ? "Plasmic generates presentational React code from your designs. You can easily attach event handlers, behavior, state, and additional hooks to these components in code, and still update your components with new designs without losing your changes.\n\nPlasmicLoader lets you load these pages and components at build-time into your Next.js and Gatsby applications, without actually needing to store code into your repo/version history. In this way, it lets you integrate Plasmic content in a manner similar to a CMS (but one that offers free-form page-editing capability).\n\nYou can alternatively generate code into your codebase—[switch to viewing the Codegen API]."
              : "Plasmic generates presentational React components from your designs. You can easily attach event handlers, behavior, state, and additional hooks to these components in code, and still update your components with new designs without losing your changes."}
          </div>
        ) : null}

        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2__zngrz,
            {
              [sty.h2global_codegenType_loader__zngrzgc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {"Quickstart"}
        </h2>

        <div
          data-plasmic-name={"introText3"}
          data-plasmic-override={overrides.introText3}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.introText3,
            {
              [sty.introText3global_codegenType_codegen]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),

              [sty.introText3global_codegenType_loader2]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.introText3global_codegenType_loader]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {hasVariant(globalVariants, "codegenType", "loader2")
            ? "See the [quickstart docs], which describe how to create a brand-new codebase in Next.js / Gatsby / CRA as well as how to install into an existing codebase. The below is a summary."
            : hasVariant(globalVariants, "codegenType", "loader")
            ? "See the [quickstart docs], which describe how to create a brand-new codebase in Next.js / Gatsby / CRA as well as how to install into an existing codebase. The below is a summary."
            : "See the [quickstart docs], which describe how to create a brand-new codebase in Next.js / Gatsby / CRA as well as how to install into an existing codebase. The below is a summary."}
        </div>

        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2___4NJTw
          )}
        >
          {"Installation"}
        </h2>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jcCxu,
            {
              [sty.textglobal_codegenType_loader2__jcCxuZGeqY]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.textglobal_codegenType_loader__jcCxuGc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {hasVariant(globalVariants, "codegenType", "loader2")
            ? "First, add loader to your project:"
            : hasVariant(globalVariants, "codegenType", "loader")
            ? "First, add loader to your project:"
            : "First, install the Plasmic CLI if you haven't already:"}
        </div>

        <DocsCodeSnippet
          className={classNames("__wab_instance", sty.docsCodeSnippet__jm9OC, {
            [sty.docsCodeSnippetglobal_codegenType_loader2__jm9OCzGeqY]:
              hasVariant(globalVariants, "codegenType", "loader2"),
            [sty.docsCodeSnippetglobal_codegenType_loader__jm9OCgc32L]:
              hasVariant(globalVariants, "codegenType", "loader"),
          })}
          language={"bash" as const}
        >
          {hasVariant(globalVariants, "codegenType", "loader2")
            ? "yarn add @plasmicapp/loader-react # For React\n# or: npm install @plasmicapp/loader-react\n\nyarn add @plasmicapp/loader-nextjs # For Next.js\n# or: npm install @plasmicapp/loader-nextjs\n\nyarn add @plasmicapp/loader-gatsby # For Gatsby\n# or: npm install @plasmicapp/loader-gatsby"
            : hasVariant(globalVariants, "codegenType", "loader")
            ? "yarn add @plasmicapp/loader\n# or: npm install @plasmicapp/loader"
            : "yarn global add @plasmicapp/cli\n# or: npm install -g @plasmicapp/cli"}
        </DocsCodeSnippet>

        {(
          hasVariant(globalVariants, "codegenType", "loader2") ? true : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wBb3B,
              {
                [sty.textglobal_codegenType_loader2__wBb3BzGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader__wBb3Bgc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? "Then edit your next.config.js / gatsby-config.js and include loader:"
              : "Then, sync your project by running:"}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? true : false
        ) ? (
          <DocsCodeSnippet
            data-plasmic-name={"nextConfig"}
            data-plasmic-override={overrides.nextConfig}
            className={classNames("__wab_instance", sty.nextConfig, {
              [sty.nextConfigglobal_codegenType_loader]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
            language={
              hasVariant(globalVariants, "codegenType", "loader")
                ? ("js" as const)
                : undefined
            }
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? '// next.config.js\nconst plasmic = require("@plasmicapp/loader/next");\n\nconst withPlasmic = plasmic({\n  projects: ["projectid"],\n});\n\nmodule.exports = withPlasmic({\n  // Your NextJS config.\n});'
              : "Snippet!"}
          </DocsCodeSnippet>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? true : false
        ) ? (
          <DocsCodeSnippet
            data-plasmic-name={"gatsbyConfig"}
            data-plasmic-override={overrides.gatsbyConfig}
            className={classNames("__wab_instance", sty.gatsbyConfig, {
              [sty.gatsbyConfigglobal_codegenType_loader]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
            language={
              hasVariant(globalVariants, "codegenType", "loader")
                ? ("js" as const)
                : undefined
            }
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? '// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `@plasmicapp/loader/gatsby`,\n      options: {\n        projects: ["projectid"],\n      },\n    },\n  ],\n};'
              : "Snippet!"}
          </DocsCodeSnippet>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? true : false
        ) ? (
          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__abaX,
              {
                [sty.h2global_codegenType_loader__abaXgc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? "Using generated pages"
              : "Using generated components"}
          </h2>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? true : false
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yybgg,
              {
                [sty.textglobal_codegenType_loader__yybgggc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? "By default, you should not need to do anything else for pages you create in Plasmic to appear in your app. They will be automatically made available at the routes specified from within Plasmic."
              : "For each Plasmic component, Plasmic generates two sets of files:"}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? true : false
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qu0MA,
              {
                [sty.textglobal_codegenType_loader__qu0MAgc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? "Plasmic-generated code is hidden from your codebase, kept at the cache location (.next/.plasmic/ or .cache/.plasmic/). Image assets will be synced to your public folder. Pages will be programmatically created (Gatsby) or configured via a catch-all page route (Next.js)."
              : "For each Plasmic component, Plasmic generates two sets of files:"}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2")
            ? true
            : hasVariant(globalVariants, "codegenType", "loader")
            ? false
            : true
        ) ? (
          <SyncProjectSnippet
            data-plasmic-name={"syncProjectSnippet"}
            data-plasmic-override={overrides.syncProjectSnippet}
            className={classNames("__wab_instance", sty.syncProjectSnippet, {
              [sty.syncProjectSnippetglobal_codegenType_codegen]: hasVariant(
                globalVariants,
                "codegenType",
                "codegen"
              ),

              [sty.syncProjectSnippetglobal_codegenType_loader2]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.syncProjectSnippetglobal_codegenType_loader]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
          >
            {(
              hasVariant(globalVariants, "codegenType", "loader2")
                ? true
                : hasVariant(globalVariants, "codegenType", "loader")
                ? false
                : true
            ) ? (
              <DocsCodeSnippet
                className={classNames(
                  "__wab_instance",
                  sty.docsCodeSnippet__qwM3,
                  {
                    [sty.docsCodeSnippetglobal_codegenType_codegen__qwM3QLpg]:
                      hasVariant(globalVariants, "codegenType", "codegen"),
                    [sty.docsCodeSnippetglobal_codegenType_loader2__qwM3ZGeqY]:
                      hasVariant(globalVariants, "codegenType", "loader2"),
                    [sty.docsCodeSnippetglobal_codegenType_loader__qwM3Gc32L]:
                      hasVariant(globalVariants, "codegenType", "loader"),
                  }
                )}
                language={"bash" as const}
              >
                {hasVariant(globalVariants, "codegenType", "loader")
                  ? '// next.config.js\nconst plasmic = require("@plasmicapp/loader/next");\n\nconst withPlasmic = plasmic({\n  projects: ["projectid"],\n});\n\nmodule.exports = withPlasmic({\n  // Your NextJS config.\n});\n\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `@plasmicapp/loader/gatsby`,\n      options: {\n        projects: ["projectid"],\n      },\n    },\n  ],\n};'
                  : "plasmic sync --projects PROJECTID"}
              </DocsCodeSnippet>
            ) : null}
          </SyncProjectSnippet>
        ) : null}

        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2___8Dyd,
            {
              [sty.h2global_codegenType_loader2___8DydZGeqY]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.h2global_codegenType_loader___8DydGc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {hasVariant(globalVariants, "codegenType", "loader2")
            ? "Using generated pages"
            : "Using generated components"}
        </h2>

        {(
          hasVariant(globalVariants, "codegenType", "loader2")
            ? true
            : hasVariant(globalVariants, "codegenType", "loader")
            ? false
            : false
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sWP8,
              {
                [sty.textglobal_codegenType_loader2__sWP8ZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader__sWP8Gc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader2")
              ? "The pages created in the studio can be automatically created by the loader with minimum configuration. You can setup the plugins following the docs for Plasmic Loader."
              : hasVariant(globalVariants, "codegenType", "loader")
              ? "Plasmic components are hidden from your codebase, kept at the cache location (.next/.plasmic/ or .cache/.plasmic/). Image assets will be synced to your public folder."
              : "For each Plasmic component, Plasmic generates two sets of files:"}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2") ? true : false
        ) ? (
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__qwNoU,
              {
                [sty.linkglobal_codegenType_loader2__qwNoUzGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.linkglobal_codegenType_loader__qwNoUgc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
            href={
              hasVariant(globalVariants, "codegenType", "loader2")
                ? ("https://docs.plasmic.app/learn/nextjs-quickstart/" as const)
                : hasVariant(globalVariants, "codegenType", "loader")
                ? ("https://www.plasmic.app/learn/loader-guide/" as const)
                : ("https://www.plasmic.app/learn/blackbox-scheme/" as const)
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c0YQa,
                {
                  [sty.textglobal_codegenType_loader2__c0YQaZGeqY]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader2"
                  ),

                  [sty.textglobal_codegenType_loader__c0YQaGc32L]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader"
                  ),
                }
              )}
            >
              {hasVariant(globalVariants, "codegenType", "loader2")
                ? "Next.js setup"
                : hasVariant(globalVariants, "codegenType", "loader")
                ? "Learn more about PlasmicLoader "
                : "Learn more about code generation "}
            </div>

            <OpenIcon
              className={classNames(projectcss.all, sty.svg__thLZm, {
                [sty.svgglobal_codegenType_loader2__thLZmZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.svgglobal_codegenType_loader__thLZmGc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              })}
              role={"img"}
            />
          </a>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2") ? true : false
        ) ? (
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__nkI2J,
              {
                [sty.linkglobal_codegenType_loader2__nkI2JZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.linkglobal_codegenType_loader__nkI2JGc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
            href={
              hasVariant(globalVariants, "codegenType", "loader2")
                ? ("https://docs.plasmic.app/learn/gatsby-quickstart/" as const)
                : hasVariant(globalVariants, "codegenType", "loader")
                ? ("https://www.plasmic.app/learn/loader-guide/" as const)
                : ("https://www.plasmic.app/learn/blackbox-scheme/" as const)
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__y5WeE,
                {
                  [sty.textglobal_codegenType_loader2__y5WeEzGeqY]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader2"
                  ),

                  [sty.textglobal_codegenType_loader__y5WeEgc32L]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader"
                  ),
                }
              )}
            >
              {hasVariant(globalVariants, "codegenType", "loader2")
                ? "Gatsby setup"
                : hasVariant(globalVariants, "codegenType", "loader")
                ? "Learn more about PlasmicLoader "
                : "Learn more about code generation "}
            </div>

            <OpenIcon
              className={classNames(projectcss.all, sty.svg__jEkUg, {
                [sty.svgglobal_codegenType_loader2__jEkUgZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.svgglobal_codegenType_loader__jEkUgGc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              })}
              role={"img"}
            />
          </a>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2") ? true : false
        ) ? (
          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__ezwMi,
              {
                [sty.h2global_codegenType_loader2__ezwMiZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.h2global_codegenType_loader__ezwMiGc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {"Using generated components"}
          </h2>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? false : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0M2Q4,
              {
                [sty.textglobal_codegenType_loader2___0M2Q4ZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader___0M2Q4Gc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader2")
              ? "To use a component, simply import PlasmicComponent and pass the name of the component. Here's an example demonstrating data fetching with the loader:"
              : hasVariant(globalVariants, "codegenType", "loader")
              ? "Plasmic components are hidden from your codebase, kept at the cache location (.next/.plasmic/ or .cache/.plasmic/). Image assets will be synced to your public folder."
              : "For each Plasmic component, Plasmic generates two sets of files:"}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? false : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__yVeU, {
              [sty.freeBoxglobal_codegenType_loader__yVeUgc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
          >
            {(
              hasVariant(globalVariants, "codegenType", "loader2")
                ? true
                : hasVariant(globalVariants, "codegenType", "loader")
                ? false
                : true
            ) ? (
              <DotBulletIcon
                className={classNames(projectcss.all, sty.svg__jc9Br, {
                  [sty.svgglobal_codegenType_loader2__jc9BrZGeqY]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader2"
                  ),

                  [sty.svgglobal_codegenType_loader__jc9BrGc32L]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader"
                  ),
                })}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "codegenType", "loader2")
                ? true
                : hasVariant(globalVariants, "codegenType", "loader")
                ? false
                : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tnYWg,
                  {
                    [sty.textglobal_codegenType_codegen__tnYWgqLpg]: hasVariant(
                      globalVariants,
                      "codegenType",
                      "codegen"
                    ),

                    [sty.textglobal_codegenType_loader2__tnYWgZGeqY]:
                      hasVariant(globalVariants, "codegenType", "loader2"),
                    [sty.textglobal_codegenType_loader__tnYWgGc32L]: hasVariant(
                      globalVariants,
                      "codegenType",
                      "loader"
                    ),
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Presentational Plasmic* components"}
                  </span>
                  <React.Fragment>
                    {
                      ' - These are blackbox, purely-presentational library components that you can use to render your designs. These files are owned by Plasmic, and shouldn\'t be edited by you. The Plasmic* components should only be used from the "wrapper components" (below) and nowhere else.'
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? false : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___7XNk3, {
              [sty.freeBoxglobal_codegenType_loader___7XNk3Gc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
          >
            {(
              hasVariant(globalVariants, "codegenType", "loader2") ? true : true
            ) ? (
              <DotBulletIcon
                className={classNames(projectcss.all, sty.svg___46F7S, {
                  [sty.svgglobal_codegenType_loader2___46F7SzGeqY]: hasVariant(
                    globalVariants,
                    "codegenType",
                    "loader2"
                  ),
                })}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "codegenType", "loader2")
                ? true
                : hasVariant(globalVariants, "codegenType", "loader")
                ? false
                : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vA8S1,
                  {
                    [sty.textglobal_codegenType_codegen__vA8S1QLpg]: hasVariant(
                      globalVariants,
                      "codegenType",
                      "codegen"
                    ),

                    [sty.textglobal_codegenType_loader2__vA8S1ZGeqY]:
                      hasVariant(globalVariants, "codegenType", "loader2"),
                    [sty.textglobal_codegenType_loader__vA8S1Gc32L]: hasVariant(
                      globalVariants,
                      "codegenType",
                      "loader"
                    ),
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Wrapper components"}
                  </span>
                  <React.Fragment>
                    {
                      " - These components are owned and edited by you to instantiate the Plasmic* components with the desired variants and overrides. These are the actual components that should be used by the rest of the codebase."
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            ) : null}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2")
            ? true
            : hasVariant(globalVariants, "codegenType", "loader")
            ? false
            : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xsulm,
              {
                [sty.textglobal_codegenType_loader2__xsulmZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader__xsulmGc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {
              "This scheme allows us to strictly separate concerns -- Plasmic-owned files define how the components look, and the developer-owned files define how the components work. We believe that you should be able to craft your component API just the way you want, and using Plasmic should only be an implementation detail."
            }
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2") ? true : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f3JUb,
              {
                [sty.textglobal_codegenType_loader2__f3JUbzGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader__f3JUbgc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? "To use a component, simply import PlasmicLoader and pass the name of the component. Here's an example demonstrating data fetching with the loader:"
              : "For example, for a ProfileCard component, this is what your wrapper component might look like:"}
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? true : false
        ) ? (
          <DocsCodeSnippet
            className={classNames(
              "__wab_instance",
              sty.docsCodeSnippet__e8Uqa,
              {
                [sty.docsCodeSnippetglobal_codegenType_loader__e8Uqagc32L]:
                  hasVariant(globalVariants, "codegenType", "loader"),
              }
            )}
            language={
              hasVariant(globalVariants, "codegenType", "loader")
                ? ("tsx" as const)
                : undefined
            }
          >
            {hasVariant(globalVariants, "codegenType", "loader")
              ? "import PlasmicLoader from '@plasmicapp/loader';\n\nfunction MyExistingPage() {\n  // Use hooks to fetch data, read from React context, etc.\n  const user = useUser();\n\n  return (\n    <PlasmicLoader\n      component=\"Header\"\n      componentProps={{\n         // Fill slots with the right values\n         userName: user.email,\n         email: user.name,\n\n         // Toggle the variants you want\n         isLogged: !user.isAnonymous,\n\n         // Override the avatar img element with the right src\n         avatar:{\n           src: user.profileImgSrc\n         }\n\n         // Add onClick handler to the login button\n         login: {\n           onClick: () => navigateToLogin(),\n         }\n      }}\n    />\n  );\n}"
              : "Snippet!"}
          </DocsCodeSnippet>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2")
            ? true
            : hasVariant(globalVariants, "codegenType", "loader")
            ? false
            : true
        ) ? (
          <DocsCodeSnippet
            className={classNames(
              "__wab_instance",
              sty.docsCodeSnippet__vsOWu,
              {
                [sty.docsCodeSnippetglobal_codegenType_loader2__vsOWuZGeqY]:
                  hasVariant(globalVariants, "codegenType", "loader2"),
                [sty.docsCodeSnippetglobal_codegenType_loader__vsOWuGc32L]:
                  hasVariant(globalVariants, "codegenType", "loader"),
              }
            )}
            language={"tsx" as const}
          >
            {
              "function ProfileCard(props: ProfileCardProps) {\n  return <PlasmicProfileCard {...props}/>;\n}"
            }
          </DocsCodeSnippet>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2")
            ? true
            : hasVariant(globalVariants, "codegenType", "loader")
            ? false
            : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sw77C,
              {
                [sty.textglobal_codegenType_loader2__sw77CZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader__sw77CGc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {
              "The initial generated wrapper file may be all you need if your component is just a presentational component without any behavior. But if you need more control, you can do almost anything you want:"
            }
          </div>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader") ? false : true
        ) ? (
          <DocsCodeSnippet
            data-plasmic-name={"loaderv2Config"}
            data-plasmic-override={overrides.loaderv2Config}
            className={classNames("__wab_instance", sty.loaderv2Config, {
              [sty.loaderv2Configglobal_codegenType_loader2]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.loaderv2Configglobal_codegenType_loader]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
            language={"tsx" as const}
          >
            {hasVariant(globalVariants, "codegenType", "loader2")
              ? '// replace it by loader-nextjs or loader-gatsby depending on what you are using\nimport { PlasmicComponent, PlasmicRootProvider, initPlasmicLoader } from \'@plasmicapp/loader-react\';\n\nconst loader = initPlasmicLoader({\n  projects: [\n    {\n      id: "${projectId}",\n      token: "${projectApiToken}",\n    },\n  ],\n});\n\nfunction MyExistingPage() {\n  // Use hooks to fetch data, read from React context, etc.\n  const user = useUser();\n\n  return (\n    <PlasmicRootProvider loader={loader}>\n      <PlasmicComponent\n        component="Header"\n        componentProps={{\n           // Fill slots with the right values\n           userName: user.email,\n           email: user.name,\n\n           // Toggle the variants you want\n           isLogged: !user.isAnonymous,\n\n           // Override the avatar img element with the right src\n           avatar={{\n             src: user.profileImgSrc\n           }}\n\n           // Add onClick handler to the login button\n           login: {\n             onClick: () => navigateToLogin(),\n          }\n      />\n    </PlasmicRootProvider>\n  );\n}'
              : "function ProfileCard(props: ProfileCardProps) {\n  // Use hooks to fetch data, read from React context, etc.\n  const user = useUser(props.userId);\n  const isFollowing = useIsFollowing(props.userId);\n  return (\n    <PlasmicProfileCard\n      // Fill slots with the right values\n      userName={user.name}\n      email={user.email}\n\n      // Toggle the variants you want\n      isFollowing={isFollowing}\n      isExpert={user.isExpert}\n\n      // Override the avatar img element with the right src\n      avatar={{\n        src: user.profileImgSrc\n      }}\n\n      // Add onClick handler to the root element\n      onClick={() => navigateToUserPage(props.userId)}\n    />\n  );\n}"}
          </DocsCodeSnippet>
        ) : null}
        {(
          hasVariant(globalVariants, "codegenType", "loader2") ? true : false
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z0N94,
              {
                [sty.textglobal_codegenType_loader2__z0N94ZGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader__z0N94Gc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader2")
              ? "In the above, components and pages will be loaded from Plasmic at run time.  It's also to pre-fetch the designs at build-time instead; see our docs for information on how to do so for your framework of choice:"
              : hasVariant(globalVariants, "codegenType", "loader")
              ? "This API Explorer lets you see and play with all the props that each component exposes.  You can toggle the different props, or even directly edit the code snippet, and see how they look in the live preview."
              : "This API Explorer lets you see and play with all the props that each Plasmic* component exposes.  You can toggle the different props, or even directly edit the code snippet, and see how they look in the live preview."}
          </div>
        ) : null}

        <a
          className={classNames(projectcss.all, projectcss.a, sty.link__posaU, {
            [sty.linkglobal_codegenType_loader2__posaUzGeqY]: hasVariant(
              globalVariants,
              "codegenType",
              "loader2"
            ),

            [sty.linkglobal_codegenType_loader__posaUgc32L]: hasVariant(
              globalVariants,
              "codegenType",
              "loader"
            ),
          })}
          href={
            hasVariant(globalVariants, "codegenType", "loader2")
              ? ("https://docs.plasmic.app/learn/technical-overview/" as const)
              : hasVariant(globalVariants, "codegenType", "loader")
              ? ("https://www.plasmic.app/learn/loader-guide/" as const)
              : ("https://www.plasmic.app/learn/blackbox-scheme/" as const)
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5PdrN,
              {
                [sty.textglobal_codegenType_loader2___5PdrNzGeqY]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader2"
                ),

                [sty.textglobal_codegenType_loader___5PdrNgc32L]: hasVariant(
                  globalVariants,
                  "codegenType",
                  "loader"
                ),
              }
            )}
          >
            {hasVariant(globalVariants, "codegenType", "loader2")
              ? "Learn more about Headless API"
              : hasVariant(globalVariants, "codegenType", "loader")
              ? "Learn more about PlasmicLoader "
              : "Learn more about code generation "}
          </div>

          <OpenIcon
            className={classNames(projectcss.all, sty.svg__c8O4O, {
              [sty.svgglobal_codegenType_loader__c8O4Ogc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            })}
            role={"img"}
          />
        </a>

        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2__xcnqu
          )}
        >
          {"The API Explorer"}
        </h2>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qxCbh,
            {
              [sty.textglobal_codegenType_loader2__qxCbhzGeqY]: hasVariant(
                globalVariants,
                "codegenType",
                "loader2"
              ),

              [sty.textglobal_codegenType_loader__qxCbhgc32L]: hasVariant(
                globalVariants,
                "codegenType",
                "loader"
              ),
            }
          )}
        >
          {hasVariant(globalVariants, "codegenType", "loader")
            ? "This API Explorer lets you see and play with all the props that each component exposes.  You can toggle the different props, or even directly edit the code snippet, and see how they look in the live preview."
            : "This API Explorer lets you see and play with all the props that each Plasmic* component exposes.  You can toggle the different props, or even directly edit the code snippet, and see how they look in the live preview."}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "introText",
    "introText2",
    "introText3",
    "nextConfig",
    "gatsbyConfig",
    "syncProjectSnippet",
    "loaderv2Config",
  ],

  introText: ["introText"],
  introText2: ["introText2"],
  introText3: ["introText3"],
  nextConfig: ["nextConfig"],
  gatsbyConfig: ["gatsbyConfig"],
  syncProjectSnippet: ["syncProjectSnippet"],
  loaderv2Config: ["loaderv2Config"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  introText: "div";
  introText2: "div";
  introText3: "div";
  nextConfig: typeof DocsCodeSnippet;
  gatsbyConfig: typeof DocsCodeSnippet;
  syncProjectSnippet: typeof SyncProjectSnippet;
  loaderv2Config: typeof DocsCodeSnippet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocsPortalIntro__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDocsPortalIntro__VariantsArgs;
  args?: PlasmicDocsPortalIntro__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDocsPortalIntro__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDocsPortalIntro__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocsPortalIntro__ArgProps,
      internalVariantPropNames: PlasmicDocsPortalIntro__VariantProps,
    });

    return PlasmicDocsPortalIntro__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocsPortalIntro";
  } else {
    func.displayName = `PlasmicDocsPortalIntro.${nodeName}`;
  }
  return func;
}

export const PlasmicDocsPortalIntro = Object.assign(
  // Top-level PlasmicDocsPortalIntro renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    introText: makeNodeComponent("introText"),
    introText2: makeNodeComponent("introText2"),
    introText3: makeNodeComponent("introText3"),
    nextConfig: makeNodeComponent("nextConfig"),
    gatsbyConfig: makeNodeComponent("gatsbyConfig"),
    syncProjectSnippet: makeNodeComponent("syncProjectSnippet"),
    loaderv2Config: makeNodeComponent("loaderv2Config"),

    // Metadata about props expected for PlasmicDocsPortalIntro
    internalVariantProps: PlasmicDocsPortalIntro__VariantProps,
    internalArgProps: PlasmicDocsPortalIntro__ArgProps,
  }
);

export default PlasmicDocsPortalIntro;
/* prettier-ignore-end */
