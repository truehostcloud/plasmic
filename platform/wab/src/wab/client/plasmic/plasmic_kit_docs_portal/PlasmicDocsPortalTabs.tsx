// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: g_uMeV_Uh6
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import DocsPortalTab from "../../components/docs/DocsPortalTab"; // plasmic-import: J18H-n0ADz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicDocsPortalTabs.module.css"; // plasmic-import: g_uMeV_Uh6/css

import CodeIcon from "../plasmic_kit/PlasmicIcon__Code"; // plasmic-import: sVrc1aLRLGQtV/icon
import ComponentIcon from "../plasmic_kit/PlasmicIcon__Component"; // plasmic-import: nNWEF4jI3s5DI/icon
import ImageBlockIcon from "../plasmic_kit/PlasmicIcon__ImageBlock"; // plasmic-import: Sta1tgTjp-AlG/icon

export type PlasmicDocsPortalTabs__VariantMembers = {
  activeTab: "intro" | "components" | "images";
};

export type PlasmicDocsPortalTabs__VariantsArgs = {
  activeTab?: SingleChoiceArg<"intro" | "components" | "images">;
};

type VariantPropType = keyof PlasmicDocsPortalTabs__VariantsArgs;
export const PlasmicDocsPortalTabs__VariantProps = new Array<VariantPropType>(
  "activeTab"
);

export type PlasmicDocsPortalTabs__ArgsType = {};
type ArgPropType = keyof PlasmicDocsPortalTabs__ArgsType;
export const PlasmicDocsPortalTabs__ArgProps = new Array<ArgPropType>();

export type PlasmicDocsPortalTabs__OverridesType = {
  root?: p.Flex<"div">;
  intro?: p.Flex<typeof DocsPortalTab>;
  components?: p.Flex<typeof DocsPortalTab>;
  images?: p.Flex<typeof DocsPortalTab>;
};

export interface DefaultDocsPortalTabsProps {
  activeTab?: SingleChoiceArg<"intro" | "components" | "images">;
  className?: string;
}

export const defaultDocsPortalTabs__Args: Partial<PlasmicDocsPortalTabs__ArgsType> =
  {};

function PlasmicDocsPortalTabs__RenderFunc(props: {
  variants: PlasmicDocsPortalTabs__VariantsArgs;
  args: PlasmicDocsPortalTabs__ArgsType;
  overrides: PlasmicDocsPortalTabs__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDocsPortalTabs__Args, props.args);
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <DocsPortalTab
        data-plasmic-name={"intro"}
        data-plasmic-override={overrides.intro}
        className={classNames("__wab_instance", sty.intro, {
          [sty.introactiveTab_components]: hasVariant(
            variants,
            "activeTab",
            "components"
          ),

          [sty.introactiveTab_intro]: hasVariant(
            variants,
            "activeTab",
            "intro"
          ),
        })}
        icon={
          <CodeIcon
            className={classNames(projectcss.all, sty.svg__zfUTw)}
            role={"img"}
          />
        }
        isActive={hasVariant(variants, "activeTab", "intro") ? true : undefined}
      >
        {"Get Started"}
      </DocsPortalTab>

      <DocsPortalTab
        data-plasmic-name={"components"}
        data-plasmic-override={overrides.components}
        className={classNames("__wab_instance", sty.components, {
          [sty.componentsactiveTab_components]: hasVariant(
            variants,
            "activeTab",
            "components"
          ),

          [sty.componentsactiveTab_images]: hasVariant(
            variants,
            "activeTab",
            "images"
          ),
        })}
        icon={
          <ComponentIcon
            className={classNames(projectcss.all, sty.svg__n57Oc)}
            role={"img"}
          />
        }
        isActive={
          hasVariant(variants, "activeTab", "components") ? true : undefined
        }
      >
        {"Components"}
      </DocsPortalTab>

      <DocsPortalTab
        data-plasmic-name={"images"}
        data-plasmic-override={overrides.images}
        className={classNames("__wab_instance", sty.images, {
          [sty.imagesactiveTab_images]: hasVariant(
            variants,
            "activeTab",
            "images"
          ),
        })}
        icon={
          <ImageBlockIcon
            className={classNames(projectcss.all, sty.svg__j4E20)}
            role={"img"}
          />
        }
        isActive={
          hasVariant(variants, "activeTab", "images") ? true : undefined
        }
      >
        {"Icons"}
      </DocsPortalTab>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "intro", "components", "images"],
  intro: ["intro"],
  components: ["components"],
  images: ["images"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  intro: typeof DocsPortalTab;
  components: typeof DocsPortalTab;
  images: typeof DocsPortalTab;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocsPortalTabs__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicDocsPortalTabs__VariantsArgs;
  args?: PlasmicDocsPortalTabs__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicDocsPortalTabs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicDocsPortalTabs__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocsPortalTabs__ArgProps,
      internalVariantPropNames: PlasmicDocsPortalTabs__VariantProps,
    });

    return PlasmicDocsPortalTabs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocsPortalTabs";
  } else {
    func.displayName = `PlasmicDocsPortalTabs.${nodeName}`;
  }
  return func;
}

export const PlasmicDocsPortalTabs = Object.assign(
  // Top-level PlasmicDocsPortalTabs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    intro: makeNodeComponent("intro"),
    components: makeNodeComponent("components"),
    images: makeNodeComponent("images"),

    // Metadata about props expected for PlasmicDocsPortalTabs
    internalVariantProps: PlasmicDocsPortalTabs__VariantProps,
    internalArgProps: PlasmicDocsPortalTabs__ArgProps,
  }
);

export default PlasmicDocsPortalTabs;
/* prettier-ignore-end */
