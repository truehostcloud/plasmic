// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: TrtPQzZ8M2
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import LabeledProp from "../../components/docs/LabeledProp"; // plasmic-import: 95ed9ODv12/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicElementProp.module.css"; // plasmic-import: TrtPQzZ8M2/css

import HStackBlockIcon from "../plasmic_kit/PlasmicIcon__HStackBlock"; // plasmic-import: vrE0GHgUiSGkm/icon
import PlusCircleIcon from "../plasmic_kit/PlasmicIcon__PlusCircle"; // plasmic-import: miOAezEgkL3Po/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

export type PlasmicElementProp__VariantMembers = {};

export type PlasmicElementProp__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementProp__VariantsArgs;
export const PlasmicElementProp__VariantProps = new Array<VariantPropType>();

export type PlasmicElementProp__ArgsType = {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  elementType?: React.ReactNode;
};

type ArgPropType = keyof PlasmicElementProp__ArgsType;
export const PlasmicElementProp__ArgProps = new Array<ArgPropType>(
  "label",
  "icon",
  "elementType"
);

export type PlasmicElementProp__OverridesType = {
  root?: p.Flex<"div">;
  labeledProp?: p.Flex<typeof LabeledProp>;
  addButton?: p.Flex<typeof IconButton>;
};

export interface DefaultElementPropProps {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  elementType?: React.ReactNode;
  className?: string;
}

export const defaultElementProp__Args: Partial<PlasmicElementProp__ArgsType> =
  {};

function PlasmicElementProp__RenderFunc(props: {
  variants: PlasmicElementProp__VariantsArgs;
  args: PlasmicElementProp__ArgsType;
  overrides: PlasmicElementProp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultElementProp__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <LabeledProp
        data-plasmic-name={"labeledProp"}
        data-plasmic-override={overrides.labeledProp}
        className={classNames("__wab_instance", sty.labeledProp)}
        hasAnnotation={true}
        hasType={true}
        icon={p.renderPlasmicSlot({
          defaultContents: (
            <HStackBlockIcon
              className={classNames(projectcss.all, sty.svg___256O)}
              role={"img"}
            />
          ),

          value: args.icon,
        })}
        label={p.renderPlasmicSlot({
          defaultContents: "color",
          value: args.label,
        })}
        noContent={true}
        primaryAnnotation={
          <IconButton
            data-plasmic-name={"addButton"}
            data-plasmic-override={overrides.addButton}
            children2={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__tojF4)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.addButton)}
          >
            <PlusCircleIcon
              className={classNames(projectcss.all, sty.svg__vKxue)}
              role={"img"}
            />
          </IconButton>
        }
        type={p.renderPlasmicSlot({
          defaultContents: "<div />",
          value: args.elementType,
          className: classNames(sty.slotTargetElementType),
        })}
      >
        {null}
      </LabeledProp>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "labeledProp", "addButton"],
  labeledProp: ["labeledProp", "addButton"],
  addButton: ["addButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  labeledProp: typeof LabeledProp;
  addButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementProp__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicElementProp__VariantsArgs;
  args?: PlasmicElementProp__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicElementProp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicElementProp__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementProp__ArgProps,
      internalVariantPropNames: PlasmicElementProp__VariantProps,
    });

    return PlasmicElementProp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementProp";
  } else {
    func.displayName = `PlasmicElementProp.${nodeName}`;
  }
  return func;
}

export const PlasmicElementProp = Object.assign(
  // Top-level PlasmicElementProp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labeledProp: makeNodeComponent("labeledProp"),
    addButton: makeNodeComponent("addButton"),

    // Metadata about props expected for PlasmicElementProp
    internalVariantProps: PlasmicElementProp__VariantProps,
    internalArgProps: PlasmicElementProp__ArgProps,
  }
);

export default PlasmicElementProp;
/* prettier-ignore-end */
