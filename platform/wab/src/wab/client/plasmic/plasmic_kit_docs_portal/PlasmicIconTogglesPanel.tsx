// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: 9qTu7qylBlP
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import DocsCollapsibleExplanation from "../../components/docs/DocsCollapsibleExplanation"; // plasmic-import: twJQ9idqHQ/component
import LabeledProp from "../../components/docs/LabeledProp"; // plasmic-import: 95ed9ODv12/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicIconTogglesPanel.module.css"; // plasmic-import: 9qTu7qylBlP/css

import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import LinkIcon from "../plasmic_kit/PlasmicIcon__Link"; // plasmic-import: BQBWbw0fg66Lw/icon
import ResetIcon from "../plasmic_kit/PlasmicIcon__Reset"; // plasmic-import: Dj3u-HuPv94sN/icon
import SearchIcon from "../plasmic_kit/PlasmicIcon__Search"; // plasmic-import: sjONHoK61vpSz/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlussvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

export type PlasmicIconTogglesPanel__VariantMembers = {};

export type PlasmicIconTogglesPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicIconTogglesPanel__VariantsArgs;
export const PlasmicIconTogglesPanel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicIconTogglesPanel__ArgsType = {
  header?: React.ReactNode;
};

type ArgPropType = keyof PlasmicIconTogglesPanel__ArgsType;
export const PlasmicIconTogglesPanel__ArgProps = new Array<ArgPropType>(
  "header"
);

export type PlasmicIconTogglesPanel__OverridesType = {
  root?: p.Flex<"div">;
  explanation?: p.Flex<typeof DocsCollapsibleExplanation>;
  headerContainer?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  resetButton?: p.Flex<typeof Button>;
  body?: p.Flex<"div">;
  title?: p.Flex<typeof LabeledProp>;
  color?: p.Flex<typeof LabeledProp>;
  iconButton?: p.Flex<typeof IconButton>;
  width?: p.Flex<typeof LabeledProp>;
  height?: p.Flex<typeof LabeledProp>;
};

export interface DefaultIconTogglesPanelProps {
  header?: React.ReactNode;
  className?: string;
}

export const defaultIconTogglesPanel__Args: Partial<PlasmicIconTogglesPanel__ArgsType> =
  {};

function PlasmicIconTogglesPanel__RenderFunc(props: {
  variants: PlasmicIconTogglesPanel__VariantsArgs;
  args: PlasmicIconTogglesPanel__ArgsType;
  overrides: PlasmicIconTogglesPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultIconTogglesPanel__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <DocsCollapsibleExplanation
        data-plasmic-name={"explanation"}
        data-plasmic-override={overrides.explanation}
        className={classNames("__wab_instance", sty.explanation)}
      />

      <div
        data-plasmic-name={"headerContainer"}
        data-plasmic-override={overrides.headerContainer}
        className={classNames(projectcss.all, sty.headerContainer)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dWjAt
            )}
          >
            {"Props for"}
          </div>

          {p.renderPlasmicSlot({
            defaultContents: "TrashIcon",
            value: args.header,
            className: classNames(sty.slotTargetHeader),
          })}
        </div>

        <Button
          data-plasmic-name={"resetButton"}
          data-plasmic-override={overrides.resetButton}
          className={classNames("__wab_instance", sty.resetButton)}
          endIcon={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg__mOpXs)}
              role={"img"}
            />
          }
          startIcon={
            <ResetIcon
              className={classNames(projectcss.all, sty.svg___2LStH)}
              role={"img"}
            />
          }
          type={"seamless" as const}
          withIcons={"startIcon" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wJgZr
            )}
          >
            {"Reset all"}
          </div>
        </Button>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(projectcss.all, sty.body)}
      >
        <LabeledProp
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames("__wab_instance", sty.title)}
          hasType={true}
          icon={
            <LinkIcon
              className={classNames(projectcss.all, sty.svg__g6TBl)}
              role={"img"}
            />
          }
          label={"title"}
          type={"string "}
        >
          <Textbox
            className={classNames("__wab_instance", sty.textbox__q7RTv)}
            prefixIcon={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__ouChw)}
                role={"img"}
              />
            }
            suffixIcon={
              <CloseIcon
                className={classNames(projectcss.all, sty.svg___3Loeh)}
                role={"img"}
              />
            }
          />
        </LabeledProp>

        <LabeledProp
          data-plasmic-name={"color"}
          data-plasmic-override={overrides.color}
          className={classNames("__wab_instance", sty.color)}
          hasAnnotation={true}
          hasType={true}
          icon={
            <LinkIcon
              className={classNames(projectcss.all, sty.svg__xx4Mh)}
              role={"img"}
            />
          }
          noContent={true}
          primaryAnnotation={
            <IconButton
              data-plasmic-name={"iconButton"}
              data-plasmic-override={overrides.iconButton}
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__kDr8C)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.iconButton)}
            >
              <PlussvgIcon
                className={classNames(projectcss.all, sty.svg__m76Qj)}
                role={"img"}
              />
            </IconButton>
          }
          type={"string "}
        />

        <LabeledProp
          data-plasmic-name={"width"}
          data-plasmic-override={overrides.width}
          className={classNames("__wab_instance", sty.width)}
          hasType={true}
          icon={
            <LinkIcon
              className={classNames(projectcss.all, sty.svg__x7Blv)}
              role={"img"}
            />
          }
          label={"width"}
          type={"string | number "}
        >
          <Textbox
            className={classNames("__wab_instance", sty.textbox___1P8Jh)}
            prefixIcon={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__gjKd3)}
                role={"img"}
              />
            }
            suffixIcon={
              <CloseIcon
                className={classNames(projectcss.all, sty.svg__yy063)}
                role={"img"}
              />
            }
          />
        </LabeledProp>

        <LabeledProp
          data-plasmic-name={"height"}
          data-plasmic-override={overrides.height}
          className={classNames("__wab_instance", sty.height)}
          hasType={true}
          icon={
            <LinkIcon
              className={classNames(projectcss.all, sty.svg__vKaTi)}
              role={"img"}
            />
          }
          label={"height"}
          type={"string | number "}
        >
          <Textbox
            className={classNames("__wab_instance", sty.textbox___7JnBb)}
            prefixIcon={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__iNmCb)}
                role={"img"}
              />
            }
            suffixIcon={
              <CloseIcon
                className={classNames(projectcss.all, sty.svg___04AVd)}
                role={"img"}
              />
            }
          />
        </LabeledProp>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "explanation",
    "headerContainer",
    "freeBox",
    "resetButton",
    "body",
    "title",
    "color",
    "iconButton",
    "width",
    "height",
  ],

  explanation: ["explanation"],
  headerContainer: ["headerContainer", "freeBox", "resetButton"],
  freeBox: ["freeBox"],
  resetButton: ["resetButton"],
  body: ["body", "title", "color", "iconButton", "width", "height"],
  title: ["title"],
  color: ["color", "iconButton"],
  iconButton: ["iconButton"],
  width: ["width"],
  height: ["height"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  explanation: typeof DocsCollapsibleExplanation;
  headerContainer: "div";
  freeBox: "div";
  resetButton: typeof Button;
  body: "div";
  title: typeof LabeledProp;
  color: typeof LabeledProp;
  iconButton: typeof IconButton;
  width: typeof LabeledProp;
  height: typeof LabeledProp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIconTogglesPanel__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicIconTogglesPanel__VariantsArgs;
  args?: PlasmicIconTogglesPanel__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicIconTogglesPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicIconTogglesPanel__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicIconTogglesPanel__ArgProps,
      internalVariantPropNames: PlasmicIconTogglesPanel__VariantProps,
    });

    return PlasmicIconTogglesPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIconTogglesPanel";
  } else {
    func.displayName = `PlasmicIconTogglesPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicIconTogglesPanel = Object.assign(
  // Top-level PlasmicIconTogglesPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    explanation: makeNodeComponent("explanation"),
    headerContainer: makeNodeComponent("headerContainer"),
    freeBox: makeNodeComponent("freeBox"),
    resetButton: makeNodeComponent("resetButton"),
    body: makeNodeComponent("body"),
    title: makeNodeComponent("title"),
    color: makeNodeComponent("color"),
    iconButton: makeNodeComponent("iconButton"),
    width: makeNodeComponent("width"),
    height: makeNodeComponent("height"),

    // Metadata about props expected for PlasmicIconTogglesPanel
    internalVariantProps: PlasmicIconTogglesPanel__VariantProps,
    internalArgProps: PlasmicIconTogglesPanel__ArgProps,
  }
);

export default PlasmicIconTogglesPanel;
/* prettier-ignore-end */
