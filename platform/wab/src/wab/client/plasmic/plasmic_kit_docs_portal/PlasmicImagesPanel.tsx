// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: p94ACk9Ka-
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import ImageListItem from "../../components/docs/ImageListItem"; // plasmic-import: tnA9SknzQ5/component
import Searchbox from "../../components/widgets/Searchbox"; // plasmic-import: po7gr0PX4_gWo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicImagesPanel.module.css"; // plasmic-import: p94ACk9Ka-/css

import GearIcon from "../plasmic_kit/PlasmicIcon__Gear"; // plasmic-import: ZmVZmXEc9f_SR/icon
import PlusCircleIcon from "../plasmic_kit/PlasmicIcon__PlusCircle"; // plasmic-import: miOAezEgkL3Po/icon
import TrashIcon from "../plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon

export type PlasmicImagesPanel__VariantMembers = {};

export type PlasmicImagesPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicImagesPanel__VariantsArgs;
export const PlasmicImagesPanel__VariantProps = new Array<VariantPropType>();

export type PlasmicImagesPanel__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicImagesPanel__ArgsType;
export const PlasmicImagesPanel__ArgProps = new Array<ArgPropType>("children");

export type PlasmicImagesPanel__OverridesType = {
  root?: p.Flex<"div">;
  searchContainer?: p.Flex<"div">;
  searchbox?: p.Flex<typeof Searchbox>;
  componentsContainer?: p.Flex<"div">;
};

export interface DefaultImagesPanelProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultImagesPanel__Args: Partial<PlasmicImagesPanel__ArgsType> =
  {};

function PlasmicImagesPanel__RenderFunc(props: {
  variants: PlasmicImagesPanel__VariantsArgs;
  args: PlasmicImagesPanel__ArgsType;
  overrides: PlasmicImagesPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultImagesPanel__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"searchContainer"}
        data-plasmic-override={overrides.searchContainer}
        className={classNames(projectcss.all, sty.searchContainer)}
      >
        <Searchbox
          data-plasmic-name={"searchbox"}
          data-plasmic-override={overrides.searchbox}
          className={classNames("__wab_instance", sty.searchbox)}
        />
      </div>

      <div
        data-plasmic-name={"componentsContainer"}
        data-plasmic-override={overrides.componentsContainer}
        className={classNames(projectcss.all, sty.componentsContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <ImageListItem
                className={classNames(
                  "__wab_instance",
                  sty.imageListItem__t7Av5
                )}
                icon={
                  <TrashIcon
                    className={classNames(projectcss.all, sty.svg__wSoz)}
                    role={"img"}
                  />
                }
              />

              <ImageListItem
                className={classNames(
                  "__wab_instance",
                  sty.imageListItem__lEn7S
                )}
                icon={
                  <PlusCircleIcon
                    className={classNames(projectcss.all, sty.svg__dz9NA)}
                    role={"img"}
                  />
                }
              >
                {"plus circle"}
              </ImageListItem>

              <ImageListItem
                className={classNames(
                  "__wab_instance",
                  sty.imageListItem__b3CyE
                )}
                icon={
                  <GearIcon
                    className={classNames(projectcss.all, sty.svg__lt778)}
                    role={"img"}
                  />
                }
              >
                {"gear"}
              </ImageListItem>
            </React.Fragment>
          ),

          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "searchContainer", "searchbox", "componentsContainer"],
  searchContainer: ["searchContainer", "searchbox"],
  searchbox: ["searchbox"],
  componentsContainer: ["componentsContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  searchContainer: "div";
  searchbox: typeof Searchbox;
  componentsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImagesPanel__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicImagesPanel__VariantsArgs;
  args?: PlasmicImagesPanel__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicImagesPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicImagesPanel__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicImagesPanel__ArgProps,
      internalVariantPropNames: PlasmicImagesPanel__VariantProps,
    });

    return PlasmicImagesPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImagesPanel";
  } else {
    func.displayName = `PlasmicImagesPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicImagesPanel = Object.assign(
  // Top-level PlasmicImagesPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchContainer: makeNodeComponent("searchContainer"),
    searchbox: makeNodeComponent("searchbox"),
    componentsContainer: makeNodeComponent("componentsContainer"),

    // Metadata about props expected for PlasmicImagesPanel
    internalVariantProps: PlasmicImagesPanel__VariantProps,
    internalArgProps: PlasmicImagesPanel__ArgProps,
  }
);

export default PlasmicImagesPanel;
/* prettier-ignore-end */
