// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: 95ed9ODv12
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useTrigger,
} from "@plasmicapp/react-web";
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicLabeledProp.module.css"; // plasmic-import: 95ed9ODv12/css

import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import SearchIcon from "../plasmic_kit/PlasmicIcon__Search"; // plasmic-import: sjONHoK61vpSz/icon
import VariantGroupIcon from "../plasmic_kit/PlasmicIcon__VariantGroup"; // plasmic-import: pyS6pK4Spx-QF/icon

export type PlasmicLabeledProp__VariantMembers = {
  noContent: "noContent";
  hasType: "hasType";
  hasAnnotation: "hasAnnotation";
};

export type PlasmicLabeledProp__VariantsArgs = {
  noContent?: SingleBooleanChoiceArg<"noContent">;
  hasType?: SingleBooleanChoiceArg<"hasType">;
  hasAnnotation?: SingleBooleanChoiceArg<"hasAnnotation">;
};

type VariantPropType = keyof PlasmicLabeledProp__VariantsArgs;
export const PlasmicLabeledProp__VariantProps = new Array<VariantPropType>(
  "noContent",
  "hasType",
  "hasAnnotation"
);

export type PlasmicLabeledProp__ArgsType = {
  icon?: React.ReactNode;
  label?: React.ReactNode;
  children?: React.ReactNode;
  type?: React.ReactNode;
  primaryAnnotation?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLabeledProp__ArgsType;
export const PlasmicLabeledProp__ArgProps = new Array<ArgPropType>(
  "icon",
  "label",
  "children",
  "type",
  "primaryAnnotation"
);

export type PlasmicLabeledProp__OverridesType = {
  root?: p.Flex<"div">;
  primary?: p.Flex<"div">;
  iconContainer?: p.Flex<"div">;
  labelContainer?: p.Flex<"div">;
  primaryAnnotation?: p.Flex<"div">;
  menuButton?: p.Flex<typeof MenuButton>;
  content?: p.Flex<"div">;
  typeContainer?: p.Flex<"div">;
};

export interface DefaultLabeledPropProps {
  icon?: React.ReactNode;
  label?: React.ReactNode;
  children?: React.ReactNode;
  type?: React.ReactNode;
  primaryAnnotation?: React.ReactNode;
  noContent?: SingleBooleanChoiceArg<"noContent">;
  hasType?: SingleBooleanChoiceArg<"hasType">;
  hasAnnotation?: SingleBooleanChoiceArg<"hasAnnotation">;
  className?: string;
}

export const defaultLabeledProp__Args: Partial<PlasmicLabeledProp__ArgsType> =
  {};

function PlasmicLabeledProp__RenderFunc(props: {
  variants: PlasmicLabeledProp__VariantsArgs;
  args: PlasmicLabeledProp__ArgsType;
  overrides: PlasmicLabeledProp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultLabeledProp__Args, props.args);
  const $props = args;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasType]: hasVariant(variants, "hasType", "hasType"),
          [sty.rootnoContent]: hasVariant(variants, "noContent", "noContent"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"primary"}
        data-plasmic-override={overrides.primary}
        hasGap={true}
        className={classNames(projectcss.all, sty.primary, {
          [sty.primaryhasType]: hasVariant(variants, "hasType", "hasType"),
          [sty.primarynoContent]: hasVariant(
            variants,
            "noContent",
            "noContent"
          ),
        })}
      >
        <div
          data-plasmic-name={"iconContainer"}
          data-plasmic-override={overrides.iconContainer}
          className={classNames(projectcss.all, sty.iconContainer, {
            [sty.iconContainernoContent]: hasVariant(
              variants,
              "noContent",
              "noContent"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <VariantGroupIcon
                className={classNames(projectcss.all, sty.svg__pirdo)}
                role={"img"}
              />
            ),

            value: args.icon,
            className: classNames(sty.slotTargetIcon),
          })}
        </div>

        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer, {
            [sty.labelContainernoContent]: hasVariant(
              variants,
              "noContent",
              "noContent"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "color",
            value: args.label,
            className: classNames(sty.slotTargetLabel, {
              [sty.slotTargetLabelnoContent]: hasVariant(
                variants,
                "noContent",
                "noContent"
              ),
            }),
          })}
        </div>

        {(
          hasVariant(variants, "hasAnnotation", "hasAnnotation") ? true : false
        ) ? (
          <div
            data-plasmic-name={"primaryAnnotation"}
            data-plasmic-override={overrides.primaryAnnotation}
            className={classNames(projectcss.all, sty.primaryAnnotation, {
              [sty.primaryAnnotationhasAnnotation]: hasVariant(
                variants,
                "hasAnnotation",
                "hasAnnotation"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.primaryAnnotation,
            })}
          </div>
        ) : null}
        {(triggers.hover_root ? true : false) ? (
          <MenuButton
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames("__wab_instance", sty.menuButton)}
          />
        ) : null}
      </p.Stack>

      {(hasVariant(variants, "noContent", "noContent") ? false : true) ? (
        <div
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          className={classNames(projectcss.all, sty.content, {
            [sty.contenthasAnnotation]: hasVariant(
              variants,
              "hasAnnotation",
              "hasAnnotation"
            ),

            [sty.contenthasType]: hasVariant(variants, "hasType", "hasType"),
            [sty.contentnoContent]: hasVariant(
              variants,
              "noContent",
              "noContent"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Textbox
                className={classNames("__wab_instance", sty.textbox__sW5KA)}
                prefixIcon={
                  <SearchIcon
                    className={classNames(projectcss.all, sty.svg__vg2Zx)}
                    role={"img"}
                  />
                }
                suffixIcon={
                  <CloseIcon
                    className={classNames(projectcss.all, sty.svg__dAko7)}
                    role={"img"}
                  />
                }
              />
            ),

            value: args.children,
          })}
        </div>
      ) : null}
      {(hasVariant(variants, "hasType", "hasType") ? true : false) ? (
        <div
          data-plasmic-name={"typeContainer"}
          data-plasmic-override={overrides.typeContainer}
          className={classNames(projectcss.all, sty.typeContainer, {
            [sty.typeContainerhasAnnotation]: hasVariant(
              variants,
              "hasAnnotation",
              "hasAnnotation"
            ),

            [sty.typeContainerhasType]: hasVariant(
              variants,
              "hasType",
              "hasType"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "string | undefined",
            value: args.type,
            className: classNames(sty.slotTargetType, {
              [sty.slotTargetTypehasType]: hasVariant(
                variants,
                "hasType",
                "hasType"
              ),
            }),
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "primary",
    "iconContainer",
    "labelContainer",
    "primaryAnnotation",
    "menuButton",
    "content",
    "typeContainer",
  ],

  primary: [
    "primary",
    "iconContainer",
    "labelContainer",
    "primaryAnnotation",
    "menuButton",
  ],

  iconContainer: ["iconContainer"],
  labelContainer: ["labelContainer"],
  primaryAnnotation: ["primaryAnnotation"],
  menuButton: ["menuButton"],
  content: ["content"],
  typeContainer: ["typeContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  primary: "div";
  iconContainer: "div";
  labelContainer: "div";
  primaryAnnotation: "div";
  menuButton: typeof MenuButton;
  content: "div";
  typeContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLabeledProp__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicLabeledProp__VariantsArgs;
  args?: PlasmicLabeledProp__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicLabeledProp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicLabeledProp__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLabeledProp__ArgProps,
      internalVariantPropNames: PlasmicLabeledProp__VariantProps,
    });

    return PlasmicLabeledProp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLabeledProp";
  } else {
    func.displayName = `PlasmicLabeledProp.${nodeName}`;
  }
  return func;
}

export const PlasmicLabeledProp = Object.assign(
  // Top-level PlasmicLabeledProp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    primary: makeNodeComponent("primary"),
    iconContainer: makeNodeComponent("iconContainer"),
    labelContainer: makeNodeComponent("labelContainer"),
    primaryAnnotation: makeNodeComponent("primaryAnnotation"),
    menuButton: makeNodeComponent("menuButton"),
    content: makeNodeComponent("content"),
    typeContainer: makeNodeComponent("typeContainer"),

    // Metadata about props expected for PlasmicLabeledProp
    internalVariantProps: PlasmicLabeledProp__VariantProps,
    internalArgProps: PlasmicLabeledProp__ArgProps,
  }
);

export default PlasmicLabeledProp;
/* prettier-ignore-end */
