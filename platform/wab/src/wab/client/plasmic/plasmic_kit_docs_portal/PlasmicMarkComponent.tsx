// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: lckuNAFyZg
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger,
} from "@plasmicapp/react-web";
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicMarkComponent.module.css"; // plasmic-import: lckuNAFyZg/css

import MarkIcon from "../plasmic_kit_design_system/PlasmicIcon__Mark"; // plasmic-import: a6KJVu0om/icon
import MarkFullColorIcon from "../plasmic_kit_design_system/PlasmicIcon__MarkFullColor"; // plasmic-import: l_n_OBLJg/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

export type PlasmicMarkComponent__VariantMembers = {};

export type PlasmicMarkComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicMarkComponent__VariantsArgs;
export const PlasmicMarkComponent__VariantProps = new Array<VariantPropType>();

export type PlasmicMarkComponent__ArgsType = {};
type ArgPropType = keyof PlasmicMarkComponent__ArgsType;
export const PlasmicMarkComponent__ArgProps = new Array<ArgPropType>();

export type PlasmicMarkComponent__OverridesType = {
  root?: p.Flex<"div">;
  iconButton?: p.Flex<typeof IconButton>;
};

export interface DefaultMarkComponentProps {
  className?: string;
}

export const defaultMarkComponent__Args: Partial<PlasmicMarkComponent__ArgsType> =
  {};

function PlasmicMarkComponent__RenderFunc(props: {
  variants: PlasmicMarkComponent__VariantsArgs;
  args: PlasmicMarkComponent__ArgsType;
  overrides: PlasmicMarkComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultMarkComponent__Args, props.args);
  const $props = args;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <IconButton
        data-plasmic-name={"iconButton"}
        data-plasmic-override={overrides.iconButton}
        children2={
          <ChevronDownsvgIcon
            className={classNames(projectcss.all, sty.svg__oEtp)}
            role={"img"}
          />
        }
        className={classNames("__wab_instance", sty.iconButton)}
        type={["seamless"]}
      >
        <p.PlasmicIcon
          PlasmicIconType={triggers.hover_root ? MarkFullColorIcon : MarkIcon}
          className={classNames(projectcss.all, sty.svg__gUdrw)}
          role={"img"}
        />
      </IconButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "iconButton"],
  iconButton: ["iconButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  iconButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMarkComponent__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicMarkComponent__VariantsArgs;
  args?: PlasmicMarkComponent__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicMarkComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicMarkComponent__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMarkComponent__ArgProps,
      internalVariantPropNames: PlasmicMarkComponent__VariantProps,
    });

    return PlasmicMarkComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMarkComponent";
  } else {
    func.displayName = `PlasmicMarkComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicMarkComponent = Object.assign(
  // Top-level PlasmicMarkComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconButton: makeNodeComponent("iconButton"),

    // Metadata about props expected for PlasmicMarkComponent
    internalVariantProps: PlasmicMarkComponent__VariantProps,
    internalArgProps: PlasmicMarkComponent__ArgProps,
  }
);

export default PlasmicMarkComponent;
/* prettier-ignore-end */
