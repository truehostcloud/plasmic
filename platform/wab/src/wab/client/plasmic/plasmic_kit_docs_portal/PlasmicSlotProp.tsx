// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: jW-aUu5X3W
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import LabeledProp from "../../components/docs/LabeledProp"; // plasmic-import: 95ed9ODv12/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicSlotProp.module.css"; // plasmic-import: jW-aUu5X3W/css

import SlotIcon from "../plasmic_kit/PlasmicIcon__Slot"; // plasmic-import: 5bfQ64bu7lE1W/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicSlotProp__VariantMembers = {
  isNonText: "isNonText";
};

export type PlasmicSlotProp__VariantsArgs = {
  isNonText?: SingleBooleanChoiceArg<"isNonText">;
};

type VariantPropType = keyof PlasmicSlotProp__VariantsArgs;
export const PlasmicSlotProp__VariantProps = new Array<VariantPropType>(
  "isNonText"
);

export type PlasmicSlotProp__ArgsType = {
  label?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSlotProp__ArgsType;
export const PlasmicSlotProp__ArgProps = new Array<ArgPropType>(
  "label",
  "children"
);

export type PlasmicSlotProp__OverridesType = {
  root?: p.Flex<"div">;
  labeledProp?: p.Flex<typeof LabeledProp>;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
};

export interface DefaultSlotPropProps {
  label?: React.ReactNode;
  children?: React.ReactNode;
  isNonText?: SingleBooleanChoiceArg<"isNonText">;
  className?: string;
}

export const defaultSlotProp__Args: Partial<PlasmicSlotProp__ArgsType> = {};

function PlasmicSlotProp__RenderFunc(props: {
  variants: PlasmicSlotProp__VariantsArgs;
  args: PlasmicSlotProp__ArgsType;
  overrides: PlasmicSlotProp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSlotProp__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <LabeledProp
        data-plasmic-name={"labeledProp"}
        data-plasmic-override={overrides.labeledProp}
        className={classNames("__wab_instance", sty.labeledProp, {
          [sty.labeledPropisNonText]: hasVariant(
            variants,
            "isNonText",
            "isNonText"
          ),
        })}
        hasAnnotation={
          hasVariant(variants, "isNonText", "isNonText") ? true : undefined
        }
        hasType={true}
        icon={
          <SlotIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        label={p.renderPlasmicSlot({
          defaultContents: "color",
          value: args.label,
        })}
        noContent={
          hasVariant(variants, "isNonText", "isNonText") ? true : undefined
        }
        primaryAnnotation={
          (hasVariant(variants, "isNonText", "isNonText") ? true : false) ? (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                {
                  [sty.textisNonText]: hasVariant(
                    variants,
                    "isNonText",
                    "isNonText"
                  ),
                }
              )}
            >
              {hasVariant(variants, "isNonText", "isNonText")
                ? "Non-text content"
                : "Enter some text"}
            </div>
          ) : null
        }
        type={"React.ReactNode"}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Textbox
              className={classNames("__wab_instance", sty.textbox__ywkXa)}
              prefixIcon={
                <SearchsvgIcon
                  className={classNames(projectcss.all, sty.svg__qdE2)}
                  role={"img"}
                />
              }
              styleType={["bordered"]}
              suffixIcon={
                <ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg___7VbjL)}
                  role={"img"}
                />
              }
            />
          ),

          value: args.children,
        })}
      </LabeledProp>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "labeledProp", "svg", "text"],
  labeledProp: ["labeledProp", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  labeledProp: typeof LabeledProp;
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlotProp__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSlotProp__VariantsArgs;
  args?: PlasmicSlotProp__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSlotProp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSlotProp__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSlotProp__ArgProps,
      internalVariantPropNames: PlasmicSlotProp__VariantProps,
    });

    return PlasmicSlotProp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSlotProp";
  } else {
    func.displayName = `PlasmicSlotProp.${nodeName}`;
  }
  return func;
}

export const PlasmicSlotProp = Object.assign(
  // Top-level PlasmicSlotProp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labeledProp: makeNodeComponent("labeledProp"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSlotProp
    internalVariantProps: PlasmicSlotProp__VariantProps,
    internalArgProps: PlasmicSlotProp__ArgProps,
  }
);

export default PlasmicSlotProp;
/* prettier-ignore-end */
