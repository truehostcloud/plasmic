// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dyzP6dbCdycwJpqiR2zkwe
// Component: 7KLBF1De9n
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import DocsCodeSnippet from "../../components/docs/DocsCodeSnippet"; // plasmic-import: P6rYMyYSiZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_docs_portal.module.css"; // plasmic-import: dyzP6dbCdycwJpqiR2zkwe/projectcss
import sty from "./PlasmicSyncProjectSnippet.module.css"; // plasmic-import: 7KLBF1De9n/css

export type PlasmicSyncProjectSnippet__VariantMembers = {};

export type PlasmicSyncProjectSnippet__VariantsArgs = {};
type VariantPropType = keyof PlasmicSyncProjectSnippet__VariantsArgs;
export const PlasmicSyncProjectSnippet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSyncProjectSnippet__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSyncProjectSnippet__ArgsType;
export const PlasmicSyncProjectSnippet__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicSyncProjectSnippet__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSyncProjectSnippetProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultSyncProjectSnippet__Args: Partial<PlasmicSyncProjectSnippet__ArgsType> =
  {};

function PlasmicSyncProjectSnippet__RenderFunc(props: {
  variants: PlasmicSyncProjectSnippet__VariantsArgs;
  args: PlasmicSyncProjectSnippet__ArgsType;
  overrides: PlasmicSyncProjectSnippet__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSyncProjectSnippet__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <DocsCodeSnippet
            className={classNames("__wab_instance", sty.docsCodeSnippet__qLyo4)}
            language={"bash" as const}
          >
            {"plasmic sync --projects"}
          </DocsCodeSnippet>
        ),

        value: args.children,
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSyncProjectSnippet__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSyncProjectSnippet__VariantsArgs;
  args?: PlasmicSyncProjectSnippet__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSyncProjectSnippet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSyncProjectSnippet__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSyncProjectSnippet__ArgProps,
      internalVariantPropNames: PlasmicSyncProjectSnippet__VariantProps,
    });

    return PlasmicSyncProjectSnippet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSyncProjectSnippet";
  } else {
    func.displayName = `PlasmicSyncProjectSnippet.${nodeName}`;
  }
  return func;
}

export const PlasmicSyncProjectSnippet = Object.assign(
  // Top-level PlasmicSyncProjectSnippet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSyncProjectSnippet
    internalVariantProps: PlasmicSyncProjectSnippet__VariantProps,
    internalArgProps: PlasmicSyncProjectSnippet__ArgProps,
  }
);

export default PlasmicSyncProjectSnippet;
/* prettier-ignore-end */
