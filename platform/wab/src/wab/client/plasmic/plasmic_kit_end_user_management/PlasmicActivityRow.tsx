// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2dMe7XWUq916KsPnra5vYj
// Component: jfBLn3a3U6

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_end_user_management.module.css"; // plasmic-import: 2dMe7XWUq916KsPnra5vYj/projectcss
import sty from "./PlasmicActivityRow.module.css"; // plasmic-import: jfBLn3a3U6/css

import UsersvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__UserSvg"; // plasmic-import: ejczgMIkT/icon

createPlasmicElementProxy;

export type PlasmicActivityRow__VariantMembers = {
  withoutBorder: "withoutBorder";
};
export type PlasmicActivityRow__VariantsArgs = {
  withoutBorder?: SingleBooleanChoiceArg<"withoutBorder">;
};
type VariantPropType = keyof PlasmicActivityRow__VariantsArgs;
export const PlasmicActivityRow__VariantProps = new Array<VariantPropType>(
  "withoutBorder"
);

export type PlasmicActivityRow__ArgsType = {
  user?: React.ReactNode;
  status?: React.ReactNode;
  updatedAt?: React.ReactNode;
};
type ArgPropType = keyof PlasmicActivityRow__ArgsType;
export const PlasmicActivityRow__ArgProps = new Array<ArgPropType>(
  "user",
  "status",
  "updatedAt"
);

export type PlasmicActivityRow__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  columns?: p.Flex<"div">;
};

export interface DefaultActivityRowProps {
  user?: React.ReactNode;
  status?: React.ReactNode;
  updatedAt?: React.ReactNode;
  withoutBorder?: SingleBooleanChoiceArg<"withoutBorder">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicActivityRow__RenderFunc(props: {
  variants: PlasmicActivityRow__VariantsArgs;
  args: PlasmicActivityRow__ArgsType;
  overrides: PlasmicActivityRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "withoutBorder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withoutBorder,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_style_controls_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootwithoutBorder]: hasVariant(
            $state,
            "withoutBorder",
            "withoutBorder"
          ),
        }
      )}
    >
      <UsersvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div
          className={classNames(projectcss.all, sty.column__mF7Q8, {
            [sty.columnwithoutBorder__mF7Q8YPo7C]: hasVariant(
              $state,
              "withoutBorder",
              "withoutBorder"
            ),
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eySi)}>
            {p.renderPlasmicSlot({
              defaultContents: "user@plasmic.app",
              value: args.user,
              className: classNames(sty.slotTargetUser),
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jnPaY)}>
            {p.renderPlasmicSlot({
              defaultContents: "Logged in",
              value: args.status,
              className: classNames(sty.slotTargetStatus),
            })}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__h1Htb)}>
          <div className={classNames(projectcss.all, sty.freeBox__iC1)}>
            {p.renderPlasmicSlot({
              defaultContents: "5m ago",
              value: args.updatedAt,
              className: classNames(sty.slotTargetUpdatedAt),
            })}
          </div>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "columns"],
  svg: ["svg"],
  columns: ["columns"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivityRow__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivityRow__VariantsArgs;
    args?: PlasmicActivityRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivityRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivityRow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicActivityRow__ArgProps,
          internalVariantPropNames: PlasmicActivityRow__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicActivityRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivityRow";
  } else {
    func.displayName = `PlasmicActivityRow.${nodeName}`;
  }
  return func;
}

export const PlasmicActivityRow = Object.assign(
  // Top-level PlasmicActivityRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicActivityRow
    internalVariantProps: PlasmicActivityRow__VariantProps,
    internalArgProps: PlasmicActivityRow__ArgProps,
  }
);

export default PlasmicActivityRow;
/* prettier-ignore-end */
