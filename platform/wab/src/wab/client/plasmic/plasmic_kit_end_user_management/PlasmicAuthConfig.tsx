// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2dMe7XWUq916KsPnra5vYj
// Component: ratDJT6SAx

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_end_user_management.module.css"; // plasmic-import: 2dMe7XWUq916KsPnra5vYj/projectcss
import sty from "./PlasmicAuthConfig.module.css"; // plasmic-import: ratDJT6SAx/css

import GearIcon from "../plasmic_kit/PlasmicIcon__Gear"; // plasmic-import: ZmVZmXEc9f_SR/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import UserssvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__UsersSvg"; // plasmic-import: SQUWUgO0N/icon

createPlasmicElementProxy;

export type PlasmicAuthConfig__VariantMembers = {};
export type PlasmicAuthConfig__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuthConfig__VariantsArgs;
export const PlasmicAuthConfig__VariantProps = new Array<VariantPropType>();

export type PlasmicAuthConfig__ArgsType = {
  children?: React.ReactNode;
  selected?: string;
};
type ArgPropType = keyof PlasmicAuthConfig__ArgsType;
export const PlasmicAuthConfig__ArgProps = new Array<ArgPropType>(
  "children",
  "selected"
);

export type PlasmicAuthConfig__OverridesType = {
  root?: p.Flex<"div">;
  gearIcon?: p.Flex<typeof IconButton>;
  closeIcon?: p.Flex<typeof IconButton>;
};

export interface DefaultAuthConfigProps {
  children?: React.ReactNode;
  selected?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAuthConfig__RenderFunc(props: {
  variants: PlasmicAuthConfig__VariantsArgs;
  args: PlasmicAuthConfig__ArgsType;
  overrides: PlasmicAuthConfig__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selected: "permissions" as const,
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_style_controls_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__uhnCt)}>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6V7Vy)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Okys)}
                >
                  <UserssvgIcon
                    className={classNames(projectcss.all, sty.svg__mmDs)}
                    role={"img"}
                  />
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__v1Vh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bpYhI
                    )}
                  >
                    {"Authentication"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ipbcz
                    )}
                  >
                    {"Configure how users login to your app"}
                  </div>
                </div>
              ) : null}
              <IconButton
                data-plasmic-name={"gearIcon"}
                data-plasmic-override={overrides.gearIcon}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__s2FEd)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.gearIcon)}
              >
                <GearIcon
                  className={classNames(projectcss.all, sty.svg__uFlKb)}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"closeIcon"}
                data-plasmic-override={overrides.closeIcon}
                children2={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__btrAi)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.closeIcon)}
              >
                <ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__pj7NT)}
                  role={"img"}
                />
              </IconButton>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: null,
        value: args.children,
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "gearIcon", "closeIcon"],
  gearIcon: ["gearIcon"],
  closeIcon: ["closeIcon"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  gearIcon: typeof IconButton;
  closeIcon: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthConfig__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthConfig__VariantsArgs;
    args?: PlasmicAuthConfig__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthConfig__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthConfig__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthConfig__ArgProps,
          internalVariantPropNames: PlasmicAuthConfig__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicAuthConfig__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthConfig";
  } else {
    func.displayName = `PlasmicAuthConfig.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthConfig = Object.assign(
  // Top-level PlasmicAuthConfig renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    gearIcon: makeNodeComponent("gearIcon"),
    closeIcon: makeNodeComponent("closeIcon"),

    // Metadata about props expected for PlasmicAuthConfig
    internalVariantProps: PlasmicAuthConfig__VariantProps,
    internalArgProps: PlasmicAuthConfig__ArgProps,
  }
);

export default PlasmicAuthConfig;
/* prettier-ignore-end */
