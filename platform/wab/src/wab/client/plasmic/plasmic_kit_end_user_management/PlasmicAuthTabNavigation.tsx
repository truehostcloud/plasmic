// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2dMe7XWUq916KsPnra5vYj
// Component: 1lRaedKrFR

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_end_user_management.module.css"; // plasmic-import: 2dMe7XWUq916KsPnra5vYj/projectcss
import sty from "./PlasmicAuthTabNavigation.module.css"; // plasmic-import: 1lRaedKrFR/css

createPlasmicElementProxy;

export type PlasmicAuthTabNavigation__VariantMembers = {
  selected: "permissions" | "settings" | "activity";
};
export type PlasmicAuthTabNavigation__VariantsArgs = {
  selected?: SingleChoiceArg<"permissions" | "settings" | "activity">;
};
type VariantPropType = keyof PlasmicAuthTabNavigation__VariantsArgs;
export const PlasmicAuthTabNavigation__VariantProps =
  new Array<VariantPropType>("selected");

export type PlasmicAuthTabNavigation__ArgsType = {};
type ArgPropType = keyof PlasmicAuthTabNavigation__ArgsType;
export const PlasmicAuthTabNavigation__ArgProps = new Array<ArgPropType>();

export type PlasmicAuthTabNavigation__OverridesType = {
  root?: p.Flex<"div">;
  permissions?: p.Flex<"div">;
  settings?: p.Flex<"div">;
  activity?: p.Flex<"div">;
};

export interface DefaultAuthTabNavigationProps {
  selected?: SingleChoiceArg<"permissions" | "settings" | "activity">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAuthTabNavigation__RenderFunc(props: {
  variants: PlasmicAuthTabNavigation__VariantsArgs;
  args: PlasmicAuthTabNavigation__ArgsType;
  overrides: PlasmicAuthTabNavigation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_style_controls_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"permissions"}
        data-plasmic-override={overrides.permissions}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.permissions,
          {
            [sty.permissionsselected_permissions]: hasVariant(
              $state,
              "selected",
              "permissions"
            ),
          }
        )}
      >
        {"Permissions"}
      </div>
      <div
        data-plasmic-name={"settings"}
        data-plasmic-override={overrides.settings}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.settings,
          {
            [sty.settingsselected_settings]: hasVariant(
              $state,
              "selected",
              "settings"
            ),
          }
        )}
      >
        {"Settings"}
      </div>
      <div
        data-plasmic-name={"activity"}
        data-plasmic-override={overrides.activity}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.activity,
          {
            [sty.activityselected_activity]: hasVariant(
              $state,
              "selected",
              "activity"
            ),
            [sty.activityselected_settings]: hasVariant(
              $state,
              "selected",
              "settings"
            ),
          }
        )}
      >
        {"Activity"}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "permissions", "settings", "activity"],
  permissions: ["permissions"],
  settings: ["settings"],
  activity: ["activity"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  permissions: "div";
  settings: "div";
  activity: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthTabNavigation__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthTabNavigation__VariantsArgs;
    args?: PlasmicAuthTabNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthTabNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthTabNavigation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthTabNavigation__ArgProps,
          internalVariantPropNames: PlasmicAuthTabNavigation__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicAuthTabNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthTabNavigation";
  } else {
    func.displayName = `PlasmicAuthTabNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthTabNavigation = Object.assign(
  // Top-level PlasmicAuthTabNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    permissions: makeNodeComponent("permissions"),
    settings: makeNodeComponent("settings"),
    activity: makeNodeComponent("activity"),

    // Metadata about props expected for PlasmicAuthTabNavigation
    internalVariantProps: PlasmicAuthTabNavigation__VariantProps,
    internalArgProps: PlasmicAuthTabNavigation__ArgProps,
  }
);

export default PlasmicAuthTabNavigation;
/* prettier-ignore-end */
