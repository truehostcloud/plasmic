// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2dMe7XWUq916KsPnra5vYj
// Component: OKf_hhc2Skl

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useTrigger,
} from "@plasmicapp/react-web";
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_end_user_management.module.css"; // plasmic-import: 2dMe7XWUq916KsPnra5vYj/projectcss
import sty from "./PlasmicPermissionRule.module.css"; // plasmic-import: OKf_hhc2Skl/css

import LockIcon from "../plasmic_kit_design_system/PlasmicIcon__Lock"; // plasmic-import: xWjo2JPAc6/icon
import InformationsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__InformationSvg"; // plasmic-import: hqBNVBJWB/icon
import PlussvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import UserssvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__UsersSvg"; // plasmic-import: SQUWUgO0N/icon
import UsersvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__UserSvg"; // plasmic-import: ejczgMIkT/icon

createPlasmicElementProxy;

export type PlasmicPermissionRule__VariantMembers = {
  isGroup: "isGroup";
  hasMenu: "hasMenu";
  withoutBorder: "withoutBorder";
  isGeneralAccess: "isGeneralAccess";
};
export type PlasmicPermissionRule__VariantsArgs = {
  isGroup?: SingleBooleanChoiceArg<"isGroup">;
  hasMenu?: SingleBooleanChoiceArg<"hasMenu">;
  withoutBorder?: SingleBooleanChoiceArg<"withoutBorder">;
  isGeneralAccess?: SingleBooleanChoiceArg<"isGeneralAccess">;
};
type VariantPropType = keyof PlasmicPermissionRule__VariantsArgs;
export const PlasmicPermissionRule__VariantProps = new Array<VariantPropType>(
  "isGroup",
  "hasMenu",
  "withoutBorder",
  "isGeneralAccess"
);

export type PlasmicPermissionRule__ArgsType = {
  ruleName?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPermissionRule__ArgsType;
export const PlasmicPermissionRule__ArgProps = new Array<ArgPropType>(
  "ruleName"
);

export type PlasmicPermissionRule__OverridesType = {
  root?: p.Flex<"div">;
  infoIcon?: p.Flex<"svg">;
  permissionSelect?: p.Flex<typeof Select>;
  menuBtn?: p.Flex<typeof MenuButton>;
};

export interface DefaultPermissionRuleProps {
  ruleName?: React.ReactNode;
  isGroup?: SingleBooleanChoiceArg<"isGroup">;
  hasMenu?: SingleBooleanChoiceArg<"hasMenu">;
  withoutBorder?: SingleBooleanChoiceArg<"withoutBorder">;
  isGeneralAccess?: SingleBooleanChoiceArg<"isGeneralAccess">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPermissionRule__RenderFunc(props: {
  variants: PlasmicPermissionRule__VariantsArgs;
  args: PlasmicPermissionRule__ArgsType;
  overrides: PlasmicPermissionRule__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isGroup",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isGroup,
      },
      {
        path: "hasMenu",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasMenu,
      },
      {
        path: "withoutBorder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withoutBorder,
      },
      {
        path: "isGeneralAccess",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.isGeneralAccess,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_style_controls_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
          [sty.rootisGeneralAccess]: hasVariant(
            $state,
            "isGeneralAccess",
            "isGeneralAccess"
          ),
          [sty.rootisGroup]: hasVariant($state, "isGroup", "isGroup"),
          [sty.rootwithoutBorder]: hasVariant(
            $state,
            "withoutBorder",
            "withoutBorder"
          ),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        className={classNames(projectcss.all, sty.column__jfo1K, {
          [sty.columnhasMenu__jfo1K8Gjcf]: hasVariant(
            $state,
            "hasMenu",
            "hasMenu"
          ),
          [sty.columnisGeneralAccess__jfo1K2XHMe]: hasVariant(
            $state,
            "isGeneralAccess",
            "isGeneralAccess"
          ),
          [sty.columnwithoutBorder__jfo1Kk0M9C]: hasVariant(
            $state,
            "withoutBorder",
            "withoutBorder"
          ),
        })}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xxViF)}
          >
            <p.PlasmicIcon
              PlasmicIconType={
                hasVariant($state, "isGeneralAccess", "isGeneralAccess")
                  ? LockIcon
                  : hasVariant($state, "isGroup", "isGroup")
                  ? UserssvgIcon
                  : UsersvgIcon
              }
              className={classNames(projectcss.all, sty.svg__hcvJq, {
                [sty.svgisGeneralAccess__hcvJq2XHMe]: hasVariant(
                  $state,
                  "isGeneralAccess",
                  "isGeneralAccess"
                ),
                [sty.svgisGroup__hcvJqX7CpY]: hasVariant(
                  $state,
                  "isGroup",
                  "isGroup"
                ),
              })}
              role={"img"}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__j4Sj, {
                [sty.freeBoxisGeneralAccess__j4Sj2XHMe]: hasVariant(
                  $state,
                  "isGeneralAccess",
                  "isGeneralAccess"
                ),
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Anonymous visitors",
                value: args.ruleName,
                className: classNames(sty.slotTargetRuleName),
              })}
              {(
                hasVariant($state, "isGeneralAccess", "isGeneralAccess")
                  ? true
                  : true
              ) ? (
                <InformationsvgIcon
                  data-plasmic-name={"infoIcon"}
                  data-plasmic-override={overrides.infoIcon}
                  className={classNames(projectcss.all, sty.infoIcon, {
                    [sty.infoIconisGeneralAccess]: hasVariant(
                      $state,
                      "isGeneralAccess",
                      "isGeneralAccess"
                    ),
                  })}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
        ) : null}
      </div>
      <div
        className={classNames(projectcss.all, sty.column__ab9P, {
          [sty.columnhasMenu__ab9P8Gjcf]: hasVariant(
            $state,
            "hasMenu",
            "hasMenu"
          ),
        })}
      >
        {(hasVariant($state, "hasMenu", "hasMenu") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__e95EI, {
              [sty.freeBoxhasMenu__e95EI8Gjcf]: hasVariant(
                $state,
                "hasMenu",
                "hasMenu"
              ),
            })}
          >
            <Select
              data-plasmic-name={"permissionSelect"}
              data-plasmic-override={overrides.permissionSelect}
              className={classNames("__wab_instance", sty.permissionSelect, {
                [sty.permissionSelecthasMenu]: hasVariant(
                  $state,
                  "hasMenu",
                  "hasMenu"
                ),
                [sty.permissionSelectisGeneralAccess]: hasVariant(
                  $state,
                  "isGeneralAccess",
                  "isGeneralAccess"
                ),
                [sty.permissionSelectisGroup]: hasVariant(
                  $state,
                  "isGroup",
                  "isGroup"
                ),
                [sty.permissionSelectwithoutBorder]: hasVariant(
                  $state,
                  "withoutBorder",
                  "withoutBorder"
                ),
              })}
              icon={
                <PlussvgIcon
                  className={classNames(projectcss.all, sty.svg__boPRj)}
                  role={"img"}
                />
              }
              size={"small" as const}
              type={
                hasVariant($state, "isGroup", "isGroup")
                  ? ("seamless" as const)
                  : ("seamless" as const)
              }
            />

            {(
              hasVariant($state, "hasMenu", "hasMenu") && triggers.hover_root
                ? true
                : hasVariant($state, "hasMenu", "hasMenu")
                ? true
                : true
            ) ? (
              <MenuButton
                data-plasmic-name={"menuBtn"}
                data-plasmic-override={overrides.menuBtn}
                className={classNames("__wab_instance", sty.menuBtn, {
                  [sty.menuBtnhasMenu]: hasVariant(
                    $state,
                    "hasMenu",
                    "hasMenu"
                  ),
                })}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "infoIcon", "permissionSelect", "menuBtn"],
  infoIcon: ["infoIcon"],
  permissionSelect: ["permissionSelect"],
  menuBtn: ["menuBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  infoIcon: "svg";
  permissionSelect: typeof Select;
  menuBtn: typeof MenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPermissionRule__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPermissionRule__VariantsArgs;
    args?: PlasmicPermissionRule__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPermissionRule__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPermissionRule__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPermissionRule__ArgProps,
          internalVariantPropNames: PlasmicPermissionRule__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPermissionRule__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPermissionRule";
  } else {
    func.displayName = `PlasmicPermissionRule.${nodeName}`;
  }
  return func;
}

export const PlasmicPermissionRule = Object.assign(
  // Top-level PlasmicPermissionRule renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    infoIcon: makeNodeComponent("infoIcon"),
    permissionSelect: makeNodeComponent("permissionSelect"),
    menuBtn: makeNodeComponent("menuBtn"),

    // Metadata about props expected for PlasmicPermissionRule
    internalVariantProps: PlasmicPermissionRule__VariantProps,
    internalArgProps: PlasmicPermissionRule__ArgProps,
  }
);

export default PlasmicPermissionRule;
/* prettier-ignore-end */
