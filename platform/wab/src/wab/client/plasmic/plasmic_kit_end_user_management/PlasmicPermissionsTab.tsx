// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2dMe7XWUq916KsPnra5vYj
// Component: W_Uez__b5a-

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import PermissionRule from "../../components/app-auth/PermissionRule"; // plasmic-import: OKf_hhc2Skl/component
import PermissionRuleGroup from "../../components/app-auth/PermissionRuleGroup"; // plasmic-import: 7jCYJVNv9q/component
import StyleCheckbox from "../../components/style-controls/StyleCheckbox"; // plasmic-import: nZHA7E5OiTx/component
import StyleSelect from "../../components/style-controls/StyleSelect"; // plasmic-import: E0bKgamUEin/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_end_user_management.module.css"; // plasmic-import: 2dMe7XWUq916KsPnra5vYj/projectcss
import sty from "./PlasmicPermissionsTab.module.css"; // plasmic-import: W_Uez__b5a-/css

import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicPermissionsTab__VariantMembers = {};
export type PlasmicPermissionsTab__VariantsArgs = {};
type VariantPropType = keyof PlasmicPermissionsTab__VariantsArgs;
export const PlasmicPermissionsTab__VariantProps = new Array<VariantPropType>();

export type PlasmicPermissionsTab__ArgsType = {};
type ArgPropType = keyof PlasmicPermissionsTab__ArgsType;
export const PlasmicPermissionsTab__ArgProps = new Array<ArgPropType>();

export type PlasmicPermissionsTab__OverridesType = {
  root?: p.Flex<"div">;
  form?: p.Flex<"form">;
  notifyCheckbox?: p.Flex<typeof StyleCheckbox>;
  input?: p.Flex<typeof Textbox>;
  roleSelect?: p.Flex<typeof StyleSelect>;
  addBtn?: p.Flex<typeof IconButton>;
  columns?: p.Flex<"div">;
  mainRules?: p.Flex<typeof PermissionRuleGroup>;
};

export interface DefaultPermissionsTabProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPermissionsTab__RenderFunc(props: {
  variants: PlasmicPermissionsTab__VariantsArgs;
  args: PlasmicPermissionsTab__ArgsType;
  overrides: PlasmicPermissionsTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_style_controls_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zZaCn)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___71ZHi
          )}
        >
          {"Who can log in?"}
        </div>
      </div>
      <p.Stack
        as={"form"}
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        hasGap={true}
        className={classNames(projectcss.all, sty.form)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__nW6I)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kDdP0
              )}
            >
              {"Enter an email, a @domain.com, or a group name"}
            </div>
            <StyleCheckbox
              data-plasmic-name={"notifyCheckbox"}
              data-plasmic-override={overrides.notifyCheckbox}
              className={classNames("__wab_instance", sty.notifyCheckbox)}
            >
              {"Notify users"}
            </StyleCheckbox>
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5SwlD)}
          >
            <Textbox
              data-plasmic-name={"input"}
              data-plasmic-override={overrides.input}
              className={classNames("__wab_instance", sty.input)}
              placeholder={"Add people, groups or @domains..." as const}
              prefixIcon={
                <SearchsvgIcon
                  className={classNames(projectcss.all, sty.svg__yfl01)}
                  role={"img"}
                />
              }
              styleType={["gray"]}
              suffixIcon={
                <ClosesvgIcon
                  className={classNames(projectcss.all, sty.svg__okLgH)}
                  role={"img"}
                />
              }
              withIcons={["withPrefix"]}
            />

            <StyleSelect
              data-plasmic-name={"roleSelect"}
              data-plasmic-override={overrides.roleSelect}
              className={classNames("__wab_instance", sty.roleSelect)}
              placeholder={"Role"}
              valueSetState={"isSet" as const}
            />

            <IconButton
              data-plasmic-name={"addBtn"}
              data-plasmic-override={overrides.addBtn}
              children2={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__pbIrE)}
                  role={"img"}
                />
              }
              className={classNames("__wab_instance", sty.addBtn)}
              type={["primary"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qQqcQ
                )}
              >
                {"Add"}
              </div>
            </IconButton>
          </p.Stack>
        ) : null}
      </p.Stack>
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__h9QS)}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__hc3GY)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__saiUl
                )}
              >
                {"User or group"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__o7NGs)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yiZe
                )}
              >
                {"Role"}
              </div>
            </div>
          </div>
          {true ? (
            <PermissionRuleGroup
              data-plasmic-name={"mainRules"}
              data-plasmic-override={overrides.mainRules}
              className={classNames("__wab_instance", sty.mainRules)}
            >
              <PermissionRule
                className={classNames(
                  "__wab_instance",
                  sty.permissionRule___83YDq
                )}
                isGroup={true}
                ruleName={"Anyone @plasmic.app"}
              />

              <PermissionRule
                className={classNames(
                  "__wab_instance",
                  sty.permissionRule___1HzCo
                )}
                hasMenu={true}
                isGroup={true}
                ruleName={"Anyone @plasmic.dev"}
              />

              <PermissionRule
                className={classNames(
                  "__wab_instance",
                  sty.permissionRule___1YHz
                )}
                hasMenu={true}
                isGroup={true}
                ruleName={"Group Admin"}
              />

              <PermissionRule
                className={classNames(
                  "__wab_instance",
                  sty.permissionRule__zRPqd
                )}
                hasMenu={true}
                ruleName={"user@plasmic.app"}
              />

              <PermissionRule
                className={classNames(
                  "__wab_instance",
                  sty.permissionRule__tcGvk
                )}
                isGeneralAccess={true}
                ruleName={"General Access"}
                withoutBorder={true}
              />
            </PermissionRuleGroup>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "notifyCheckbox",
    "input",
    "roleSelect",
    "addBtn",
    "columns",
    "mainRules",
  ],

  form: ["form", "notifyCheckbox", "input", "roleSelect", "addBtn"],
  notifyCheckbox: ["notifyCheckbox"],
  input: ["input"],
  roleSelect: ["roleSelect"],
  addBtn: ["addBtn"],
  columns: ["columns"],
  mainRules: ["mainRules"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "form";
  notifyCheckbox: typeof StyleCheckbox;
  input: typeof Textbox;
  roleSelect: typeof StyleSelect;
  addBtn: typeof IconButton;
  columns: "div";
  mainRules: typeof PermissionRuleGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPermissionsTab__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPermissionsTab__VariantsArgs;
    args?: PlasmicPermissionsTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPermissionsTab__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPermissionsTab__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPermissionsTab__ArgProps,
          internalVariantPropNames: PlasmicPermissionsTab__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPermissionsTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPermissionsTab";
  } else {
    func.displayName = `PlasmicPermissionsTab.${nodeName}`;
  }
  return func;
}

export const PlasmicPermissionsTab = Object.assign(
  // Top-level PlasmicPermissionsTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    notifyCheckbox: makeNodeComponent("notifyCheckbox"),
    input: makeNodeComponent("input"),
    roleSelect: makeNodeComponent("roleSelect"),
    addBtn: makeNodeComponent("addBtn"),
    columns: makeNodeComponent("columns"),
    mainRules: makeNodeComponent("mainRules"),

    // Metadata about props expected for PlasmicPermissionsTab
    internalVariantProps: PlasmicPermissionsTab__VariantProps,
    internalArgProps: PlasmicPermissionsTab__ArgProps,
  }
);

export default PlasmicPermissionsTab;
/* prettier-ignore-end */
