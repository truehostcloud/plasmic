// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2dMe7XWUq916KsPnra5vYj
// Component: FvbTyDpXOYV

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import RedirectUriRow from "../../components/app-auth/RedirectUriRow"; // plasmic-import: Wx1WB4BUap/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_end_user_management.module.css"; // plasmic-import: 2dMe7XWUq916KsPnra5vYj/projectcss
import sty from "./PlasmicRedirectUrIsControl.module.css"; // plasmic-import: FvbTyDpXOYV/css

import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlussvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicRedirectUrIsControl__VariantMembers = {};
export type PlasmicRedirectUrIsControl__VariantsArgs = {};
type VariantPropType = keyof PlasmicRedirectUrIsControl__VariantsArgs;
export const PlasmicRedirectUrIsControl__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRedirectUrIsControl__ArgsType = {
  uris?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRedirectUrIsControl__ArgsType;
export const PlasmicRedirectUrIsControl__ArgProps = new Array<ArgPropType>(
  "uris"
);

export type PlasmicRedirectUrIsControl__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  redirectsLabel?: p.Flex<"div">;
  saveBtn?: p.Flex<typeof Button>;
  addBtn?: p.Flex<typeof IconButton>;
};

export interface DefaultRedirectUrIsControlProps {
  uris?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRedirectUrIsControl__RenderFunc(props: {
  variants: PlasmicRedirectUrIsControl__VariantsArgs;
  args: PlasmicRedirectUrIsControl__ArgsType;
  overrides: PlasmicRedirectUrIsControl__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_style_controls_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__vp43W)}>
          <div
            data-plasmic-name={"redirectsLabel"}
            data-plasmic-override={overrides.redirectsLabel}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.redirectsLabel
            )}
          >
            {"Redirect URIs"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__nsFLe)}>
          <Button
            data-plasmic-name={"saveBtn"}
            data-plasmic-override={overrides.saveBtn}
            className={classNames("__wab_instance", sty.saveBtn)}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__qmGoV)}
                role={"img"}
              />
            }
            size={"wide" as const}
            startIcon={
              <ArrowRightsvgIcon
                className={classNames(projectcss.all, sty.svg__txmU)}
                role={"img"}
              />
            }
          >
            {"Save"}
          </Button>
        </div>
        <div className={classNames(projectcss.all, sty.column__zTZy)}>
          <IconButton
            data-plasmic-name={"addBtn"}
            data-plasmic-override={overrides.addBtn}
            children2={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__gjmZl)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.addBtn)}
          >
            <PlussvgIcon
              className={classNames(projectcss.all, sty.svg__dLtG2)}
              role={"img"}
            />
          </IconButton>
        </div>
      </div>
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <RedirectUriRow
              className={classNames(
                "__wab_instance",
                sty.redirectUriRow___6FCp
              )}
            />

            <RedirectUriRow
              className={classNames("__wab_instance", sty.redirectUriRow__xx7V)}
            />
          </React.Fragment>
        ),

        value: args.uris,
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "redirectsLabel", "saveBtn", "addBtn"],
  columns: ["columns", "redirectsLabel", "saveBtn", "addBtn"],
  redirectsLabel: ["redirectsLabel"],
  saveBtn: ["saveBtn"],
  addBtn: ["addBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  redirectsLabel: "div";
  saveBtn: typeof Button;
  addBtn: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRedirectUrIsControl__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRedirectUrIsControl__VariantsArgs;
    args?: PlasmicRedirectUrIsControl__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRedirectUrIsControl__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRedirectUrIsControl__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRedirectUrIsControl__ArgProps,
          internalVariantPropNames: PlasmicRedirectUrIsControl__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicRedirectUrIsControl__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRedirectUrIsControl";
  } else {
    func.displayName = `PlasmicRedirectUrIsControl.${nodeName}`;
  }
  return func;
}

export const PlasmicRedirectUrIsControl = Object.assign(
  // Top-level PlasmicRedirectUrIsControl renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    redirectsLabel: makeNodeComponent("redirectsLabel"),
    saveBtn: makeNodeComponent("saveBtn"),
    addBtn: makeNodeComponent("addBtn"),

    // Metadata about props expected for PlasmicRedirectUrIsControl
    internalVariantProps: PlasmicRedirectUrIsControl__VariantProps,
    internalArgProps: PlasmicRedirectUrIsControl__ArgProps,
  }
);

export default PlasmicRedirectUrIsControl;
/* prettier-ignore-end */
