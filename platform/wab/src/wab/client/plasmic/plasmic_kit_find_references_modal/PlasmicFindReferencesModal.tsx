// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oB885NJtg5rwT11s7yCnwW
// Component: YWyR9ESU0CU
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import ReferenceItem from "../../components/sidebar/ReferenceItem"; // plasmic-import: i-BferDjrAl/component
import sty from "./PlasmicFindReferencesModal.module.css"; // plasmic-import: YWyR9ESU0CU/css
import projectcss from "./plasmic_plasmic_kit_find_references_modal.module.css"; // plasmic-import: oB885NJtg5rwT11s7yCnwW/projectcss

export type PlasmicFindReferencesModal__VariantMembers = {};

export type PlasmicFindReferencesModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicFindReferencesModal__VariantsArgs;
export const PlasmicFindReferencesModal__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFindReferencesModal__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFindReferencesModal__ArgsType;
export const PlasmicFindReferencesModal__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicFindReferencesModal__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultFindReferencesModalProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicFindReferencesModal__RenderFunc(props: {
  variants: PlasmicFindReferencesModal__VariantsArgs;
  args: PlasmicFindReferencesModal__ArgsType;
  overrides: PlasmicFindReferencesModal__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__wCs9F
                )}
                selected={true}
                type={"page" as const}
              >
                {"Page"}
              </ReferenceItem>

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__neR8
                )}
                type={"page" as const}
              >
                {"Page 2"}
              </ReferenceItem>

              <ListSectionSeparator
                center={true}
                className={classNames(
                  "__wab_instance",
                  sty.listSectionSeparator__fzv6I
                )}
              />

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__vzlUr
                )}
                type={"component" as const}
              >
                {"Component"}
              </ReferenceItem>

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__zvn0M
                )}
                type={"component" as const}
              >
                {"Component 2"}
              </ReferenceItem>

              <ListSectionSeparator
                center={true}
                className={classNames(
                  "__wab_instance",
                  sty.listSectionSeparator__ovwDe
                )}
              />

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__hoMjp
                )}
                type={"token" as const}
              >
                {"Token"}
              </ReferenceItem>

              <ListSectionSeparator
                center={true}
                className={classNames(
                  "__wab_instance",
                  sty.listSectionSeparator__hxJsm
                )}
              />

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__nvqG7
                )}
                type={"mixin" as const}
              >
                {"Mixin"}
              </ReferenceItem>

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__llpa3
                )}
                type={"mixin" as const}
              >
                {"Mixin 2"}
              </ReferenceItem>

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__fZfrj
                )}
                type={"mixin" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jtGud
                  )}
                >
                  {"Mixin 3"}
                </div>
              </ReferenceItem>

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__gaIcX
                )}
                type={"mixin" as const}
              >
                {"Mixin 4"}
              </ReferenceItem>

              <ListSectionSeparator
                center={true}
                className={classNames(
                  "__wab_instance",
                  sty.listSectionSeparator___67Frw
                )}
              />

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__ohg1X
                )}
                type={"theme" as const}
              >
                {"Theme"}
              </ReferenceItem>

              <ListSectionSeparator
                center={true}
                className={classNames(
                  "__wab_instance",
                  sty.listSectionSeparator__lHr48
                )}
              />

              <ReferenceItem
                className={classNames(
                  "__wab_instance",
                  sty.referenceItem__l6IUh
                )}
                type={"preset" as const}
              >
                {"Preset"}
              </ReferenceItem>
            </React.Fragment>
          ),

          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFindReferencesModal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicFindReferencesModal__VariantsArgs;
  args?: PlasmicFindReferencesModal__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicFindReferencesModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicFindReferencesModal__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFindReferencesModal__ArgProps,
      internalVariantPropNames: PlasmicFindReferencesModal__VariantProps,
    });

    return PlasmicFindReferencesModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFindReferencesModal";
  } else {
    func.displayName = `PlasmicFindReferencesModal.${nodeName}`;
  }
  return func;
}

export const PlasmicFindReferencesModal = Object.assign(
  // Top-level PlasmicFindReferencesModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFindReferencesModal
    internalVariantProps: PlasmicFindReferencesModal__VariantProps,
    internalArgProps: PlasmicFindReferencesModal__ArgProps,
  }
);

export default PlasmicFindReferencesModal;
/* prettier-ignore-end */
