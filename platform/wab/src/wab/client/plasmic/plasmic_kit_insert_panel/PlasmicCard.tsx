// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4B48dRthR8uGgyaBYpWthR
// Component: qqXViGcFWb

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ActionMenuButton from "../../components/widgets/ActionMenuButton"; // plasmic-import: VNi6NC2QOI/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: qqXViGcFWb/css
import projectcss from "./plasmic_plasmic_kit_insert_panel.module.css"; // plasmic-import: 4B48dRthR8uGgyaBYpWthR/projectcss

import AfterIcon from "../plasmic_kit/PlasmicIcon__After"; // plasmic-import: yzAFS1IyVvChx/icon
import BeforeIcon from "../plasmic_kit/PlasmicIcon__Before"; // plasmic-import: VU26fT14NQttw/icon
import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon

createPlasmicElementProxy;

export type PlasmicCard__VariantMembers = {};
export type PlasmicCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicCard__VariantsArgs;
export const PlasmicCard__VariantProps = new Array<VariantPropType>();

export type PlasmicCard__ArgsType = {
  imageUrl?: React.ComponentProps<typeof PlasmicImg__>["src"];
};
type ArgPropType = keyof PlasmicCard__ArgsType;
export const PlasmicCard__ArgProps = new Array<ArgPropType>("imageUrl");

export type PlasmicCard__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  actions?: Flex__<"div">;
  overlayBackground?: Flex__<"div">;
  text?: Flex__<"div">;
  actionMenuButton?: Flex__<typeof ActionMenuButton>;
};

export interface DefaultCardProps {
  imageUrl?: React.ComponentProps<typeof PlasmicImg__>["src"];
  className?: string;
}

const $$ = {};

function PlasmicCard__RenderFunc(props: {
  variants: PlasmicCard__VariantsArgs;
  args: PlasmicCard__ArgsType;
  overrides: PlasmicCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    active_root: isRootActive,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootActiveProps]}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__ydQqe)}
        style={
          triggers.active_root
            ? (() => {
                try {
                  return { cursor: "grabbing" };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return { cursor: "grab" };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={args.imageUrl}
        />

        <div
          data-plasmic-name={"actions"}
          data-plasmic-override={overrides.actions}
          className={classNames(projectcss.all, sty.actions)}
        >
          <div
            data-plasmic-name={"overlayBackground"}
            data-plasmic-override={overrides.overlayBackground}
            className={classNames(projectcss.all, sty.overlayBackground)}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Insert component"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yIvsa)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__qotwg)}
              pointerCursor={true}
              startIcon={
                <BeforeIcon
                  className={classNames(projectcss.all, sty.svg__hjKoR)}
                  role={"img"}
                />
              }
              type={["secondary"]}
              withIcons={["startIcon"]}
            >
              {"Before"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__oRkMq)}
              pointerCursor={true}
              startIcon={
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__gTDeQ)}
                  role={"img"}
                />
              }
              type={["secondary"]}
              withIcons={["startIcon"]}
            >
              {"Inside"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__aJGv9)}
              pointerCursor={true}
              startIcon={
                <AfterIcon
                  className={classNames(projectcss.all, sty.svg__aKTt)}
                  role={"img"}
                />
              }
              type={["secondary"]}
              withIcons={["startIcon"]}
            >
              {"After"}
            </Button>
          </Stack__>
          <ActionMenuButton
            data-plasmic-name={"actionMenuButton"}
            data-plasmic-override={overrides.actionMenuButton}
            className={classNames("__wab_instance", sty.actionMenuButton)}
            hasIcon={true}
            size={"small"}
            type={[]}
          >
            {"Insert"}
          </ActionMenuButton>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "actions",
    "overlayBackground",
    "text",
    "actionMenuButton",
  ],

  img: ["img"],
  actions: ["actions", "overlayBackground", "text", "actionMenuButton"],
  overlayBackground: ["overlayBackground"],
  text: ["text"],
  actionMenuButton: ["actionMenuButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  actions: "div";
  overlayBackground: "div";
  text: "div";
  actionMenuButton: typeof ActionMenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCard__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCard__VariantsArgs;
    args?: PlasmicCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    actions: makeNodeComponent("actions"),
    overlayBackground: makeNodeComponent("overlayBackground"),
    text: makeNodeComponent("text"),
    actionMenuButton: makeNodeComponent("actionMenuButton"),

    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps,
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
