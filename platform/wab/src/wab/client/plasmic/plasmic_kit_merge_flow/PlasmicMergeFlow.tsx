// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p8FkKgCnyuat1kHSEYAKfW
// Component: A4VINgKjc8

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Conflict from "../../components/merge/Conflict"; // plasmic-import: RM-Ya_c-mv/component
import LineItem from "../../components/merge/LineItem"; // plasmic-import: VgvN9iOqwZ/component
import Switch from "../../components/merge/Switch"; // plasmic-import: AJepyKzS-T-/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_merge_flow.module.css"; // plasmic-import: p8FkKgCnyuat1kHSEYAKfW/projectcss
import sty from "./PlasmicMergeFlow.module.css"; // plasmic-import: A4VINgKjc8/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: b32FQsRIZF/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: eV4_yyuiy3/icon
import CloseIcon from "./icons/PlasmicIcon__Close"; // plasmic-import: YCOFZmA9Gr/icon
import FramePlusIcon from "./icons/PlasmicIcon__FramePlus"; // plasmic-import: 9_qXsh2_0/icon
import plusCnRm3QpPqQ from "./images/plus.svg"; // plasmic-import: CnRm3QPPqQ/picture
import treeV2EVpmODo from "./images/tree.svg"; // plasmic-import: v2eVPM-oDO/picture

createPlasmicElementProxy;

export type PlasmicMergeFlow__VariantMembers = {
  empty: "empty";
  loading: "loading";
  blocked: "blocked";
};
export type PlasmicMergeFlow__VariantsArgs = {
  empty?: SingleBooleanChoiceArg<"empty">;
  loading?: SingleBooleanChoiceArg<"loading">;
  blocked?: SingleBooleanChoiceArg<"blocked">;
};
type VariantPropType = keyof PlasmicMergeFlow__VariantsArgs;
export const PlasmicMergeFlow__VariantProps = new Array<VariantPropType>(
  "empty",
  "loading",
  "blocked"
);

export type PlasmicMergeFlow__ArgsType = {};
type ArgPropType = keyof PlasmicMergeFlow__ArgsType;
export const PlasmicMergeFlow__ArgProps = new Array<ArgPropType>();

export type PlasmicMergeFlow__OverridesType = {
  root?: Flex__<"div">;
  reviewAndMergeBranch?: Flex__<"div">;
  frame8?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame1864?: Flex__<"div">;
  button?: Flex__<"div">;
  startIconsContainer?: Flex__<"div">;
  labelsContainer?: Flex__<"div">;
  labelText?: Flex__<"div">;
  label?: Flex__<"div">;
  labelIconsContainer?: Flex__<"div">;
  endIconsContainer?: Flex__<"div">;
  button2?: Flex__<"div">;
  startIconsContainer2?: Flex__<"div">;
  labelsContainer2?: Flex__<"div">;
  labelText2?: Flex__<"div">;
  label2?: Flex__<"div">;
  labelIconsContainer2?: Flex__<"div">;
  endIconsContainer2?: Flex__<"div">;
  frame1863?: Flex__<"div">;
  sourceBranchChanges?: Flex__<"button">;
  startIconsContainer3?: Flex__<"div">;
  labelsContainer3?: Flex__<"div">;
  labelText3?: Flex__<"div">;
  label3?: Flex__<"div">;
  labelIconsContainer3?: Flex__<"div">;
  endIconsContainer3?: Flex__<"div">;
  destinationBranchChanges?: Flex__<"button">;
  startIconsContainer4?: Flex__<"div">;
  labelsContainer4?: Flex__<"div">;
  labelText4?: Flex__<"div">;
  label4?: Flex__<"div">;
  labelIconsContainer4?: Flex__<"div">;
  endIconsContainer4?: Flex__<"div">;
  dividerSeparator?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame1857?: Flex__<"div">;
  button5?: Flex__<"div">;
  startIconsContainer5?: Flex__<"div">;
  labelsContainer5?: Flex__<"div">;
  labelText5?: Flex__<"div">;
  label5?: Flex__<"div">;
  label6?: Flex__<"div">;
  labelIconsContainer5?: Flex__<"div">;
  endIconsContainer5?: Flex__<"div">;
  showAllSwitchContainer?: Flex__<"div">;
  showAllSwitch?: Flex__<typeof Switch>;
  frame1856?: Flex__<"div">;
  frame1860?: Flex__<"div">;
  button7?: Flex__<"div">;
  startIconsContainer7?: Flex__<"div">;
  labelsContainer7?: Flex__<"div">;
  labelText7?: Flex__<"div">;
  label8?: Flex__<"div">;
  labelIconsContainer7?: Flex__<"div">;
  endIconsContainer7?: Flex__<"div">;
  frame1855?: Flex__<"div">;
  button8?: Flex__<"div">;
  startIconsContainer8?: Flex__<"div">;
  labelsContainer8?: Flex__<"div">;
  labelText8?: Flex__<"div">;
  label9?: Flex__<"div">;
  labelIconsContainer8?: Flex__<"div">;
  endIconsContainer8?: Flex__<"div">;
  button9?: Flex__<"div">;
  startIconsContainer9?: Flex__<"div">;
  labelsContainer9?: Flex__<"div">;
  labelText9?: Flex__<"div">;
  label10?: Flex__<"div">;
  labelIconsContainer9?: Flex__<"div">;
  endIconsContainer9?: Flex__<"div">;
  dividerSeparator2?: Flex__<"div">;
  frame5?: Flex__<"div">;
  pairedChanges?: Flex__<"div">;
  name?: Flex__<"div">;
  name2?: Flex__<"div">;
  name3?: Flex__<"div">;
  dividerSeparator3?: Flex__<"div">;
  frame6?: Flex__<"div">;
  reconciliationsContainer?: Flex__<"div">;
  frame18?: Flex__<"div">;
  button13?: Flex__<"div">;
  startIconsContainer13?: Flex__<"div">;
  labelsContainer13?: Flex__<"div">;
  labelText13?: Flex__<"div">;
  label15?: Flex__<"div">;
  labelIconsContainer13?: Flex__<"div">;
  endIconsContainer13?: Flex__<"div">;
  reconciliations?: Flex__<"div">;
  blockedContainer?: Flex__<"div">;
  mergeBlockedTitle?: Flex__<"div">;
  mergeBlockedMsg?: Flex__<"div">;
  dividerSeparator5?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame19?: Flex__<"div">;
  cancelButton?: Flex__<typeof Button>;
  finishButton?: Flex__<typeof Button>;
  spinnerContainer?: Flex__<"div">;
};

export interface DefaultMergeFlowProps {
  empty?: SingleBooleanChoiceArg<"empty">;
  loading?: SingleBooleanChoiceArg<"loading">;
  blocked?: SingleBooleanChoiceArg<"blocked">;
  className?: string;
}

const $$ = {};

function PlasmicMergeFlow__RenderFunc(props: {
  variants: PlasmicMergeFlow__VariantsArgs;
  args: PlasmicMergeFlow__ArgsType;
  overrides: PlasmicMergeFlow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "empty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.empty,
      },
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading,
      },
      {
        path: "showAllSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: "blocked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.blocked,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootblocked]: hasVariant($state, "blocked", "blocked"),
          [sty.rootempty]: hasVariant($state, "empty", "empty"),
          [sty.rootloading]: hasVariant($state, "loading", "loading"),
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"reviewAndMergeBranch"}
        data-plasmic-override={overrides.reviewAndMergeBranch}
        hasGap={true}
        className={classNames(projectcss.all, sty.reviewAndMergeBranch, {
          [sty.reviewAndMergeBranchblocked]: hasVariant(
            $state,
            "blocked",
            "blocked"
          ),
          [sty.reviewAndMergeBranchloading]: hasVariant(
            $state,
            "loading",
            "loading"
          ),
        })}
      >
        <div
          data-plasmic-name={"frame8"}
          data-plasmic-override={overrides.frame8}
          className={classNames(projectcss.all, sty.frame8, {
            [sty.frame8blocked]: hasVariant($state, "blocked", "blocked"),
            [sty.frame8loading]: hasVariant($state, "loading", "loading"),
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame25"}
            data-plasmic-override={overrides.frame25}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame25, {
              [sty.frame25blocked]: hasVariant($state, "blocked", "blocked"),
              [sty.frame25loading]: hasVariant($state, "loading", "loading"),
            })}
          >
            <div
              data-plasmic-name={"frame1864"}
              data-plasmic-override={overrides.frame1864}
              className={classNames(projectcss.all, sty.frame1864)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, sty.button)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"startIconsContainer"}
                    data-plasmic-override={overrides.startIconsContainer}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.startIconsContainer
                    )}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__pv5KQ)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"labelsContainer"}
                  data-plasmic-override={overrides.labelsContainer}
                  className={classNames(projectcss.all, sty.labelsContainer)}
                >
                  <div
                    data-plasmic-name={"labelText"}
                    data-plasmic-override={overrides.labelText}
                    className={classNames(projectcss.all, sty.labelText)}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label
                      )}
                    >
                      {"Review changes"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gZfMj
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer"}
                      data-plasmic-override={overrides.labelIconsContainer}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__oMQg)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"endIconsContainer"}
                    data-plasmic-override={overrides.endIconsContainer}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.endIconsContainer
                    )}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___88CXy)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: treeV2EVpmODo,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                hasGap={true}
                className={classNames(projectcss.all, sty.button2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"startIconsContainer2"}
                  data-plasmic-override={overrides.startIconsContainer2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.startIconsContainer2
                  )}
                >
                  <CloseIcon
                    className={classNames(projectcss.all, sty.svg__r3Owl)}
                    role={"img"}
                  />
                </Stack__>
                {false ? (
                  <div
                    data-plasmic-name={"labelsContainer2"}
                    data-plasmic-override={overrides.labelsContainer2}
                    className={classNames(projectcss.all, sty.labelsContainer2)}
                  >
                    <div
                      data-plasmic-name={"labelText2"}
                      data-plasmic-override={overrides.labelText2}
                      className={classNames(projectcss.all, sty.labelText2)}
                    >
                      <div
                        data-plasmic-name={"label2"}
                        data-plasmic-override={overrides.label2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label2
                        )}
                      >
                        {"Variants"}
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qJa9R
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <div
                        data-plasmic-name={"labelIconsContainer2"}
                        data-plasmic-override={overrides.labelIconsContainer2}
                        className={classNames(
                          projectcss.all,
                          sty.labelIconsContainer2
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___51BzZ
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"endIconsContainer2"}
                    data-plasmic-override={overrides.endIconsContainer2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.endIconsContainer2
                    )}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bfIyh)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: plusCnRm3QpPqQ,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame1863"}
              data-plasmic-override={overrides.frame1863}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1863, {
                [sty.frame1863blocked]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
              })}
            >
              <Stack__
                as={"button"}
                data-plasmic-name={"sourceBranchChanges"}
                data-plasmic-override={overrides.sourceBranchChanges}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.sourceBranchChanges
                )}
                ref={(ref) => {
                  $refs["sourceBranchChanges"] = ref;
                }}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"startIconsContainer3"}
                    data-plasmic-override={overrides.startIconsContainer3}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.startIconsContainer3
                    )}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__rwequ)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"labelsContainer3"}
                  data-plasmic-override={overrides.labelsContainer3}
                  className={classNames(projectcss.all, sty.labelsContainer3)}
                >
                  <div
                    data-plasmic-name={"labelText3"}
                    data-plasmic-override={overrides.labelText3}
                    className={classNames(projectcss.all, sty.labelText3)}
                  >
                    <div
                      data-plasmic-name={"label3"}
                      data-plasmic-override={overrides.label3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label3
                      )}
                    >
                      {"in this branch"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x53Vz
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer3"}
                      data-plasmic-override={overrides.labelIconsContainer3}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer3
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__rHMaH)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"endIconsContainer3"}
                  data-plasmic-override={overrides.endIconsContainer3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.endIconsContainer3)}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__qeCf)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
              <Stack__
                as={"button"}
                data-plasmic-name={"destinationBranchChanges"}
                data-plasmic-override={overrides.destinationBranchChanges}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.destinationBranchChanges
                )}
                ref={(ref) => {
                  $refs["destinationBranchChanges"] = ref;
                }}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"startIconsContainer4"}
                    data-plasmic-override={overrides.startIconsContainer4}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.startIconsContainer4
                    )}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__igbUt)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"labelsContainer4"}
                  data-plasmic-override={overrides.labelsContainer4}
                  className={classNames(projectcss.all, sty.labelsContainer4)}
                >
                  <div
                    data-plasmic-name={"labelText4"}
                    data-plasmic-override={overrides.labelText4}
                    className={classNames(projectcss.all, sty.labelText4)}
                  >
                    <div
                      data-plasmic-name={"label4"}
                      data-plasmic-override={overrides.label4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label4
                      )}
                    >
                      {"in main branch since this branch was created"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nvNxw
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer4"}
                      data-plasmic-override={overrides.labelIconsContainer4}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer4
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__rtsiL)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"endIconsContainer4"}
                  data-plasmic-override={overrides.endIconsContainer4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.endIconsContainer4)}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__mAv6V)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"dividerSeparator"}
            data-plasmic-override={overrides.dividerSeparator}
            hasGap={true}
            className={classNames(projectcss.all, sty.dividerSeparator, {
              [sty.dividerSeparatorblocked]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
            })}
          >
            <div
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              className={classNames(projectcss.all, sty.frame4)}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame23"}
            data-plasmic-override={overrides.frame23}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame23, {
              [sty.frame23blocked]: hasVariant($state, "blocked", "blocked"),
            })}
          >
            <div
              data-plasmic-name={"frame1857"}
              data-plasmic-override={overrides.frame1857}
              className={classNames(projectcss.all, sty.frame1857)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                hasGap={true}
                className={classNames(projectcss.all, sty.button5)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"startIconsContainer5"}
                    data-plasmic-override={overrides.startIconsContainer5}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.startIconsContainer5
                    )}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__b5Ju)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"labelsContainer5"}
                  data-plasmic-override={overrides.labelsContainer5}
                  className={classNames(projectcss.all, sty.labelsContainer5)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"labelText5"}
                    data-plasmic-override={overrides.labelText5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.labelText5)}
                  >
                    <div
                      data-plasmic-name={"label5"}
                      data-plasmic-override={overrides.label5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label5
                      )}
                    >
                      {"Conflicting changes"}
                    </div>
                    <div
                      data-plasmic-name={"label6"}
                      data-plasmic-override={overrides.label6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label6
                      )}
                    >
                      {"Pick the branch to keep changes from."}
                    </div>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer5"}
                      data-plasmic-override={overrides.labelIconsContainer5}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer5
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__qtac)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"endIconsContainer5"}
                    data-plasmic-override={overrides.endIconsContainer5}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.endIconsContainer5
                    )}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___0MvkB)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: treeV2EVpmODo,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
              <div
                data-plasmic-name={"showAllSwitchContainer"}
                data-plasmic-override={overrides.showAllSwitchContainer}
                className={classNames(
                  projectcss.all,
                  sty.showAllSwitchContainer
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__e62Vb)}>
                  <Switch
                    data-plasmic-name={"showAllSwitch"}
                    data-plasmic-override={overrides.showAllSwitch}
                    className={classNames("__wab_instance", sty.showAllSwitch)}
                    isChecked={
                      generateStateValueProp($state, [
                        "showAllSwitch",
                        "isChecked",
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "showAllSwitch",
                        "isChecked",
                      ])(eventArgs[0]);
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__haM4A
                      )}
                    >
                      {"Show all changes"}
                    </div>
                  </Switch>
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame1856"}
              data-plasmic-override={overrides.frame1856}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1856, {
                [sty.frame1856empty]: hasVariant($state, "empty", "empty"),
              })}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame1860"}
                data-plasmic-override={overrides.frame1860}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1860, {
                  [sty.frame1860empty]: hasVariant($state, "empty", "empty"),
                })}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button7"}
                  data-plasmic-override={overrides.button7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button7, {
                    [sty.button7blocked]: hasVariant(
                      $state,
                      "blocked",
                      "blocked"
                    ),
                  })}
                >
                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"startIconsContainer7"}
                      data-plasmic-override={overrides.startIconsContainer7}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.startIconsContainer7
                      )}
                    >
                      <FramePlusIcon
                        className={classNames(projectcss.all, sty.svg__zuEam)}
                        role={"img"}
                      />
                    </Stack__>
                  ) : null}
                  <div
                    data-plasmic-name={"labelsContainer7"}
                    data-plasmic-override={overrides.labelsContainer7}
                    className={classNames(projectcss.all, sty.labelsContainer7)}
                  >
                    <div
                      data-plasmic-name={"labelText7"}
                      data-plasmic-override={overrides.labelText7}
                      className={classNames(projectcss.all, sty.labelText7)}
                    >
                      <div
                        data-plasmic-name={"label8"}
                        data-plasmic-override={overrides.label8}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label8
                        )}
                      >
                        {"Object"}
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ipYnc
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <div
                        data-plasmic-name={"labelIconsContainer7"}
                        data-plasmic-override={overrides.labelIconsContainer7}
                        className={classNames(
                          projectcss.all,
                          sty.labelIconsContainer7
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5AnHa
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"endIconsContainer7"}
                      data-plasmic-override={overrides.endIconsContainer7}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.endIconsContainer7
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__qp40P)}
                        displayHeight={"20px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        src={{
                          src: treeV2EVpmODo,
                          fullWidth: 20,
                          fullHeight: 20,
                          aspectRatio: 1,
                        }}
                      />
                    </Stack__>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1855"}
                  data-plasmic-override={overrides.frame1855}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1855)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button8"}
                    data-plasmic-override={overrides.button8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button8)}
                  >
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"startIconsContainer8"}
                        data-plasmic-override={overrides.startIconsContainer8}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.startIconsContainer8
                        )}
                      >
                        <FramePlusIcon
                          className={classNames(projectcss.all, sty.svg__tad73)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <div
                      data-plasmic-name={"labelsContainer8"}
                      data-plasmic-override={overrides.labelsContainer8}
                      className={classNames(
                        projectcss.all,
                        sty.labelsContainer8
                      )}
                    >
                      <div
                        data-plasmic-name={"labelText8"}
                        data-plasmic-override={overrides.labelText8}
                        className={classNames(projectcss.all, sty.labelText8)}
                      >
                        <div
                          data-plasmic-name={"label9"}
                          data-plasmic-override={overrides.label9}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.label9
                          )}
                        >
                          {"Main\nbranch"}
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pbYbl
                            )}
                          >
                            {"Label"}
                          </div>
                        ) : null}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"labelIconsContainer8"}
                          data-plasmic-override={overrides.labelIconsContainer8}
                          className={classNames(
                            projectcss.all,
                            sty.labelIconsContainer8
                          )}
                        >
                          <ChevronDownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ajIg
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"endIconsContainer8"}
                        data-plasmic-override={overrides.endIconsContainer8}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.endIconsContainer8
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__p8Jv0)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: treeV2EVpmODo,
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1,
                          }}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button9"}
                    data-plasmic-override={overrides.button9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button9)}
                  >
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"startIconsContainer9"}
                        data-plasmic-override={overrides.startIconsContainer9}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.startIconsContainer9
                        )}
                      >
                        <FramePlusIcon
                          className={classNames(projectcss.all, sty.svg__hub8L)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <div
                      data-plasmic-name={"labelsContainer9"}
                      data-plasmic-override={overrides.labelsContainer9}
                      className={classNames(
                        projectcss.all,
                        sty.labelsContainer9
                      )}
                    >
                      <div
                        data-plasmic-name={"labelText9"}
                        data-plasmic-override={overrides.labelText9}
                        className={classNames(projectcss.all, sty.labelText9)}
                      >
                        <div
                          data-plasmic-name={"label10"}
                          data-plasmic-override={overrides.label10}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.label10
                          )}
                        >
                          {"This\nbranch"}
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yDyvZ
                            )}
                          >
                            {"Label"}
                          </div>
                        ) : null}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"labelIconsContainer9"}
                          data-plasmic-override={overrides.labelIconsContainer9}
                          className={classNames(
                            projectcss.all,
                            sty.labelIconsContainer9
                          )}
                        >
                          <ChevronDownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hlnrc
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"endIconsContainer9"}
                        data-plasmic-override={overrides.endIconsContainer9}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.endIconsContainer9
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__t922V)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: treeV2EVpmODo,
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1,
                          }}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"dividerSeparator2"}
                data-plasmic-override={overrides.dividerSeparator2}
                hasGap={true}
                className={classNames(projectcss.all, sty.dividerSeparator2)}
              >
                <div
                  data-plasmic-name={"frame5"}
                  data-plasmic-override={overrides.frame5}
                  className={classNames(projectcss.all, sty.frame5)}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"pairedChanges"}
                data-plasmic-override={overrides.pairedChanges}
                hasGap={true}
                className={classNames(projectcss.all, sty.pairedChanges, {
                  [sty.pairedChangesempty]: hasVariant(
                    $state,
                    "empty",
                    "empty"
                  ),
                })}
              >
                <Conflict
                  className={classNames("__wab_instance", sty.conflict__a9E2T, {
                    [sty.conflictempty__a9E2TK797E]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  })}
                  name={
                    <div
                      data-plasmic-name={"name"}
                      data-plasmic-override={overrides.name}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.name
                      )}
                    >
                      {"Homepage"}
                    </div>
                  }
                  subtext={"Some changes were auto merged"}
                />

                <Conflict
                  className={classNames("__wab_instance", sty.conflict__i7Jgd)}
                  hasSubtext={true}
                  name={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ngSaV
                      )}
                    >
                      {"Homepage"}
                    </div>
                  }
                  subtext={"Some changes were auto merged"}
                />

                <Conflict
                  className={classNames("__wab_instance", sty.conflict__u2SIb)}
                  merged={true}
                  name={
                    <div
                      data-plasmic-name={"name2"}
                      data-plasmic-override={overrides.name2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.name2
                      )}
                    >
                      {"Homepage"}
                    </div>
                  }
                  subtext={"Some changes were auto merged"}
                />

                <Conflict
                  className={classNames("__wab_instance", sty.conflict__xNAqO, {
                    [sty.conflictempty__xNAqOk797E]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  })}
                  merged={true}
                  name={
                    <div
                      data-plasmic-name={"name3"}
                      data-plasmic-override={overrides.name3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.name3
                      )}
                    >
                      {"Homepage"}
                    </div>
                  }
                  subtext={"Some changes were auto merged"}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7NgIv,
                  {
                    [sty.textempty___7NgIvk797E]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  }
                )}
              >
                {"No conflicting changes!"}
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"dividerSeparator3"}
            data-plasmic-override={overrides.dividerSeparator3}
            hasGap={true}
            className={classNames(projectcss.all, sty.dividerSeparator3, {
              [sty.dividerSeparator3blocked]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
            })}
          >
            <div
              data-plasmic-name={"frame6"}
              data-plasmic-override={overrides.frame6}
              className={classNames(projectcss.all, sty.frame6, {
                [sty.frame6empty]: hasVariant($state, "empty", "empty"),
              })}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"reconciliationsContainer"}
            data-plasmic-override={overrides.reconciliationsContainer}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.reconciliationsContainer,
              {
                [sty.reconciliationsContainerblocked]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
                [sty.reconciliationsContainerempty]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
              }
            )}
          >
            <div
              data-plasmic-name={"frame18"}
              data-plasmic-override={overrides.frame18}
              className={classNames(projectcss.all, sty.frame18)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"button13"}
                data-plasmic-override={overrides.button13}
                hasGap={true}
                className={classNames(projectcss.all, sty.button13)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"startIconsContainer13"}
                    data-plasmic-override={overrides.startIconsContainer13}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.startIconsContainer13
                    )}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__hgECr)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"labelsContainer13"}
                  data-plasmic-override={overrides.labelsContainer13}
                  className={classNames(projectcss.all, sty.labelsContainer13)}
                >
                  <div
                    data-plasmic-name={"labelText13"}
                    data-plasmic-override={overrides.labelText13}
                    className={classNames(projectcss.all, sty.labelText13)}
                  >
                    <div
                      data-plasmic-name={"label15"}
                      data-plasmic-override={overrides.label15}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label15
                      )}
                    >
                      {"Automatically reconciled changes"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uKa6G
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer13"}
                      data-plasmic-override={overrides.labelIconsContainer13}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer13
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__gtQk1)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"endIconsContainer13"}
                    data-plasmic-override={overrides.endIconsContainer13}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.endIconsContainer13
                    )}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vpzpQ)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: treeV2EVpmODo,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"reconciliations"}
              data-plasmic-override={overrides.reconciliations}
              hasGap={true}
              className={classNames(projectcss.all, sty.reconciliations)}
            >
              <LineItem
                className={classNames("__wab_instance", sty.lineItem__dIr7Y, {
                  [sty.lineItemempty__dIr7YK797E]: hasVariant(
                    $state,
                    "empty",
                    "empty"
                  ),
                })}
              >
                {
                  "Token \u201cInfo\u201d added in both branches, so we renamed this branch\u2019s to \u201cInfo2\u201d."
                }
              </LineItem>
              <LineItem
                className={classNames("__wab_instance", sty.lineItem__skGyc)}
              >
                {
                  "Component \u201cListItem\u201d deleted in this branch, but got used in the main branch, so we deleted those new usages."
                }
              </LineItem>
            </Stack__>
          </Stack__>
          {(
            hasVariant($state, "blocked", "blocked")
              ? true
              : hasVariant($state, "loading", "loading")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"blockedContainer"}
              data-plasmic-override={overrides.blockedContainer}
              className={classNames(projectcss.all, sty.blockedContainer, {
                [sty.blockedContainerblocked]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
                [sty.blockedContainerloading]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                ),
              })}
            >
              <div
                data-plasmic-name={"mergeBlockedTitle"}
                data-plasmic-override={overrides.mergeBlockedTitle}
                className={classNames(projectcss.all, sty.mergeBlockedTitle, {
                  [sty.mergeBlockedTitleblocked]: hasVariant(
                    $state,
                    "blocked",
                    "blocked"
                  ),
                  [sty.mergeBlockedTitleloading]: hasVariant(
                    $state,
                    "loading",
                    "loading"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ujPpp,
                    {
                      [sty.textblocked__ujPpp1MFev]: hasVariant(
                        $state,
                        "blocked",
                        "blocked"
                      ),
                      [sty.textloading__ujPppjPjj]: hasVariant(
                        $state,
                        "loading",
                        "loading"
                      ),
                    }
                  )}
                >
                  {"Cannot merge branches"}
                </div>
              </div>
              <div
                data-plasmic-name={"mergeBlockedMsg"}
                data-plasmic-override={overrides.mergeBlockedMsg}
                className={classNames(projectcss.all, sty.mergeBlockedMsg, {
                  [sty.mergeBlockedMsgblocked]: hasVariant(
                    $state,
                    "blocked",
                    "blocked"
                  ),
                  [sty.mergeBlockedMsgloading]: hasVariant(
                    $state,
                    "loading",
                    "loading"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9XgRb,
                    {
                      [sty.textblocked___9XgRb1MFev]: hasVariant(
                        $state,
                        "blocked",
                        "blocked"
                      ),
                    }
                  )}
                >
                  {
                    "The branches cannot be merged because: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam eget ligula eu lectus lobortis condimentum. Aliquam nonummy auctor massa."
                  }
                </div>
              </div>
            </div>
          ) : null}
          <Stack__
            as={"div"}
            data-plasmic-name={"dividerSeparator5"}
            data-plasmic-override={overrides.dividerSeparator5}
            hasGap={true}
            className={classNames(projectcss.all, sty.dividerSeparator5)}
          >
            <div
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              className={classNames(projectcss.all, sty.frame9)}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame24"}
            data-plasmic-override={overrides.frame24}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame24)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"frame19"}
              data-plasmic-override={overrides.frame19}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame19, {
                [sty.frame19empty]: hasVariant($state, "empty", "empty"),
              })}
            >
              <Button
                data-plasmic-name={"cancelButton"}
                data-plasmic-override={overrides.cancelButton}
                caption={"Caption"}
                className={classNames("__wab_instance", sty.cancelButton)}
              >
                {"Cancel"}
              </Button>
              <Button
                data-plasmic-name={"finishButton"}
                data-plasmic-override={overrides.finishButton}
                caption={"Caption"}
                className={classNames("__wab_instance", sty.finishButton, {
                  [sty.finishButtonblocked]: hasVariant(
                    $state,
                    "blocked",
                    "blocked"
                  ),
                })}
                disabled={
                  hasVariant($state, "blocked", "blocked") ? true : undefined
                }
                type={["primary"]}
              >
                {"Merge"}
              </Button>
            </Stack__>
          </Stack__>
        </div>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__tFpp, {
          [sty.freeBoxblocked__tFpp1MFev]: hasVariant(
            $state,
            "blocked",
            "blocked"
          ),
          [sty.freeBoxloading__tFppjPjj]: hasVariant(
            $state,
            "loading",
            "loading"
          ),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yZmul,
            {
              [sty.textblocked__yZmul1MFev]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
              [sty.textloading__yZmuLjPjj]: hasVariant(
                $state,
                "loading",
                "loading"
              ),
            }
          )}
        >
          {"Please wait, determining conflicting changes..."}
        </div>
        <div
          data-plasmic-name={"spinnerContainer"}
          data-plasmic-override={overrides.spinnerContainer}
          className={classNames(projectcss.all, sty.spinnerContainer, {
            [sty.spinnerContainerblocked]: hasVariant(
              $state,
              "blocked",
              "blocked"
            ),
            [sty.spinnerContainerloading]: hasVariant(
              $state,
              "loading",
              "loading"
            ),
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reviewAndMergeBranch",
    "frame8",
    "frame25",
    "frame1864",
    "button",
    "startIconsContainer",
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
    "endIconsContainer",
    "button2",
    "startIconsContainer2",
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
    "endIconsContainer2",
    "frame1863",
    "sourceBranchChanges",
    "startIconsContainer3",
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
    "endIconsContainer3",
    "destinationBranchChanges",
    "startIconsContainer4",
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
    "endIconsContainer4",
    "dividerSeparator",
    "frame4",
    "frame23",
    "frame1857",
    "button5",
    "startIconsContainer5",
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
    "endIconsContainer5",
    "showAllSwitchContainer",
    "showAllSwitch",
    "frame1856",
    "frame1860",
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
    "dividerSeparator2",
    "frame5",
    "pairedChanges",
    "name",
    "name2",
    "name3",
    "dividerSeparator3",
    "frame6",
    "reconciliationsContainer",
    "frame18",
    "button13",
    "startIconsContainer13",
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
    "endIconsContainer13",
    "reconciliations",
    "blockedContainer",
    "mergeBlockedTitle",
    "mergeBlockedMsg",
    "dividerSeparator5",
    "frame9",
    "frame24",
    "frame19",
    "cancelButton",
    "finishButton",
    "spinnerContainer",
  ],

  reviewAndMergeBranch: [
    "reviewAndMergeBranch",
    "frame8",
    "frame25",
    "frame1864",
    "button",
    "startIconsContainer",
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
    "endIconsContainer",
    "button2",
    "startIconsContainer2",
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
    "endIconsContainer2",
    "frame1863",
    "sourceBranchChanges",
    "startIconsContainer3",
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
    "endIconsContainer3",
    "destinationBranchChanges",
    "startIconsContainer4",
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
    "endIconsContainer4",
    "dividerSeparator",
    "frame4",
    "frame23",
    "frame1857",
    "button5",
    "startIconsContainer5",
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
    "endIconsContainer5",
    "showAllSwitchContainer",
    "showAllSwitch",
    "frame1856",
    "frame1860",
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
    "dividerSeparator2",
    "frame5",
    "pairedChanges",
    "name",
    "name2",
    "name3",
    "dividerSeparator3",
    "frame6",
    "reconciliationsContainer",
    "frame18",
    "button13",
    "startIconsContainer13",
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
    "endIconsContainer13",
    "reconciliations",
    "blockedContainer",
    "mergeBlockedTitle",
    "mergeBlockedMsg",
    "dividerSeparator5",
    "frame9",
    "frame24",
    "frame19",
    "cancelButton",
    "finishButton",
  ],

  frame8: [
    "frame8",
    "frame25",
    "frame1864",
    "button",
    "startIconsContainer",
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
    "endIconsContainer",
    "button2",
    "startIconsContainer2",
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
    "endIconsContainer2",
    "frame1863",
    "sourceBranchChanges",
    "startIconsContainer3",
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
    "endIconsContainer3",
    "destinationBranchChanges",
    "startIconsContainer4",
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
    "endIconsContainer4",
    "dividerSeparator",
    "frame4",
    "frame23",
    "frame1857",
    "button5",
    "startIconsContainer5",
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
    "endIconsContainer5",
    "showAllSwitchContainer",
    "showAllSwitch",
    "frame1856",
    "frame1860",
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
    "dividerSeparator2",
    "frame5",
    "pairedChanges",
    "name",
    "name2",
    "name3",
    "dividerSeparator3",
    "frame6",
    "reconciliationsContainer",
    "frame18",
    "button13",
    "startIconsContainer13",
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
    "endIconsContainer13",
    "reconciliations",
    "blockedContainer",
    "mergeBlockedTitle",
    "mergeBlockedMsg",
    "dividerSeparator5",
    "frame9",
    "frame24",
    "frame19",
    "cancelButton",
    "finishButton",
  ],

  frame25: [
    "frame25",
    "frame1864",
    "button",
    "startIconsContainer",
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
    "endIconsContainer",
    "button2",
    "startIconsContainer2",
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
    "endIconsContainer2",
    "frame1863",
    "sourceBranchChanges",
    "startIconsContainer3",
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
    "endIconsContainer3",
    "destinationBranchChanges",
    "startIconsContainer4",
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
    "endIconsContainer4",
  ],

  frame1864: [
    "frame1864",
    "button",
    "startIconsContainer",
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
    "endIconsContainer",
    "button2",
    "startIconsContainer2",
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
    "endIconsContainer2",
  ],

  button: [
    "button",
    "startIconsContainer",
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
    "endIconsContainer",
  ],

  startIconsContainer: ["startIconsContainer"],
  labelsContainer: [
    "labelsContainer",
    "labelText",
    "label",
    "labelIconsContainer",
  ],

  labelText: ["labelText", "label"],
  label: ["label"],
  labelIconsContainer: ["labelIconsContainer"],
  endIconsContainer: ["endIconsContainer"],
  button2: [
    "button2",
    "startIconsContainer2",
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
    "endIconsContainer2",
  ],

  startIconsContainer2: ["startIconsContainer2"],
  labelsContainer2: [
    "labelsContainer2",
    "labelText2",
    "label2",
    "labelIconsContainer2",
  ],

  labelText2: ["labelText2", "label2"],
  label2: ["label2"],
  labelIconsContainer2: ["labelIconsContainer2"],
  endIconsContainer2: ["endIconsContainer2"],
  frame1863: [
    "frame1863",
    "sourceBranchChanges",
    "startIconsContainer3",
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
    "endIconsContainer3",
    "destinationBranchChanges",
    "startIconsContainer4",
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
    "endIconsContainer4",
  ],

  sourceBranchChanges: [
    "sourceBranchChanges",
    "startIconsContainer3",
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
    "endIconsContainer3",
  ],

  startIconsContainer3: ["startIconsContainer3"],
  labelsContainer3: [
    "labelsContainer3",
    "labelText3",
    "label3",
    "labelIconsContainer3",
  ],

  labelText3: ["labelText3", "label3"],
  label3: ["label3"],
  labelIconsContainer3: ["labelIconsContainer3"],
  endIconsContainer3: ["endIconsContainer3"],
  destinationBranchChanges: [
    "destinationBranchChanges",
    "startIconsContainer4",
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
    "endIconsContainer4",
  ],

  startIconsContainer4: ["startIconsContainer4"],
  labelsContainer4: [
    "labelsContainer4",
    "labelText4",
    "label4",
    "labelIconsContainer4",
  ],

  labelText4: ["labelText4", "label4"],
  label4: ["label4"],
  labelIconsContainer4: ["labelIconsContainer4"],
  endIconsContainer4: ["endIconsContainer4"],
  dividerSeparator: ["dividerSeparator", "frame4"],
  frame4: ["frame4"],
  frame23: [
    "frame23",
    "frame1857",
    "button5",
    "startIconsContainer5",
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
    "endIconsContainer5",
    "showAllSwitchContainer",
    "showAllSwitch",
    "frame1856",
    "frame1860",
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
    "dividerSeparator2",
    "frame5",
    "pairedChanges",
    "name",
    "name2",
    "name3",
  ],

  frame1857: [
    "frame1857",
    "button5",
    "startIconsContainer5",
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
    "endIconsContainer5",
    "showAllSwitchContainer",
    "showAllSwitch",
  ],

  button5: [
    "button5",
    "startIconsContainer5",
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
    "endIconsContainer5",
  ],

  startIconsContainer5: ["startIconsContainer5"],
  labelsContainer5: [
    "labelsContainer5",
    "labelText5",
    "label5",
    "label6",
    "labelIconsContainer5",
  ],

  labelText5: ["labelText5", "label5", "label6"],
  label5: ["label5"],
  label6: ["label6"],
  labelIconsContainer5: ["labelIconsContainer5"],
  endIconsContainer5: ["endIconsContainer5"],
  showAllSwitchContainer: ["showAllSwitchContainer", "showAllSwitch"],
  showAllSwitch: ["showAllSwitch"],
  frame1856: [
    "frame1856",
    "frame1860",
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
    "dividerSeparator2",
    "frame5",
    "pairedChanges",
    "name",
    "name2",
    "name3",
  ],

  frame1860: [
    "frame1860",
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
  ],

  button7: [
    "button7",
    "startIconsContainer7",
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
    "endIconsContainer7",
  ],

  startIconsContainer7: ["startIconsContainer7"],
  labelsContainer7: [
    "labelsContainer7",
    "labelText7",
    "label8",
    "labelIconsContainer7",
  ],

  labelText7: ["labelText7", "label8"],
  label8: ["label8"],
  labelIconsContainer7: ["labelIconsContainer7"],
  endIconsContainer7: ["endIconsContainer7"],
  frame1855: [
    "frame1855",
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
  ],

  button8: [
    "button8",
    "startIconsContainer8",
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
    "endIconsContainer8",
  ],

  startIconsContainer8: ["startIconsContainer8"],
  labelsContainer8: [
    "labelsContainer8",
    "labelText8",
    "label9",
    "labelIconsContainer8",
  ],

  labelText8: ["labelText8", "label9"],
  label9: ["label9"],
  labelIconsContainer8: ["labelIconsContainer8"],
  endIconsContainer8: ["endIconsContainer8"],
  button9: [
    "button9",
    "startIconsContainer9",
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
    "endIconsContainer9",
  ],

  startIconsContainer9: ["startIconsContainer9"],
  labelsContainer9: [
    "labelsContainer9",
    "labelText9",
    "label10",
    "labelIconsContainer9",
  ],

  labelText9: ["labelText9", "label10"],
  label10: ["label10"],
  labelIconsContainer9: ["labelIconsContainer9"],
  endIconsContainer9: ["endIconsContainer9"],
  dividerSeparator2: ["dividerSeparator2", "frame5"],
  frame5: ["frame5"],
  pairedChanges: ["pairedChanges", "name", "name2", "name3"],
  name: ["name"],
  name2: ["name2"],
  name3: ["name3"],
  dividerSeparator3: ["dividerSeparator3", "frame6"],
  frame6: ["frame6"],
  reconciliationsContainer: [
    "reconciliationsContainer",
    "frame18",
    "button13",
    "startIconsContainer13",
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
    "endIconsContainer13",
    "reconciliations",
  ],

  frame18: [
    "frame18",
    "button13",
    "startIconsContainer13",
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
    "endIconsContainer13",
  ],

  button13: [
    "button13",
    "startIconsContainer13",
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
    "endIconsContainer13",
  ],

  startIconsContainer13: ["startIconsContainer13"],
  labelsContainer13: [
    "labelsContainer13",
    "labelText13",
    "label15",
    "labelIconsContainer13",
  ],

  labelText13: ["labelText13", "label15"],
  label15: ["label15"],
  labelIconsContainer13: ["labelIconsContainer13"],
  endIconsContainer13: ["endIconsContainer13"],
  reconciliations: ["reconciliations"],
  blockedContainer: [
    "blockedContainer",
    "mergeBlockedTitle",
    "mergeBlockedMsg",
  ],

  mergeBlockedTitle: ["mergeBlockedTitle"],
  mergeBlockedMsg: ["mergeBlockedMsg"],
  dividerSeparator5: ["dividerSeparator5", "frame9"],
  frame9: ["frame9"],
  frame24: ["frame24", "frame19", "cancelButton", "finishButton"],
  frame19: ["frame19", "cancelButton", "finishButton"],
  cancelButton: ["cancelButton"],
  finishButton: ["finishButton"],
  spinnerContainer: ["spinnerContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reviewAndMergeBranch: "div";
  frame8: "div";
  frame25: "div";
  frame1864: "div";
  button: "div";
  startIconsContainer: "div";
  labelsContainer: "div";
  labelText: "div";
  label: "div";
  labelIconsContainer: "div";
  endIconsContainer: "div";
  button2: "div";
  startIconsContainer2: "div";
  labelsContainer2: "div";
  labelText2: "div";
  label2: "div";
  labelIconsContainer2: "div";
  endIconsContainer2: "div";
  frame1863: "div";
  sourceBranchChanges: "button";
  startIconsContainer3: "div";
  labelsContainer3: "div";
  labelText3: "div";
  label3: "div";
  labelIconsContainer3: "div";
  endIconsContainer3: "div";
  destinationBranchChanges: "button";
  startIconsContainer4: "div";
  labelsContainer4: "div";
  labelText4: "div";
  label4: "div";
  labelIconsContainer4: "div";
  endIconsContainer4: "div";
  dividerSeparator: "div";
  frame4: "div";
  frame23: "div";
  frame1857: "div";
  button5: "div";
  startIconsContainer5: "div";
  labelsContainer5: "div";
  labelText5: "div";
  label5: "div";
  label6: "div";
  labelIconsContainer5: "div";
  endIconsContainer5: "div";
  showAllSwitchContainer: "div";
  showAllSwitch: typeof Switch;
  frame1856: "div";
  frame1860: "div";
  button7: "div";
  startIconsContainer7: "div";
  labelsContainer7: "div";
  labelText7: "div";
  label8: "div";
  labelIconsContainer7: "div";
  endIconsContainer7: "div";
  frame1855: "div";
  button8: "div";
  startIconsContainer8: "div";
  labelsContainer8: "div";
  labelText8: "div";
  label9: "div";
  labelIconsContainer8: "div";
  endIconsContainer8: "div";
  button9: "div";
  startIconsContainer9: "div";
  labelsContainer9: "div";
  labelText9: "div";
  label10: "div";
  labelIconsContainer9: "div";
  endIconsContainer9: "div";
  dividerSeparator2: "div";
  frame5: "div";
  pairedChanges: "div";
  name: "div";
  name2: "div";
  name3: "div";
  dividerSeparator3: "div";
  frame6: "div";
  reconciliationsContainer: "div";
  frame18: "div";
  button13: "div";
  startIconsContainer13: "div";
  labelsContainer13: "div";
  labelText13: "div";
  label15: "div";
  labelIconsContainer13: "div";
  endIconsContainer13: "div";
  reconciliations: "div";
  blockedContainer: "div";
  mergeBlockedTitle: "div";
  mergeBlockedMsg: "div";
  dividerSeparator5: "div";
  frame9: "div";
  frame24: "div";
  frame19: "div";
  cancelButton: typeof Button;
  finishButton: typeof Button;
  spinnerContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMergeFlow__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMergeFlow__VariantsArgs;
    args?: PlasmicMergeFlow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMergeFlow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMergeFlow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMergeFlow__ArgProps,
          internalVariantPropNames: PlasmicMergeFlow__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicMergeFlow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMergeFlow";
  } else {
    func.displayName = `PlasmicMergeFlow.${nodeName}`;
  }
  return func;
}

export const PlasmicMergeFlow = Object.assign(
  // Top-level PlasmicMergeFlow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    reviewAndMergeBranch: makeNodeComponent("reviewAndMergeBranch"),
    frame8: makeNodeComponent("frame8"),
    frame25: makeNodeComponent("frame25"),
    frame1864: makeNodeComponent("frame1864"),
    button: makeNodeComponent("button"),
    startIconsContainer: makeNodeComponent("startIconsContainer"),
    labelsContainer: makeNodeComponent("labelsContainer"),
    labelText: makeNodeComponent("labelText"),
    label: makeNodeComponent("label"),
    labelIconsContainer: makeNodeComponent("labelIconsContainer"),
    endIconsContainer: makeNodeComponent("endIconsContainer"),
    button2: makeNodeComponent("button2"),
    startIconsContainer2: makeNodeComponent("startIconsContainer2"),
    labelsContainer2: makeNodeComponent("labelsContainer2"),
    labelText2: makeNodeComponent("labelText2"),
    label2: makeNodeComponent("label2"),
    labelIconsContainer2: makeNodeComponent("labelIconsContainer2"),
    endIconsContainer2: makeNodeComponent("endIconsContainer2"),
    frame1863: makeNodeComponent("frame1863"),
    sourceBranchChanges: makeNodeComponent("sourceBranchChanges"),
    startIconsContainer3: makeNodeComponent("startIconsContainer3"),
    labelsContainer3: makeNodeComponent("labelsContainer3"),
    labelText3: makeNodeComponent("labelText3"),
    label3: makeNodeComponent("label3"),
    labelIconsContainer3: makeNodeComponent("labelIconsContainer3"),
    endIconsContainer3: makeNodeComponent("endIconsContainer3"),
    destinationBranchChanges: makeNodeComponent("destinationBranchChanges"),
    startIconsContainer4: makeNodeComponent("startIconsContainer4"),
    labelsContainer4: makeNodeComponent("labelsContainer4"),
    labelText4: makeNodeComponent("labelText4"),
    label4: makeNodeComponent("label4"),
    labelIconsContainer4: makeNodeComponent("labelIconsContainer4"),
    endIconsContainer4: makeNodeComponent("endIconsContainer4"),
    dividerSeparator: makeNodeComponent("dividerSeparator"),
    frame4: makeNodeComponent("frame4"),
    frame23: makeNodeComponent("frame23"),
    frame1857: makeNodeComponent("frame1857"),
    button5: makeNodeComponent("button5"),
    startIconsContainer5: makeNodeComponent("startIconsContainer5"),
    labelsContainer5: makeNodeComponent("labelsContainer5"),
    labelText5: makeNodeComponent("labelText5"),
    label5: makeNodeComponent("label5"),
    label6: makeNodeComponent("label6"),
    labelIconsContainer5: makeNodeComponent("labelIconsContainer5"),
    endIconsContainer5: makeNodeComponent("endIconsContainer5"),
    showAllSwitchContainer: makeNodeComponent("showAllSwitchContainer"),
    showAllSwitch: makeNodeComponent("showAllSwitch"),
    frame1856: makeNodeComponent("frame1856"),
    frame1860: makeNodeComponent("frame1860"),
    button7: makeNodeComponent("button7"),
    startIconsContainer7: makeNodeComponent("startIconsContainer7"),
    labelsContainer7: makeNodeComponent("labelsContainer7"),
    labelText7: makeNodeComponent("labelText7"),
    label8: makeNodeComponent("label8"),
    labelIconsContainer7: makeNodeComponent("labelIconsContainer7"),
    endIconsContainer7: makeNodeComponent("endIconsContainer7"),
    frame1855: makeNodeComponent("frame1855"),
    button8: makeNodeComponent("button8"),
    startIconsContainer8: makeNodeComponent("startIconsContainer8"),
    labelsContainer8: makeNodeComponent("labelsContainer8"),
    labelText8: makeNodeComponent("labelText8"),
    label9: makeNodeComponent("label9"),
    labelIconsContainer8: makeNodeComponent("labelIconsContainer8"),
    endIconsContainer8: makeNodeComponent("endIconsContainer8"),
    button9: makeNodeComponent("button9"),
    startIconsContainer9: makeNodeComponent("startIconsContainer9"),
    labelsContainer9: makeNodeComponent("labelsContainer9"),
    labelText9: makeNodeComponent("labelText9"),
    label10: makeNodeComponent("label10"),
    labelIconsContainer9: makeNodeComponent("labelIconsContainer9"),
    endIconsContainer9: makeNodeComponent("endIconsContainer9"),
    dividerSeparator2: makeNodeComponent("dividerSeparator2"),
    frame5: makeNodeComponent("frame5"),
    pairedChanges: makeNodeComponent("pairedChanges"),
    _name: makeNodeComponent("name"),
    name2: makeNodeComponent("name2"),
    name3: makeNodeComponent("name3"),
    dividerSeparator3: makeNodeComponent("dividerSeparator3"),
    frame6: makeNodeComponent("frame6"),
    reconciliationsContainer: makeNodeComponent("reconciliationsContainer"),
    frame18: makeNodeComponent("frame18"),
    button13: makeNodeComponent("button13"),
    startIconsContainer13: makeNodeComponent("startIconsContainer13"),
    labelsContainer13: makeNodeComponent("labelsContainer13"),
    labelText13: makeNodeComponent("labelText13"),
    label15: makeNodeComponent("label15"),
    labelIconsContainer13: makeNodeComponent("labelIconsContainer13"),
    endIconsContainer13: makeNodeComponent("endIconsContainer13"),
    reconciliations: makeNodeComponent("reconciliations"),
    blockedContainer: makeNodeComponent("blockedContainer"),
    mergeBlockedTitle: makeNodeComponent("mergeBlockedTitle"),
    mergeBlockedMsg: makeNodeComponent("mergeBlockedMsg"),
    dividerSeparator5: makeNodeComponent("dividerSeparator5"),
    frame9: makeNodeComponent("frame9"),
    frame24: makeNodeComponent("frame24"),
    frame19: makeNodeComponent("frame19"),
    cancelButton: makeNodeComponent("cancelButton"),
    finishButton: makeNodeComponent("finishButton"),
    spinnerContainer: makeNodeComponent("spinnerContainer"),

    // Metadata about props expected for PlasmicMergeFlow
    internalVariantProps: PlasmicMergeFlow__VariantProps,
    internalArgProps: PlasmicMergeFlow__ArgProps,
  }
);

export default PlasmicMergeFlow;
/* prettier-ignore-end */
