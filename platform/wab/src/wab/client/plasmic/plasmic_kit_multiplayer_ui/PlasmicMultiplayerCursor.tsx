// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eyjDfHaWPk4awNJAqhg4Cb
// Component: 6bdpsCyN1H
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import MultiplayerLightDarkColorProvider from "../../components/canvas/Multiplayer/MultiplayerLightDarkColorProvider"; // plasmic-import: JH5l4wUr73/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_multiplayer_ui.module.css"; // plasmic-import: eyjDfHaWPk4awNJAqhg4Cb/projectcss
import sty from "./PlasmicMultiplayerCursor.module.css"; // plasmic-import: 6bdpsCyN1H/css

import MouseCursorSvgIcon from "./icons/PlasmicIcon__MouseCursorSvg"; // plasmic-import: ja_S8_o1BB/icon

export type PlasmicMultiplayerCursor__VariantMembers = {};

export type PlasmicMultiplayerCursor__VariantsArgs = {};
type VariantPropType = keyof PlasmicMultiplayerCursor__VariantsArgs;
export const PlasmicMultiplayerCursor__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMultiplayerCursor__ArgsType = {
  name?: string;
  hexColor?: string;
};

type ArgPropType = keyof PlasmicMultiplayerCursor__ArgsType;
export const PlasmicMultiplayerCursor__ArgProps = new Array<ArgPropType>(
  "name",
  "hexColor"
);

export type PlasmicMultiplayerCursor__OverridesType = {
  root?: p.Flex<"div">;
  multiplayerLightDarkColorProvider?: p.Flex<
    typeof MultiplayerLightDarkColorProvider
  >;

  freeBox?: p.Flex<"div">;
  cursorShape?: p.Flex<"svg">;
  nameContainer?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultMultiplayerCursorProps {
  name?: string;
  hexColor?: string;
  className?: string;
}

function PlasmicMultiplayerCursor__RenderFunc(props: {
  variants: PlasmicMultiplayerCursor__VariantsArgs;
  args: PlasmicMultiplayerCursor__ArgsType;
  overrides: PlasmicMultiplayerCursor__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Monir" as const,
          hexColor: "#ff0000" as const,
        },

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          plasmic_plasmic_kit_design_system_css.plasmic_tokens,
          sty.root
        )}
        style={(() => {
          try {
            return {
              color: $props.hexColor,
            };
          } catch (e) {
            if (e instanceof TypeError) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <MultiplayerLightDarkColorProvider
          data-plasmic-name={"multiplayerLightDarkColorProvider"}
          data-plasmic-override={overrides.multiplayerLightDarkColorProvider}
          className={classNames(
            "__wab_instance",
            sty.multiplayerLightDarkColorProvider
          )}
          color={args.hexColor}
        >
          <ph.DataCtxReader>
            {($ctx) => (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <MouseCursorSvgIcon
                  data-plasmic-name={"cursorShape"}
                  data-plasmic-override={overrides.cursorShape}
                  className={classNames(projectcss.all, sty.cursorShape)}
                  role={"img"}
                  style={(() => {
                    try {
                      return {
                        color: $ctx.colors.backgroundColor,
                      };
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                {true ? (
                  <div
                    data-plasmic-name={"nameContainer"}
                    data-plasmic-override={overrides.nameContainer}
                    className={classNames(projectcss.all, sty.nameContainer)}
                    style={(() => {
                      try {
                        return {
                          backgroundColor: $ctx.colors.backgroundColor,
                          color: $ctx.colors.foregroundColor,
                        };
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {(() => {
                        try {
                          return $props.name;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Name";
                          }
                          throw e;
                        }
                      })()}
                    </div>
                  </div>
                ) : null}
              </div>
            )}
          </ph.DataCtxReader>
        </MultiplayerLightDarkColorProvider>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "multiplayerLightDarkColorProvider",
    "freeBox",
    "cursorShape",
    "nameContainer",
    "text",
  ],

  multiplayerLightDarkColorProvider: [
    "multiplayerLightDarkColorProvider",
    "freeBox",
    "cursorShape",
    "nameContainer",
    "text",
  ],

  freeBox: ["freeBox", "cursorShape", "nameContainer", "text"],
  cursorShape: ["cursorShape"],
  nameContainer: ["nameContainer", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  multiplayerLightDarkColorProvider: typeof MultiplayerLightDarkColorProvider;
  freeBox: "div";
  cursorShape: "svg";
  nameContainer: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMultiplayerCursor__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMultiplayerCursor__VariantsArgs;
    args?: PlasmicMultiplayerCursor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMultiplayerCursor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMultiplayerCursor__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMultiplayerCursor__ArgProps,
          internalVariantPropNames: PlasmicMultiplayerCursor__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicMultiplayerCursor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultiplayerCursor";
  } else {
    func.displayName = `PlasmicMultiplayerCursor.${nodeName}`;
  }
  return func;
}

export const PlasmicMultiplayerCursor = Object.assign(
  // Top-level PlasmicMultiplayerCursor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    multiplayerLightDarkColorProvider: makeNodeComponent(
      "multiplayerLightDarkColorProvider"
    ),

    freeBox: makeNodeComponent("freeBox"),
    cursorShape: makeNodeComponent("cursorShape"),
    nameContainer: makeNodeComponent("nameContainer"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicMultiplayerCursor
    internalVariantProps: PlasmicMultiplayerCursor__VariantProps,
    internalArgProps: PlasmicMultiplayerCursor__ArgProps,
  }
);

export default PlasmicMultiplayerCursor;
/* prettier-ignore-end */
