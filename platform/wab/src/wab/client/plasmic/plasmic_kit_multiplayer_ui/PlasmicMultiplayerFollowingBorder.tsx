// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eyjDfHaWPk4awNJAqhg4Cb
// Component: MgtZV0FX0Q
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import MultiplayerLightDarkColorProvider from "../../components/canvas/Multiplayer/MultiplayerLightDarkColorProvider"; // plasmic-import: JH5l4wUr73/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_multiplayer_ui.module.css"; // plasmic-import: eyjDfHaWPk4awNJAqhg4Cb/projectcss
import sty from "./PlasmicMultiplayerFollowingBorder.module.css"; // plasmic-import: MgtZV0FX0Q/css

export type PlasmicMultiplayerFollowingBorder__VariantMembers = {};

export type PlasmicMultiplayerFollowingBorder__VariantsArgs = {};
type VariantPropType = keyof PlasmicMultiplayerFollowingBorder__VariantsArgs;
export const PlasmicMultiplayerFollowingBorder__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMultiplayerFollowingBorder__ArgsType = {
  name?: string;
  hexColor?: string;
};

type ArgPropType = keyof PlasmicMultiplayerFollowingBorder__ArgsType;
export const PlasmicMultiplayerFollowingBorder__ArgProps =
  new Array<ArgPropType>("name", "hexColor");

export type PlasmicMultiplayerFollowingBorder__OverridesType = {
  root?: p.Flex<"div">;
  multiplayerLightDarkColorProvider?: p.Flex<
    typeof MultiplayerLightDarkColorProvider
  >;

  border?: p.Flex<"div">;
  nameTag?: p.Flex<"div">;
};

export interface DefaultMultiplayerFollowingBorderProps {
  name?: string;
  hexColor?: string;
  className?: string;
}

function PlasmicMultiplayerFollowingBorder__RenderFunc(props: {
  variants: PlasmicMultiplayerFollowingBorder__VariantsArgs;
  args: PlasmicMultiplayerFollowingBorder__ArgsType;
  overrides: PlasmicMultiplayerFollowingBorder__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Monir" as const,
          hexColor: "#CC0000" as const,
        },

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        sty.root
      )}
      style={(() => {
        try {
          return {
            borderColor: $props.hexColor,
          };
        } catch (e) {
          if (e instanceof TypeError) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <MultiplayerLightDarkColorProvider
        data-plasmic-name={"multiplayerLightDarkColorProvider"}
        data-plasmic-override={overrides.multiplayerLightDarkColorProvider}
        className={classNames(
          "__wab_instance",
          sty.multiplayerLightDarkColorProvider
        )}
        color={args.hexColor}
      >
        <ph.DataCtxReader>
          {($ctx) =>
            true ? (
              <div
                data-plasmic-name={"border"}
                data-plasmic-override={overrides.border}
                className={classNames(projectcss.all, sty.border)}
                style={(() => {
                  try {
                    return {
                      borderColor: $ctx.colors.backgroundColor,
                    };
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"nameTag"}
                  data-plasmic-override={overrides.nameTag}
                  className={classNames(projectcss.all, sty.nameTag)}
                  style={(() => {
                    try {
                      return {
                        backgroundColor: $ctx.colors.backgroundColor,
                        color: $ctx.colors.foregroundColor,
                      };
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nGj4L
                    )}
                  >
                    {"Following "}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p4Adk
                    )}
                  >
                    {(() => {
                      try {
                        return $props.name;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "UserName";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>
              </div>
            ) : null
          }
        </ph.DataCtxReader>
      </MultiplayerLightDarkColorProvider>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "multiplayerLightDarkColorProvider", "border", "nameTag"],
  multiplayerLightDarkColorProvider: [
    "multiplayerLightDarkColorProvider",
    "border",
    "nameTag",
  ],

  border: ["border", "nameTag"],
  nameTag: ["nameTag"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  multiplayerLightDarkColorProvider: typeof MultiplayerLightDarkColorProvider;
  border: "div";
  nameTag: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMultiplayerFollowingBorder__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMultiplayerFollowingBorder__VariantsArgs;
    args?: PlasmicMultiplayerFollowingBorder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMultiplayerFollowingBorder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMultiplayerFollowingBorder__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMultiplayerFollowingBorder__ArgProps,
          internalVariantPropNames:
            PlasmicMultiplayerFollowingBorder__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicMultiplayerFollowingBorder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultiplayerFollowingBorder";
  } else {
    func.displayName = `PlasmicMultiplayerFollowingBorder.${nodeName}`;
  }
  return func;
}

export const PlasmicMultiplayerFollowingBorder = Object.assign(
  // Top-level PlasmicMultiplayerFollowingBorder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    multiplayerLightDarkColorProvider: makeNodeComponent(
      "multiplayerLightDarkColorProvider"
    ),

    border: makeNodeComponent("border"),
    nameTag: makeNodeComponent("nameTag"),

    // Metadata about props expected for PlasmicMultiplayerFollowingBorder
    internalVariantProps: PlasmicMultiplayerFollowingBorder__VariantProps,
    internalArgProps: PlasmicMultiplayerFollowingBorder__ArgProps,
  }
);

export default PlasmicMultiplayerFollowingBorder;
/* prettier-ignore-end */
