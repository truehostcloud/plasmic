// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eyjDfHaWPk4awNJAqhg4Cb
// Component: JH5l4wUr73
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: D4RbnlpRXg3/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_multiplayer_ui.module.css"; // plasmic-import: eyjDfHaWPk4awNJAqhg4Cb/projectcss
import sty from "./PlasmicMultiplayerLightDarkColorProvider.module.css"; // plasmic-import: JH5l4wUr73/css

export type PlasmicMultiplayerLightDarkColorProvider__VariantMembers = {};

export type PlasmicMultiplayerLightDarkColorProvider__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicMultiplayerLightDarkColorProvider__VariantsArgs;
export const PlasmicMultiplayerLightDarkColorProvider__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMultiplayerLightDarkColorProvider__ArgsType = {
  color?: string;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMultiplayerLightDarkColorProvider__ArgsType;
export const PlasmicMultiplayerLightDarkColorProvider__ArgProps =
  new Array<ArgPropType>("color", "children");

export type PlasmicMultiplayerLightDarkColorProvider__OverridesType = {
  root?: p.Flex<"div">;
  dataProvider?: p.Flex<typeof DataProvider>;
};

export interface DefaultMultiplayerLightDarkColorProviderProps {
  color?: string;
  children?: React.ReactNode;
  className?: string;
}

function PlasmicMultiplayerLightDarkColorProvider__RenderFunc(props: {
  variants: PlasmicMultiplayerLightDarkColorProvider__VariantsArgs;
  args: PlasmicMultiplayerLightDarkColorProvider__ArgsType;
  overrides: PlasmicMultiplayerLightDarkColorProvider__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          color: "#CC0000" as const,
        },

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          plasmic_plasmic_kit_design_system_css.plasmic_tokens,
          sty.root
        )}
      >
        <DataProvider
          data-plasmic-name={"dataProvider"}
          data-plasmic-override={overrides.dataProvider}
          className={classNames("__wab_instance", sty.dataProvider)}
          data={(() => {
            try {
              return (() => {
                function isLightColor(color) {
                  const newHexColor = +(
                    "0x" +
                    color.slice(1).replace(color.length < 5 && /./g, "$&$&")
                  );

                  const r = newHexColor >> 16;
                  const g = (newHexColor >> 8) & 255;
                  const b = newHexColor & 255;

                  const brightness = (r * 299 + g * 587 + b * 114) / 1000;
                  return brightness > 155;
                }

                const isLight = isLightColor($props.color);
                return {
                  isLightColor: isLight,
                  backgroundColor: $props.color,
                  foregroundColor: isLight ? "#000000" : "#ffffff",
                };
              })();
            } catch (e) {
              if (e instanceof TypeError) {
                return {
                  backgroundColor: "#ff0000",
                  foregroundColor: "#ffffff",
                };
              }
              throw e;
            }
          })()}
          name={"colors" as const}
        >
          <ph.DataCtxReader>
            {($ctx) =>
              p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fbzf)}
                    style={(() => {
                      try {
                        return {
                          backgroundColor: $ctx.colors.backgroundColor,
                          color: $ctx.colors.foregroundColor,
                        };
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nLmle
                      )}
                    >
                      {"Foreground Color"}
                    </div>
                  </div>
                ),

                value: args.children,
              })
            }
          </ph.DataCtxReader>
        </DataProvider>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dataProvider"],
  dataProvider: ["dataProvider"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataProvider: typeof DataProvider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMultiplayerLightDarkColorProvider__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMultiplayerLightDarkColorProvider__VariantsArgs;
    args?: PlasmicMultiplayerLightDarkColorProvider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<
    // Specify variants directly as props
    PlasmicMultiplayerLightDarkColorProvider__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicMultiplayerLightDarkColorProvider__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames:
            PlasmicMultiplayerLightDarkColorProvider__ArgProps,
          internalVariantPropNames:
            PlasmicMultiplayerLightDarkColorProvider__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicMultiplayerLightDarkColorProvider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultiplayerLightDarkColorProvider";
  } else {
    func.displayName = `PlasmicMultiplayerLightDarkColorProvider.${nodeName}`;
  }
  return func;
}

export const PlasmicMultiplayerLightDarkColorProvider = Object.assign(
  // Top-level PlasmicMultiplayerLightDarkColorProvider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataProvider: makeNodeComponent("dataProvider"),

    // Metadata about props expected for PlasmicMultiplayerLightDarkColorProvider
    internalVariantProps:
      PlasmicMultiplayerLightDarkColorProvider__VariantProps,
    internalArgProps: PlasmicMultiplayerLightDarkColorProvider__ArgProps,
  }
);

export default PlasmicMultiplayerLightDarkColorProvider;
/* prettier-ignore-end */
