// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oermwjefjidrRRHcrxyCjQ
// Component: csXhXQDIqh
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  SingleBooleanChoiceArg,
  StrictProps,
  useTrigger,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import eyesvgZxKyHRa6Q6Pa from "../plasmic_kit_design_system/images/eyeSvg.svg"; // plasmic-import: Zx-kyHRa6Q6PA/picture
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_new_component.module.css"; // plasmic-import: oermwjefjidrRRHcrxyCjQ/projectcss
import sty from "./PlasmicNewComponentItem.module.css"; // plasmic-import: csXhXQDIqh/css

export type PlasmicNewComponentItem__VariantMembers = {
  isSelected: "isSelected";
  showControls: "showControls";
  large: "large";
};

export type PlasmicNewComponentItem__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  showControls?: SingleBooleanChoiceArg<"showControls">;
  large?: SingleBooleanChoiceArg<"large">;
};

type VariantPropType = keyof PlasmicNewComponentItem__VariantsArgs;
export const PlasmicNewComponentItem__VariantProps = new Array<VariantPropType>(
  "isSelected",
  "showControls",
  "large"
);

export type PlasmicNewComponentItem__ArgsType = {
  title?: React.ReactNode;
  controls?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNewComponentItem__ArgsType;
export const PlasmicNewComponentItem__ArgProps = new Array<ArgPropType>(
  "title",
  "controls"
);

export type PlasmicNewComponentItem__OverridesType = {
  root?: p.Flex<"button">;
  image?: p.Flex<"div">;
};

export interface DefaultNewComponentItemProps {
  title?: React.ReactNode;
  controls?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  showControls?: SingleBooleanChoiceArg<"showControls">;
  large?: SingleBooleanChoiceArg<"large">;
  className?: string;
}

function PlasmicNewComponentItem__RenderFunc(props: {
  variants: PlasmicNewComponentItem__VariantsArgs;
  args: PlasmicNewComponentItem__ArgsType;
  overrides: PlasmicNewComponentItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false,
    });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootisSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),

          [sty.rootlarge]: hasVariant(variants, "large", "large"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"image"}
        data-plasmic-override={overrides.image}
        className={classNames(projectcss.all, sty.image, {
          [sty.image___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.imageisSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),

          [sty.imagelarge]: hasVariant(variants, "large", "large"),
          [sty.imageshowControls]: hasVariant(
            variants,
            "showControls",
            "showControls"
          ),
        })}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__bTp1S, {
          [sty.freeBox___focusVisibleWithin__bTp1SiyX]:
            triggers.focusVisibleWithin_root,
          [sty.freeBoxisSelected__bTp1SkSSyv]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),

          [sty.freeBoxshowControls__bTp1Sz2I0H]: hasVariant(
            variants,
            "showControls",
            "showControls"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Component title",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitleshowControls]: hasVariant(
              variants,
              "showControls",
              "showControls"
            ),
          }),
        })}

        {(hasVariant(variants, "showControls", "showControls") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={""}
                  className={classNames(
                    projectcss.all,
                    projectcss.img,
                    sty.img__wePel
                  )}
                  loading={"lazy" as const}
                  src={eyesvgZxKyHRa6Q6Pa}
                />
              ),

              value: args.controls,
            })
          : null}
      </div>

      {(triggers.focusVisibleWithin_root ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__uUyA, {
            [sty.freeBox___focusVisibleWithin__uUyAiyX]:
              triggers.focusVisibleWithin_root,
          })}
        />
      ) : null}
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "image"],
  image: ["image"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  image: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewComponentItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicNewComponentItem__VariantsArgs;
  args?: PlasmicNewComponentItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicNewComponentItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicNewComponentItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewComponentItem__ArgProps,
      internalVariantPropNames: PlasmicNewComponentItem__VariantProps,
    });

    return PlasmicNewComponentItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewComponentItem";
  } else {
    func.displayName = `PlasmicNewComponentItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNewComponentItem = Object.assign(
  // Top-level PlasmicNewComponentItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    image: makeNodeComponent("image"),

    // Metadata about props expected for PlasmicNewComponentItem
    internalVariantProps: PlasmicNewComponentItem__VariantProps,
    internalArgProps: PlasmicNewComponentItem__ArgProps,
  }
);

export default PlasmicNewComponentItem;
/* prettier-ignore-end */
