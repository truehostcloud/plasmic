// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oermwjefjidrRRHcrxyCjQ
// Component: ZDk8OKbbuW
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  SingleBooleanChoiceArg,
  StrictProps,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as React from "react";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import NewComponentItem from "../../components/widgets/NewComponentItem"; // plasmic-import: csXhXQDIqh/component
import NewComponentSection from "../../components/widgets/NewComponentSection"; // plasmic-import: 3_QVitiqMh/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component
import eyesvgZxKyHRa6Q6Pa from "../plasmic_kit_design_system/images/eyeSvg.svg"; // plasmic-import: Zx-kyHRa6Q6PA/picture
import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import ChevronBottomIcon from "./icons/PlasmicIcon__ChevronBottom"; // plasmic-import: uSxcbtzK1j/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: yV__Xr76s/icon
import projectcss from "./plasmic_plasmic_kit_new_component.module.css"; // plasmic-import: oermwjefjidrRRHcrxyCjQ/projectcss
import sty from "./PlasmicNewComponentModal.module.css"; // plasmic-import: ZDk8OKbbuW/css

export type PlasmicNewComponentModal__VariantMembers = {
  showTemplates: "showTemplates";
  isPage: "isPage";
};

export type PlasmicNewComponentModal__VariantsArgs = {
  showTemplates?: SingleBooleanChoiceArg<"showTemplates">;
  isPage?: SingleBooleanChoiceArg<"isPage">;
};

type VariantPropType = keyof PlasmicNewComponentModal__VariantsArgs;
export const PlasmicNewComponentModal__VariantProps =
  new Array<VariantPropType>("showTemplates", "isPage");

export type PlasmicNewComponentModal__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNewComponentModal__ArgsType;
export const PlasmicNewComponentModal__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicNewComponentModal__OverridesType = {
  root?: p.Flex<"div">;
  body?: p.Flex<"div">;
  nameSection?: p.Flex<"div">;
  nameInput?: p.Flex<typeof Textbox>;
  expander?: p.Flex<"button">;
  sections?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  cancelButton?: p.Flex<typeof Button>;
  submitButton?: p.Flex<typeof Button>;
};

export interface DefaultNewComponentModalProps {
  children?: React.ReactNode;
  showTemplates?: SingleBooleanChoiceArg<"showTemplates">;
  isPage?: SingleBooleanChoiceArg<"isPage">;
  className?: string;
}

function PlasmicNewComponentModal__RenderFunc(props: {
  variants: PlasmicNewComponentModal__VariantsArgs;
  args: PlasmicNewComponentModal__ArgsType;
  overrides: PlasmicNewComponentModal__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisPage]: hasVariant(variants, "isPage", "isPage"),
          [sty.rootshowTemplates]: hasVariant(
            variants,
            "showTemplates",
            "showTemplates"
          ),
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(projectcss.all, sty.body, {
          [sty.bodyisPage]: hasVariant(variants, "isPage", "isPage"),
          [sty.bodyshowTemplates]: hasVariant(
            variants,
            "showTemplates",
            "showTemplates"
          ),
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"nameSection"}
          data-plasmic-override={overrides.nameSection}
          hasGap={true}
          className={classNames(projectcss.all, sty.nameSection)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__awiw5,
              {
                [sty.textisPage__awiw5GMsds]: hasVariant(
                  variants,
                  "isPage",
                  "isPage"
                ),
              }
            )}
          >
            {hasVariant(variants, "isPage", "isPage")
              ? "Name for the new page?"
              : "Name for the new component?"}
          </div>

          <Textbox
            data-plasmic-name={"nameInput"}
            data-plasmic-override={overrides.nameInput}
            className={classNames("__wab_instance", sty.nameInput, {
              [sty.nameInputisPage]: hasVariant(variants, "isPage", "isPage"),
            })}
            placeholder={
              hasVariant(variants, "isPage", "isPage")
                ? ("New page name" as const)
                : ("New component name" as const)
            }
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg___4IPyR)}
                role={"img"}
              />
            }
            styleType={["bordered", "white"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__haFhz)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        {(hasVariant(variants, "isPage", "isPage") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__idojB, {
              [sty.freeBoxisPage__idojBgMsds]: hasVariant(
                variants,
                "isPage",
                "isPage"
              ),
            })}
          >
            <button
              data-plasmic-name={"expander"}
              data-plasmic-override={overrides.expander}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.expander
              )}
            >
              <p.PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "showTemplates", "showTemplates")
                    ? ChevronBottomIcon
                    : ChevronRightIcon
                }
                className={classNames(projectcss.all, sty.svg__nc1Yg, {
                  [sty.svgshowTemplates__nc1YgChkSp]: hasVariant(
                    variants,
                    "showTemplates",
                    "showTemplates"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hBmC,
                  {
                    [sty.textshowTemplates__hBmCChkSp]: hasVariant(
                      variants,
                      "showTemplates",
                      "showTemplates"
                    ),
                  }
                )}
              >
                {hasVariant(variants, "showTemplates", "showTemplates")
                  ? "Hide component templates..."
                  : "Pick from a component template..."}
              </div>
            </button>
          </div>
        ) : null}
        {(
          hasVariant(variants, "isPage", "isPage")
            ? true
            : hasVariant(variants, "showTemplates", "showTemplates")
            ? true
            : false
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"sections"}
            data-plasmic-override={overrides.sections}
            hasGap={true}
            className={classNames(projectcss.all, sty.sections, {
              [sty.sectionsisPage]: hasVariant(variants, "isPage", "isPage"),
              [sty.sectionsshowTemplates]: hasVariant(
                variants,
                "showTemplates",
                "showTemplates"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <NewComponentSection
                    className={classNames(
                      "__wab_instance",
                      sty.newComponentSection__tgVaw
                    )}
                    hideTitle={true}
                  >
                    <NewComponentItem
                      className={classNames(
                        "__wab_instance",
                        sty.newComponentItem__dnmm0
                      )}
                      controls={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__cr7As
                          )}
                          loading={"lazy" as const}
                          src={eyesvgZxKyHRa6Q6Pa}
                        />
                      }
                    />
                  </NewComponentSection>

                  <NewComponentSection
                    className={classNames(
                      "__wab_instance",
                      sty.newComponentSection__nwPi
                    )}
                  >
                    <NewComponentItem
                      className={classNames(
                        "__wab_instance",
                        sty.newComponentItem__rnlot
                      )}
                      controls={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img___8Cygz
                          )}
                          loading={"lazy" as const}
                          src={eyesvgZxKyHRa6Q6Pa}
                        />
                      }
                    />

                    <NewComponentItem
                      className={classNames(
                        "__wab_instance",
                        sty.newComponentItem__yWQs
                      )}
                      controls={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__jrMaZ
                          )}
                          loading={"lazy" as const}
                          src={eyesvgZxKyHRa6Q6Pa}
                        />
                      }
                    />

                    <NewComponentItem
                      className={classNames(
                        "__wab_instance",
                        sty.newComponentItem___7WyKu
                      )}
                      controls={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__op150
                          )}
                          loading={"lazy" as const}
                          src={eyesvgZxKyHRa6Q6Pa}
                        />
                      }
                    />

                    {(
                      hasVariant(variants, "isPage", "isPage") ? true : false
                    ) ? (
                      <NewComponentItem
                        className={classNames(
                          "__wab_instance",
                          sty.newComponentItem___9Dmb,
                          {
                            [sty.newComponentItemisPage___9DmbGMsds]:
                              hasVariant(variants, "isPage", "isPage"),
                          }
                        )}
                        controls={
                          <img
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.img__c82Hx
                            )}
                            loading={"lazy" as const}
                            src={eyesvgZxKyHRa6Q6Pa}
                          />
                        }
                      />
                    ) : null}
                  </NewComponentSection>
                </React.Fragment>
              ),

              value: args.children,
            })}
          </p.Stack>
        ) : null}
      </p.Stack>

      <div
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer, {
          [sty.footershowTemplates]: hasVariant(
            variants,
            "showTemplates",
            "showTemplates"
          ),
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__yh2CX)}>
          <Button
            data-plasmic-name={"cancelButton"}
            data-plasmic-override={overrides.cancelButton}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__usoAe)}
                role={"img"}
              />
            }
            startIcon={
              <ArrowRightsvgIcon
                className={classNames(projectcss.all, sty.svg__sqtjl)}
                role={"img"}
              />
            }
            type={"secondary" as const}
          >
            {"Cancel"}
          </Button>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___9YjEg)}
        >
          <Button
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton)}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__aMluO)}
                role={"img"}
              />
            }
            startIcon={
              <ArrowRightsvgIcon
                className={classNames(projectcss.all, sty.svg__vy7Em)}
                role={"img"}
              />
            }
            type={"primary" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__drisI,
                {
                  [sty.textisPage__drisIgMsds]: hasVariant(
                    variants,
                    "isPage",
                    "isPage"
                  ),
                }
              )}
            >
              {hasVariant(variants, "isPage", "isPage")
                ? "Create page"
                : "Create component"}
            </div>
          </Button>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "body",
    "nameSection",
    "nameInput",
    "expander",
    "sections",
    "footer",
    "cancelButton",
    "submitButton",
  ],

  body: ["body", "nameSection", "nameInput", "expander", "sections"],
  nameSection: ["nameSection", "nameInput"],
  nameInput: ["nameInput"],
  expander: ["expander"],
  sections: ["sections"],
  footer: ["footer", "cancelButton", "submitButton"],
  cancelButton: ["cancelButton"],
  submitButton: ["submitButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  body: "div";
  nameSection: "div";
  nameInput: typeof Textbox;
  expander: "button";
  sections: "div";
  footer: "div";
  cancelButton: typeof Button;
  submitButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewComponentModal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicNewComponentModal__VariantsArgs;
  args?: PlasmicNewComponentModal__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicNewComponentModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicNewComponentModal__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewComponentModal__ArgProps,
      internalVariantPropNames: PlasmicNewComponentModal__VariantProps,
    });

    return PlasmicNewComponentModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewComponentModal";
  } else {
    func.displayName = `PlasmicNewComponentModal.${nodeName}`;
  }
  return func;
}

export const PlasmicNewComponentModal = Object.assign(
  // Top-level PlasmicNewComponentModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    body: makeNodeComponent("body"),
    nameSection: makeNodeComponent("nameSection"),
    nameInput: makeNodeComponent("nameInput"),
    expander: makeNodeComponent("expander"),
    sections: makeNodeComponent("sections"),
    footer: makeNodeComponent("footer"),
    cancelButton: makeNodeComponent("cancelButton"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicNewComponentModal
    internalVariantProps: PlasmicNewComponentModal__VariantProps,
    internalArgProps: PlasmicNewComponentModal__ArgProps,
  }
);

export default PlasmicNewComponentModal;
/* prettier-ignore-end */
