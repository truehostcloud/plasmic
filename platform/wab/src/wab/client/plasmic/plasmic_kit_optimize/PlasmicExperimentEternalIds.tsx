// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: APlN8dajrS9
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import ExpandButton from "../../components/widgets/ExpandButton"; // plasmic-import: JJhv0MV9DH/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentEternalIds.module.css"; // plasmic-import: APlN8dajrS9/css

import ArrowRightIcon from "../plasmic_kit/PlasmicIcon__ArrowRight"; // plasmic-import: etkVJMeZvaFjM/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicExperimentEternalIds__VariantMembers = {
  isExpanded: "isExpanded";
  isSegmentation: "isSegmentation";
};

export type PlasmicExperimentEternalIds__VariantsArgs = {
  isExpanded?: SingleBooleanChoiceArg<"isExpanded">;
  isSegmentation?: SingleBooleanChoiceArg<"isSegmentation">;
};

type VariantPropType = keyof PlasmicExperimentEternalIds__VariantsArgs;
export const PlasmicExperimentEternalIds__VariantProps =
  new Array<VariantPropType>("isExpanded", "isSegmentation");

export type PlasmicExperimentEternalIds__ArgsType = {};
type ArgPropType = keyof PlasmicExperimentEternalIds__ArgsType;
export const PlasmicExperimentEternalIds__ArgProps = new Array<ArgPropType>();

export type PlasmicExperimentEternalIds__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a">;
  expandBtn?: p.Flex<typeof ExpandButton>;
  experimentExternalIdInput?: p.Flex<typeof Textbox>;
  aExternalIdInput?: p.Flex<typeof Textbox>;
  bExternalIdInput?: p.Flex<typeof Textbox>;
};

export interface DefaultExperimentEternalIdsProps {
  isExpanded?: SingleBooleanChoiceArg<"isExpanded">;
  isSegmentation?: SingleBooleanChoiceArg<"isSegmentation">;
  className?: string;
}

export const defaultExperimentEternalIds__Args: Partial<PlasmicExperimentEternalIds__ArgsType> =
  {};

function PlasmicExperimentEternalIds__RenderFunc(props: {
  variants: PlasmicExperimentEternalIds__VariantsArgs;
  args: PlasmicExperimentEternalIds__ArgsType;
  overrides: PlasmicExperimentEternalIds__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultExperimentEternalIds__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisExpanded]: hasVariant(
            variants,
            "isExpanded",
            "isExpanded"
          ),
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__suSks)}>
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0FIp)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zqAfa
              )}
            >
              {"External IDs"}
            </div>

            <a
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              href={
                "https://docs.plasmic.app/learn/variations-external-ids/" as const
              }
              target={"_blank" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ykmV2
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecorationLine: "underline" }}
                  >
                    {"Docs"}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              <ArrowRightIcon
                className={classNames(projectcss.all, sty.svg__oQgLm)}
                role={"img"}
              />
            </a>
          </p.Stack>
        ) : null}

        <ExpandButton
          data-plasmic-name={"expandBtn"}
          data-plasmic-override={overrides.expandBtn}
          className={classNames("__wab_instance", sty.expandBtn, {
            [sty.expandBtnisExpanded]: hasVariant(
              variants,
              "isExpanded",
              "isExpanded"
            ),
          })}
          isExpanded={
            hasVariant(variants, "isExpanded", "isExpanded") ? true : undefined
          }
        />
      </div>

      {(hasVariant(variants, "isExpanded", "isExpanded") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__iPrfe, {
            [sty.freeBoxisExpanded__iPrfef4ZL]: hasVariant(
              variants,
              "isExpanded",
              "isExpanded"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__l6Yem, {
              [sty.freeBoxisExpanded__l6YeMf4ZL]: hasVariant(
                variants,
                "isExpanded",
                "isExpanded"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nztx2
              )}
            >
              {"Experiment"}
            </div>
          </div>

          <Textbox
            data-plasmic-name={"experimentExternalIdInput"}
            data-plasmic-override={overrides.experimentExternalIdInput}
            className={classNames(
              "__wab_instance",
              sty.experimentExternalIdInput,
              {
                [sty.experimentExternalIdInputisExpanded]: hasVariant(
                  variants,
                  "isExpanded",
                  "isExpanded"
                ),
              }
            )}
            placeholder={"e.g IzxbYxEfTeuq3bQqIAHB9g" as const}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__v4MTi)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__blbuz)}
                role={"img"}
              />
            }
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__oFsRl, {
              [sty.freeBoxisExpanded__oFsRlf4ZL]: hasVariant(
                variants,
                "isExpanded",
                "isExpanded"
              ),

              [sty.freeBoxisSegmentation__oFsRlPpNoh]: hasVariant(
                variants,
                "isSegmentation",
                "isSegmentation"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jv9BP,
                {
                  [sty.textisSegmentation__jv9BPppNoh]: hasVariant(
                    variants,
                    "isSegmentation",
                    "isSegmentation"
                  ),

                  [sty.textisSegmentation_isExpanded__jv9BPppNohF4ZL]:
                    hasVariant(variants, "isExpanded", "isExpanded") &&
                    hasVariant(variants, "isSegmentation", "isSegmentation"),
                }
              )}
            >
              {hasVariant(variants, "isExpanded", "isExpanded") &&
              hasVariant(variants, "isSegmentation", "isSegmentation")
                ? "Original"
                : "A"}
            </div>
          </div>

          <Textbox
            data-plasmic-name={"aExternalIdInput"}
            data-plasmic-override={overrides.aExternalIdInput}
            className={classNames("__wab_instance", sty.aExternalIdInput, {
              [sty.aExternalIdInputisExpanded]: hasVariant(
                variants,
                "isExpanded",
                "isExpanded"
              ),
            })}
            placeholder={
              hasVariant(variants, "isExpanded", "isExpanded")
                ? ("e.g IzxbYxEfTeuq3bQqIAHB9g.0" as const)
                : ("e.g 1" as const)
            }
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__lSj95)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg___52Kh8)}
                role={"img"}
              />
            }
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__ev88P, {
              [sty.freeBoxisExpanded__ev88Pf4ZL]: hasVariant(
                variants,
                "isExpanded",
                "isExpanded"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hPVq4,
                {
                  [sty.textisSegmentation_isExpanded__hPVq4PpNohF4ZL]:
                    hasVariant(variants, "isExpanded", "isExpanded") &&
                    hasVariant(variants, "isSegmentation", "isSegmentation"),
                }
              )}
            >
              {hasVariant(variants, "isExpanded", "isExpanded") &&
              hasVariant(variants, "isSegmentation", "isSegmentation")
                ? "Override"
                : "B"}
            </div>
          </div>

          <Textbox
            data-plasmic-name={"bExternalIdInput"}
            data-plasmic-override={overrides.bExternalIdInput}
            className={classNames("__wab_instance", sty.bExternalIdInput, {
              [sty.bExternalIdInputisExpanded]: hasVariant(
                variants,
                "isExpanded",
                "isExpanded"
              ),
            })}
            placeholder={
              hasVariant(variants, "isExpanded", "isExpanded")
                ? ("e.g IzxbYxEfTeuq3bQqIAHB9g.1" as const)
                : ("e.g 2" as const)
            }
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg___2Bl)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__m6RlB)}
                role={"img"}
              />
            }
          />
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "expandBtn",
    "experimentExternalIdInput",
    "aExternalIdInput",
    "bExternalIdInput",
  ],

  link: ["link"],
  expandBtn: ["expandBtn"],
  experimentExternalIdInput: ["experimentExternalIdInput"],
  aExternalIdInput: ["aExternalIdInput"],
  bExternalIdInput: ["bExternalIdInput"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  expandBtn: typeof ExpandButton;
  experimentExternalIdInput: typeof Textbox;
  aExternalIdInput: typeof Textbox;
  bExternalIdInput: typeof Textbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentEternalIds__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentEternalIds__VariantsArgs;
    args?: PlasmicExperimentEternalIds__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentEternalIds__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentEternalIds__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentEternalIds__ArgProps,
      internalVariantPropNames: PlasmicExperimentEternalIds__VariantProps,
    });

    return PlasmicExperimentEternalIds__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentEternalIds";
  } else {
    func.displayName = `PlasmicExperimentEternalIds.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentEternalIds = Object.assign(
  // Top-level PlasmicExperimentEternalIds renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    expandBtn: makeNodeComponent("expandBtn"),
    experimentExternalIdInput: makeNodeComponent("experimentExternalIdInput"),
    aExternalIdInput: makeNodeComponent("aExternalIdInput"),
    bExternalIdInput: makeNodeComponent("bExternalIdInput"),

    // Metadata about props expected for PlasmicExperimentEternalIds
    internalVariantProps: PlasmicExperimentEternalIds__VariantProps,
    internalArgProps: PlasmicExperimentEternalIds__ArgProps,
  }
);

export default PlasmicExperimentEternalIds;
/* prettier-ignore-end */
