// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: fjdDZovo7S
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentEvent.module.css"; // plasmic-import: fjdDZovo7S/css

import CopyIcon from "../plasmic_kit/PlasmicIcon__Copy"; // plasmic-import: 6WntF2TJV1ePx/icon
import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicExperimentEvent__VariantMembers = {
  withoutLabel: "withoutLabel";
};

export type PlasmicExperimentEvent__VariantsArgs = {
  withoutLabel?: SingleBooleanChoiceArg<"withoutLabel">;
};

type VariantPropType = keyof PlasmicExperimentEvent__VariantsArgs;
export const PlasmicExperimentEvent__VariantProps = new Array<VariantPropType>(
  "withoutLabel"
);

export type PlasmicExperimentEvent__ArgsType = {};
type ArgPropType = keyof PlasmicExperimentEvent__ArgsType;
export const PlasmicExperimentEvent__ArgProps = new Array<ArgPropType>();

export type PlasmicExperimentEvent__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
  input?: p.Flex<typeof Textbox>;
  copyButton?: p.Flex<typeof Button>;
};

export interface DefaultExperimentEventProps {
  withoutLabel?: SingleBooleanChoiceArg<"withoutLabel">;
  className?: string;
}

export const defaultExperimentEvent__Args: Partial<PlasmicExperimentEvent__ArgsType> =
  {};

function PlasmicExperimentEvent__RenderFunc(props: {
  variants: PlasmicExperimentEvent__VariantsArgs;
  args: PlasmicExperimentEvent__ArgsType;
  overrides: PlasmicExperimentEvent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultExperimentEvent__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootwithoutLabel]: hasVariant(
            variants,
            "withoutLabel",
            "withoutLabel"
          ),
        }
      )}
    >
      {(hasVariant(variants, "withoutLabel", "withoutLabel") ? true : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxwithoutLabel]: hasVariant(
              variants,
              "withoutLabel",
              "withoutLabel"
            ),
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textwithoutLabel]: hasVariant(
                  variants,
                  "withoutLabel",
                  "withoutLabel"
                ),
              }
            )}
          >
            {"Event ID"}
          </div>
        </div>
      ) : null}

      <Textbox
        data-plasmic-name={"input"}
        data-plasmic-override={overrides.input}
        className={classNames("__wab_instance", sty.input, {
          [sty.inputwithoutLabel]: hasVariant(
            variants,
            "withoutLabel",
            "withoutLabel"
          ),
        })}
        prefixIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__bdJjX)}
            role={"img"}
          />
        }
        styleType={["bordered"]}
        suffixIcon={
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg__kEFr)}
            role={"img"}
          />
        }
      />

      <Button
        data-plasmic-name={"copyButton"}
        data-plasmic-override={overrides.copyButton}
        className={classNames("__wab_instance", sty.copyButton, {
          [sty.copyButtonwithoutLabel]: hasVariant(
            variants,
            "withoutLabel",
            "withoutLabel"
          ),
        })}
        endIcon={
          <ChevronDownsvgIcon
            className={classNames(projectcss.all, sty.svg__qhqtk)}
            role={"img"}
          />
        }
        startIcon={
          <ArrowRightsvgIcon
            className={classNames(projectcss.all, sty.svg__hRkom)}
            role={"img"}
          />
        }
        type={"clear" as const}
      >
        <CopyIcon
          className={classNames(projectcss.all, sty.svg__e9Lpz, {
            [sty.svgwithoutLabel__e9LpZxoIIb]: hasVariant(
              variants,
              "withoutLabel",
              "withoutLabel"
            ),
          })}
          role={"img"}
        />
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text", "input", "copyButton"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
  input: ["input"],
  copyButton: ["copyButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
  input: typeof Textbox;
  copyButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentEvent__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentEvent__VariantsArgs;
    args?: PlasmicExperimentEvent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentEvent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentEvent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentEvent__ArgProps,
      internalVariantPropNames: PlasmicExperimentEvent__VariantProps,
    });

    return PlasmicExperimentEvent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentEvent";
  } else {
    func.displayName = `PlasmicExperimentEvent.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentEvent = Object.assign(
  // Top-level PlasmicExperimentEvent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    input: makeNodeComponent("input"),
    copyButton: makeNodeComponent("copyButton"),

    // Metadata about props expected for PlasmicExperimentEvent
    internalVariantProps: PlasmicExperimentEvent__VariantProps,
    internalArgProps: PlasmicExperimentEvent__ArgProps,
  }
);

export default PlasmicExperimentEvent;
/* prettier-ignore-end */
