// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: nlaW16gbH_n
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import InlineEditable from "../../components/InlineEditable"; // plasmic-import: btpz7A3thO/component
import ExperimentEternalIds from "../../components/splits/ExperimentEternalIds"; // plasmic-import: APlN8dajrS9/component
import ExperimentEvents from "../../components/splits/ExperimentEvents"; // plasmic-import: SRI244k7gOA/component
import ExperimentPanel from "../../components/splits/ExperimentPanel"; // plasmic-import: HtHxjHknmj_/component
import ExperimentToggle from "../../components/splits/ExperimentToggle"; // plasmic-import: b4qqi4IFfg/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentModal.module.css"; // plasmic-import: nlaW16gbH_n/css

import ArrowLeftsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowLeftSvg"; // plasmic-import: -d8Kjj4sp/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import PlussvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import RocketsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__RocketSvg"; // plasmic-import: uRQfbBjV9/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicExperimentModal__VariantMembers = {
  isExternal: "isExternal";
  withConversionEvents: "withConversionEvents";
};

export type PlasmicExperimentModal__VariantsArgs = {
  isExternal?: SingleBooleanChoiceArg<"isExternal">;
  withConversionEvents?: SingleBooleanChoiceArg<"withConversionEvents">;
};

type VariantPropType = keyof PlasmicExperimentModal__VariantsArgs;
export const PlasmicExperimentModal__VariantProps = new Array<VariantPropType>(
  "isExternal",
  "withConversionEvents"
);

export type PlasmicExperimentModal__ArgsType = {
  splitControls?: React.ReactNode;
  versions?: React.ReactNode;
};

type ArgPropType = keyof PlasmicExperimentModal__ArgsType;
export const PlasmicExperimentModal__ArgProps = new Array<ArgPropType>(
  "splitControls",
  "versions"
);

export type PlasmicExperimentModal__OverridesType = {
  root?: p.Flex<"div">;
  closeButton?: p.Flex<typeof IconButton>;
  title?: p.Flex<typeof InlineEditable>;
  type?: p.Flex<"div">;
  toggle?: p.Flex<typeof ExperimentToggle>;
  content?: p.Flex<"div">;
  descriptionInput?: p.Flex<typeof Textbox>;
  extraControls?: p.Flex<"div">;
  experimentEvents?: p.Flex<typeof ExperimentEvents>;
  experimentEternalIds?: p.Flex<typeof ExperimentEternalIds>;
  statusSelect?: p.Flex<typeof Select>;
};

export interface DefaultExperimentModalProps {
  splitControls?: React.ReactNode;
  versions?: React.ReactNode;
  isExternal?: SingleBooleanChoiceArg<"isExternal">;
  withConversionEvents?: SingleBooleanChoiceArg<"withConversionEvents">;
  className?: string;
}

export const defaultExperimentModal__Args: Partial<PlasmicExperimentModal__ArgsType> =
  {};

function PlasmicExperimentModal__RenderFunc(props: {
  variants: PlasmicExperimentModal__VariantsArgs;
  args: PlasmicExperimentModal__ArgsType;
  overrides: PlasmicExperimentModal__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultExperimentModal__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisExternal]: hasVariant(
            variants,
            "isExternal",
            "isExternal"
          ),
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___11O4T)}
      >
        <IconButton
          data-plasmic-name={"closeButton"}
          data-plasmic-override={overrides.closeButton}
          children2={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg__enOoY)}
              role={"img"}
            />
          }
          className={classNames("__wab_instance", sty.closeButton)}
          size={"small" as const}
          type={["seamless"]}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__eTsPm)}>
              <ArrowLeftsvgIcon
                className={classNames(projectcss.all, sty.svg__zq7Vw)}
                role={"img"}
              />
            </div>
          ) : null}
        </IconButton>

        {true ? (
          <RocketsvgIcon
            className={classNames(projectcss.all, sty.svg__dgnmD)}
            role={"img"}
          />
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__ciIgM)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__qhCgi)}>
                <InlineEditable
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  className={classNames("__wab_instance", sty.title)}
                  placeholder={"" as const}
                  value={"Homepage A/B Test" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lpHaj
                    )}
                  >
                    {"Homepage A/B Test"}
                  </div>
                </InlineEditable>
              </div>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__b7Yk2)}
              >
                <div
                  data-plasmic-name={"type"}
                  data-plasmic-override={overrides.type}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.type
                  )}
                >
                  {"A/B Test"}
                </div>
              </p.Stack>
            ) : null}
          </div>
        ) : null}
        {true ? (
          <ExperimentToggle
            data-plasmic-name={"toggle"}
            data-plasmic-override={overrides.toggle}
            className={classNames("__wab_instance", sty.toggle)}
          />
        ) : null}
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        hasGap={true}
        className={classNames(projectcss.all, sty.content)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___0TdUa)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__twqIm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gYkPa
                )}
              >
                {"Description"}
              </div>
            </div>
          ) : null}

          <Textbox
            data-plasmic-name={"descriptionInput"}
            data-plasmic-override={overrides.descriptionInput}
            className={classNames("__wab_instance", sty.descriptionInput)}
            placeholder={"Enter description..." as const}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__qnp6T)}
                role={"img"}
              />
            }
            styleType={["white", "bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__hHcgS)}
                role={"img"}
              />
            }
          />
        </div>

        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.splitControls,
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___00Ztj)}
            >
              <ExperimentPanel
                className={classNames(
                  "__wab_instance",
                  sty.experimentPanel__jdlKd
                )}
                isBase={true}
                versionName={"Version A"}
              />

              <ExperimentPanel
                className={classNames(
                  "__wab_instance",
                  sty.experimentPanel__wrBbX
                )}
                versionName={"Version B"}
              />
            </p.Stack>
          ),

          value: args.versions,
        })}
      </p.Stack>

      {true ? (
        <div
          data-plasmic-name={"extraControls"}
          data-plasmic-override={overrides.extraControls}
          className={classNames(projectcss.all, sty.extraControls, {
            [sty.extraControlswithConversionEvents]: hasVariant(
              variants,
              "withConversionEvents",
              "withConversionEvents"
            ),
          })}
        >
          {(
            hasVariant(variants, "withConversionEvents", "withConversionEvents")
              ? true
              : hasVariant(variants, "isExternal", "isExternal")
              ? true
              : false
          ) ? (
            <ExperimentEvents
              data-plasmic-name={"experimentEvents"}
              data-plasmic-override={overrides.experimentEvents}
              className={classNames("__wab_instance", sty.experimentEvents, {
                [sty.experimentEventsisExternal]: hasVariant(
                  variants,
                  "isExternal",
                  "isExternal"
                ),

                [sty.experimentEventswithConversionEvents]: hasVariant(
                  variants,
                  "withConversionEvents",
                  "withConversionEvents"
                ),
              })}
            />
          ) : null}
          {(hasVariant(variants, "isExternal", "isExternal") ? true : true) ? (
            <ExperimentEternalIds
              data-plasmic-name={"experimentEternalIds"}
              data-plasmic-override={overrides.experimentEternalIds}
              className={classNames(
                "__wab_instance",
                sty.experimentEternalIds,
                {
                  [sty.experimentEternalIdsisExternal]: hasVariant(
                    variants,
                    "isExternal",
                    "isExternal"
                  ),
                }
              )}
            />
          ) : null}
        </div>
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qpehh, {
            [sty.freeBoxisExternal__qpehHd8Y8]: hasVariant(
              variants,
              "isExternal",
              "isExternal"
            ),

            [sty.freeBoxwithConversionEvents__qpehhalzz7]: hasVariant(
              variants,
              "withConversionEvents",
              "withConversionEvents"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yIfwr
            )}
          >
            {"Change status"}
          </div>

          <Select
            data-plasmic-name={"statusSelect"}
            data-plasmic-override={overrides.statusSelect}
            className={classNames("__wab_instance", sty.statusSelect)}
            defaultValue={"" as const}
            icon={
              <PlussvgIcon
                className={classNames(projectcss.all, sty.svg__rBnVu)}
                role={"img"}
              />
            }
            name={"" as const}
            type={"hugging" as const}
          />
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "closeButton",
    "title",
    "type",
    "toggle",
    "content",
    "descriptionInput",
    "extraControls",
    "experimentEvents",
    "experimentEternalIds",
    "statusSelect",
  ],

  closeButton: ["closeButton"],
  title: ["title"],
  type: ["type"],
  toggle: ["toggle"],
  content: ["content", "descriptionInput"],
  descriptionInput: ["descriptionInput"],
  extraControls: ["extraControls", "experimentEvents", "experimentEternalIds"],
  experimentEvents: ["experimentEvents"],
  experimentEternalIds: ["experimentEternalIds"],
  statusSelect: ["statusSelect"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  closeButton: typeof IconButton;
  title: typeof InlineEditable;
  type: "div";
  toggle: typeof ExperimentToggle;
  content: "div";
  descriptionInput: typeof Textbox;
  extraControls: "div";
  experimentEvents: typeof ExperimentEvents;
  experimentEternalIds: typeof ExperimentEternalIds;
  statusSelect: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentModal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentModal__VariantsArgs;
    args?: PlasmicExperimentModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentModal__ArgProps,
      internalVariantPropNames: PlasmicExperimentModal__VariantProps,
    });

    return PlasmicExperimentModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentModal";
  } else {
    func.displayName = `PlasmicExperimentModal.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentModal = Object.assign(
  // Top-level PlasmicExperimentModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    closeButton: makeNodeComponent("closeButton"),
    title: makeNodeComponent("title"),
    type: makeNodeComponent("type"),
    toggle: makeNodeComponent("toggle"),
    content: makeNodeComponent("content"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    extraControls: makeNodeComponent("extraControls"),
    experimentEvents: makeNodeComponent("experimentEvents"),
    experimentEternalIds: makeNodeComponent("experimentEternalIds"),
    statusSelect: makeNodeComponent("statusSelect"),

    // Metadata about props expected for PlasmicExperimentModal
    internalVariantProps: PlasmicExperimentModal__VariantProps,
    internalArgProps: PlasmicExperimentModal__ArgProps,
  }
);

export default PlasmicExperimentModal;
/* prettier-ignore-end */
