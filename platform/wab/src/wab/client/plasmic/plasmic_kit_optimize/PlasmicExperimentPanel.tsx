// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: HtHxjHknmj_
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentPanel.module.css"; // plasmic-import: HtHxjHknmj_/css

import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import AwardsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__AwardSvg"; // plasmic-import: 4BNOoe_IX/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import EditsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EditSvg"; // plasmic-import: _Qa2gdunG/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: AKxTHEA6Rx/icon

export type PlasmicExperimentPanel__VariantMembers = {
  isBase: "isBase";
  isEditing: "isEditing";
  type: "schedule" | "segment";
};

export type PlasmicExperimentPanel__VariantsArgs = {
  isBase?: SingleBooleanChoiceArg<"isBase">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  type?: SingleChoiceArg<"schedule" | "segment">;
};

type VariantPropType = keyof PlasmicExperimentPanel__VariantsArgs;
export const PlasmicExperimentPanel__VariantProps = new Array<VariantPropType>(
  "isBase",
  "isEditing",
  "type"
);

export type PlasmicExperimentPanel__ArgsType = {
  versionName?: React.ReactNode;
  controlContainer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicExperimentPanel__ArgsType;
export const PlasmicExperimentPanel__ArgProps = new Array<ArgPropType>(
  "versionName",
  "controlContainer"
);

export type PlasmicExperimentPanel__OverridesType = {
  root?: p.Flex<"div">;
  baseVersionIcon?: p.Flex<"svg">;
  actionBtn?: p.Flex<typeof Button>;
  variantNameRow?: p.Flex<"div">;
  distribution2?: p.Flex<"div">;
  control2?: p.Flex<"div">;
  variantName2?: p.Flex<"div">;
  variantName?: p.Flex<typeof Textbox>;
  distribution?: p.Flex<"div">;
  control?: p.Flex<"div">;
  percentage?: p.Flex<"div">;
  controlContainer?: p.Flex<"div">;
  promoteBtn?: p.Flex<typeof Button>;
};

export interface DefaultExperimentPanelProps {
  versionName?: React.ReactNode;
  controlContainer?: React.ReactNode;
  isBase?: SingleBooleanChoiceArg<"isBase">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  type?: SingleChoiceArg<"schedule" | "segment">;
  className?: string;
}

export const defaultExperimentPanel__Args: Partial<PlasmicExperimentPanel__ArgsType> =
  {};

function PlasmicExperimentPanel__RenderFunc(props: {
  variants: PlasmicExperimentPanel__VariantsArgs;
  args: PlasmicExperimentPanel__ArgsType;
  overrides: PlasmicExperimentPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultExperimentPanel__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootisEditing]: hasVariant(variants, "isEditing", "isEditing") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__kOw0R)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__cP6F, {
            [sty.freeBoxisBase__cP6FhIPlF]: hasVariant(
              variants,
              "isBase",
              "isBase"
            ),
          })}
        >
          {true ? (
            <Icon4Icon
              data-plasmic-name={"baseVersionIcon"}
              data-plasmic-override={overrides.baseVersionIcon}
              className={classNames(projectcss.all, sty.baseVersionIcon, {
                [sty.baseVersionIconisBase]: hasVariant(
                  variants,
                  "isBase",
                  "isBase"
                ),
              })}
              role={"img"}
            />
          ) : null}
          {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jOrxG,
                {
                  [sty.textisBase__jOrxGhIPlF]: hasVariant(
                    variants,
                    "isBase",
                    "isBase"
                  ),
                }
              )}
            >
              {"Original"}
            </div>
          ) : null}
          {(hasVariant(variants, "isBase", "isBase") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Override",
                value: args.versionName,
                className: classNames(sty.slotTargetVersionName, {
                  [sty.slotTargetVersionNameisBase]: hasVariant(
                    variants,
                    "isBase",
                    "isBase"
                  ),

                  [sty.slotTargetVersionNameisEditing]: hasVariant(
                    variants,
                    "isEditing",
                    "isEditing"
                  ),
                }),
              })
            : null}
        </div>

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__hPxO4)}>
            {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
              <Button
                data-plasmic-name={"actionBtn"}
                data-plasmic-override={overrides.actionBtn}
                className={classNames("__wab_instance", sty.actionBtn, {
                  [sty.actionBtnisBase]: hasVariant(
                    variants,
                    "isBase",
                    "isBase"
                  ),

                  [sty.actionBtnisEditing]: hasVariant(
                    variants,
                    "isEditing",
                    "isEditing"
                  ),
                })}
                endIcon={
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg___6EEt)}
                    role={"img"}
                  />
                }
                size={"small" as const}
                startIcon={
                  <ArrowRightsvgIcon
                    className={classNames(projectcss.all, sty.svg__kdMmN)}
                    role={"img"}
                  />
                }
                type={"secondary" as const}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___5PG5, {
                      [sty.freeBoxisEditing___5PG5P9Q9]: hasVariant(
                        variants,
                        "isEditing",
                        "isEditing"
                      ),
                    })}
                  >
                    <p.PlasmicIcon
                      PlasmicIconType={
                        hasVariant(variants, "isEditing", "isEditing")
                          ? EditsvgIcon
                          : EditsvgIcon
                      }
                      className={classNames(projectcss.all, sty.svg__gonUg, {
                        [sty.svgisEditing__gonUgP9Q9]: hasVariant(
                          variants,
                          "isEditing",
                          "isEditing"
                        ),
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vZXyV,
                        {
                          [sty.textisEditing__vZXyVp9Q9]: hasVariant(
                            variants,
                            "isEditing",
                            "isEditing"
                          ),
                        }
                      )}
                    >
                      {hasVariant(variants, "isEditing", "isEditing")
                        ? "Stop Editing"
                        : "Edit"}
                    </div>
                  </p.Stack>
                ) : null}
              </Button>
            ) : null}
          </div>
        ) : null}
      </div>

      {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
        <div
          data-plasmic-name={"variantNameRow"}
          data-plasmic-override={overrides.variantNameRow}
          className={classNames(projectcss.all, sty.variantNameRow, {
            [sty.variantNameRowisBase]: hasVariant(
              variants,
              "isBase",
              "isBase"
            ),
          })}
        >
          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___3B2Gh, {
                [sty.freeBoxisBase___3B2GhhIPlF]: hasVariant(
                  variants,
                  "isBase",
                  "isBase"
                ),
              })}
            >
              <div
                data-plasmic-name={"distribution2"}
                data-plasmic-override={overrides.distribution2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.distribution2,
                  {
                    [sty.distribution2isEditing]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    ),
                  }
                )}
              >
                {"Name"}
              </div>
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"control2"}
              data-plasmic-override={overrides.control2}
              hasGap={true}
              className={classNames(projectcss.all, sty.control2, {
                [sty.control2isBase]: hasVariant(variants, "isBase", "isBase"),
              })}
            >
              {true ? (
                <div
                  data-plasmic-name={"variantName2"}
                  data-plasmic-override={overrides.variantName2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.variantName2
                  )}
                >
                  {"Variant Name"}
                </div>
              ) : null}

              <Textbox
                data-plasmic-name={"variantName"}
                data-plasmic-override={overrides.variantName}
                className={classNames("__wab_instance", sty.variantName)}
                styleType={["white", "bordered"]}
                value={"Variant Name" as const}
              />
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "isBase", "isBase") &&
        hasVariant(variants, "type", "segment")
          ? true
          : hasVariant(variants, "isBase", "isBase") &&
            hasVariant(variants, "type", "schedule")
          ? true
          : hasVariant(variants, "type", "segment")
          ? true
          : hasVariant(variants, "type", "schedule")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___8QuVy, {
            [sty.freeBoxisBase___8QuVyhIPlF]: hasVariant(
              variants,
              "isBase",
              "isBase"
            ),

            [sty.freeBoxtype_schedule___8QuVyJhGyh]: hasVariant(
              variants,
              "type",
              "schedule"
            ),

            [sty.freeBoxtype_schedule_isBase___8QuVyJhGyhHIPlF]:
              hasVariant(variants, "isBase", "isBase") &&
              hasVariant(variants, "type", "schedule"),
            [sty.freeBoxtype_segment___8QuVyRo3KZ]: hasVariant(
              variants,
              "type",
              "segment"
            ),

            [sty.freeBoxtype_segment_isBase___8QuVyRo3KZHIPlF]:
              hasVariant(variants, "isBase", "isBase") &&
              hasVariant(variants, "type", "segment"),
          })}
        >
          {(hasVariant(variants, "type", "segment") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__jruHn, {
                [sty.freeBoxisBase__jruHnhIPlF]: hasVariant(
                  variants,
                  "isBase",
                  "isBase"
                ),

                [sty.freeBoxtype_schedule__jruHnJhGyh]: hasVariant(
                  variants,
                  "type",
                  "schedule"
                ),

                [sty.freeBoxtype_schedule_isBase__jruHnJhGyhHIPlF]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "schedule"),
                [sty.freeBoxtype_segment__jruHnRo3KZ]: hasVariant(
                  variants,
                  "type",
                  "segment"
                ),

                [sty.freeBoxtype_segment_isBase__jruHnRo3KZHIPlF]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "segment"),
              })}
            >
              <div
                data-plasmic-name={"distribution"}
                data-plasmic-override={overrides.distribution}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.distribution,
                  {
                    [sty.distributionisBase]: hasVariant(
                      variants,
                      "isBase",
                      "isBase"
                    ),

                    [sty.distributionisEditing]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    ),

                    [sty.distributiontype_schedule]: hasVariant(
                      variants,
                      "type",
                      "schedule"
                    ),

                    [sty.distributiontype_segment]: hasVariant(
                      variants,
                      "type",
                      "segment"
                    ),
                  }
                )}
              >
                {hasVariant(variants, "type", "segment")
                  ? "Condition"
                  : hasVariant(variants, "type", "schedule")
                  ? "Date range"
                  : "Distribution"}
              </div>
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"control"}
              data-plasmic-override={overrides.control}
              hasGap={true}
              className={classNames(projectcss.all, sty.control, {
                [sty.controlisBase]: hasVariant(variants, "isBase", "isBase"),
                [sty.controlisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                ),

                [sty.controltype_schedule]: hasVariant(
                  variants,
                  "type",
                  "schedule"
                ),

                [sty.controltype_schedule_isBase]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "schedule"),
                [sty.controltype_segment]: hasVariant(
                  variants,
                  "type",
                  "segment"
                ),

                [sty.controltype_segment_isBase]:
                  hasVariant(variants, "isBase", "isBase") &&
                  hasVariant(variants, "type", "segment"),
              })}
            >
              {(
                hasVariant(variants, "type", "segment")
                  ? true
                  : hasVariant(variants, "type", "schedule")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__ct5T, {
                    [sty.freeBoxtype_schedule__ct5TJhGyh]: hasVariant(
                      variants,
                      "type",
                      "schedule"
                    ),

                    [sty.freeBoxtype_segment__ct5TRo3KZ]: hasVariant(
                      variants,
                      "type",
                      "segment"
                    ),
                  })}
                >
                  {(hasVariant(variants, "type", "schedule") ? true : true) ? (
                    <div
                      data-plasmic-name={"percentage"}
                      data-plasmic-override={overrides.percentage}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.percentage,
                        {
                          [sty.percentagetype_schedule]: hasVariant(
                            variants,
                            "type",
                            "schedule"
                          ),
                        }
                      )}
                    >
                      {"50%"}
                    </div>
                  ) : null}
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"controlContainer"}
                data-plasmic-override={overrides.controlContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.controlContainer, {
                  [sty.controlContainertype_schedule]: hasVariant(
                    variants,
                    "type",
                    "schedule"
                  ),

                  [sty.controlContainertype_segment]: hasVariant(
                    variants,
                    "type",
                    "segment"
                  ),
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.controlContainer,
                })}
              </p.Stack>
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(variants, "type", "segment")
          ? true
          : hasVariant(variants, "type", "schedule")
          ? true
          : hasVariant(variants, "isBase", "isBase")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__h3Dp, {
            [sty.freeBoxisBase__h3DphIPlF]: hasVariant(
              variants,
              "isBase",
              "isBase"
            ),

            [sty.freeBoxisEditing__h3DpP9Q9]: hasVariant(
              variants,
              "isEditing",
              "isEditing"
            ),

            [sty.freeBoxtype_schedule__h3DpJhGyh]: hasVariant(
              variants,
              "type",
              "schedule"
            ),

            [sty.freeBoxtype_segment__h3DpRo3KZ]: hasVariant(
              variants,
              "type",
              "segment"
            ),
          })}
        >
          {(hasVariant(variants, "isBase", "isBase") ? true : true) ? (
            <Button
              data-plasmic-name={"promoteBtn"}
              data-plasmic-override={overrides.promoteBtn}
              className={classNames("__wab_instance", sty.promoteBtn, {
                [sty.promoteBtnisBase]: hasVariant(
                  variants,
                  "isBase",
                  "isBase"
                ),

                [sty.promoteBtnisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                ),

                [sty.promoteBtntype_schedule]: hasVariant(
                  variants,
                  "type",
                  "schedule"
                ),

                [sty.promoteBtntype_segment]: hasVariant(
                  variants,
                  "type",
                  "segment"
                ),
              })}
              endIcon={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__vuSx4)}
                  role={"img"}
                />
              }
              size={"small" as const}
              startIcon={
                <ArrowRightsvgIcon
                  className={classNames(projectcss.all, sty.svg___9ByMe)}
                  role={"img"}
                />
              }
              type={"secondary" as const}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mHKW, {
                    [sty.freeBoxisEditing__mHKWp9Q9]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    ),
                  })}
                >
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "isEditing", "isEditing")
                        ? AwardsvgIcon
                        : AwardsvgIcon
                    }
                    className={classNames(projectcss.all, sty.svg___8Bs54, {
                      [sty.svgisEditing___8Bs54P9Q9]: hasVariant(
                        variants,
                        "isEditing",
                        "isEditing"
                      ),
                    })}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bR9Ox,
                      {
                        [sty.textisEditing__bR9Oxp9Q9]: hasVariant(
                          variants,
                          "isEditing",
                          "isEditing"
                        ),
                      }
                    )}
                  >
                    {"Promote"}
                  </div>
                </p.Stack>
              ) : null}
            </Button>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "baseVersionIcon",
    "actionBtn",
    "variantNameRow",
    "distribution2",
    "control2",
    "variantName2",
    "variantName",
    "distribution",
    "control",
    "percentage",
    "controlContainer",
    "promoteBtn",
  ],

  baseVersionIcon: ["baseVersionIcon"],
  actionBtn: ["actionBtn"],
  variantNameRow: [
    "variantNameRow",
    "distribution2",
    "control2",
    "variantName2",
    "variantName",
  ],

  distribution2: ["distribution2"],
  control2: ["control2", "variantName2", "variantName"],
  variantName2: ["variantName2"],
  variantName: ["variantName"],
  distribution: ["distribution"],
  control: ["control", "percentage", "controlContainer"],
  percentage: ["percentage"],
  controlContainer: ["controlContainer"],
  promoteBtn: ["promoteBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  baseVersionIcon: "svg";
  actionBtn: typeof Button;
  variantNameRow: "div";
  distribution2: "div";
  control2: "div";
  variantName2: "div";
  variantName: typeof Textbox;
  distribution: "div";
  control: "div";
  percentage: "div";
  controlContainer: "div";
  promoteBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentPanel__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentPanel__VariantsArgs;
    args?: PlasmicExperimentPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentPanel__ArgProps,
      internalVariantPropNames: PlasmicExperimentPanel__VariantProps,
    });

    return PlasmicExperimentPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentPanel";
  } else {
    func.displayName = `PlasmicExperimentPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentPanel = Object.assign(
  // Top-level PlasmicExperimentPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    baseVersionIcon: makeNodeComponent("baseVersionIcon"),
    actionBtn: makeNodeComponent("actionBtn"),
    variantNameRow: makeNodeComponent("variantNameRow"),
    distribution2: makeNodeComponent("distribution2"),
    control2: makeNodeComponent("control2"),
    variantName2: makeNodeComponent("variantName2"),
    variantName: makeNodeComponent("variantName"),
    distribution: makeNodeComponent("distribution"),
    control: makeNodeComponent("control"),
    percentage: makeNodeComponent("percentage"),
    controlContainer: makeNodeComponent("controlContainer"),
    promoteBtn: makeNodeComponent("promoteBtn"),

    // Metadata about props expected for PlasmicExperimentPanel
    internalVariantProps: PlasmicExperimentPanel__VariantProps,
    internalArgProps: PlasmicExperimentPanel__ArgProps,
  }
);

export default PlasmicExperimentPanel;
/* prettier-ignore-end */
