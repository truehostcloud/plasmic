// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: 74OdgMxR-T
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger,
} from "@plasmicapp/react-web";
import ListItem from "../../components/ListItem"; // plasmic-import: v31d9_ANqk/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentRow.module.css"; // plasmic-import: 74OdgMxR-T/css

import Refresh2SvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__Refresh2Svg"; // plasmic-import: yxGlT5JuT/icon

export type PlasmicExperimentRow__VariantMembers = {};

export type PlasmicExperimentRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicExperimentRow__VariantsArgs;
export const PlasmicExperimentRow__VariantProps = new Array<VariantPropType>();

export type PlasmicExperimentRow__ArgsType = {};
type ArgPropType = keyof PlasmicExperimentRow__ArgsType;
export const PlasmicExperimentRow__ArgProps = new Array<ArgPropType>();

export type PlasmicExperimentRow__OverridesType = {
  root?: p.Flex<"div">;
  listItem?: p.Flex<typeof ListItem>;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  title?: p.Flex<"div">;
  status?: p.Flex<"div">;
};

export interface DefaultExperimentRowProps {
  className?: string;
}

export const defaultExperimentRow__Args: Partial<PlasmicExperimentRow__ArgsType> =
  {};

function PlasmicExperimentRow__RenderFunc(props: {
  variants: PlasmicExperimentRow__VariantsArgs;
  args: PlasmicExperimentRow__ArgsType;
  overrides: PlasmicExperimentRow__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultExperimentRow__Args, props.args);
  const $props = args;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <ListItem
        data-plasmic-name={"listItem"}
        data-plasmic-override={overrides.listItem}
        actions={null}
        className={classNames("__wab_instance", sty.listItem)}
        hasMenu={triggers.hover_root ? true : undefined}
        icon={
          <Refresh2SvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title
            )}
          >
            {"Enter some text"}
          </div>

          <div
            data-plasmic-name={"status"}
            data-plasmic-override={overrides.status}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.status
            )}
          >
            {"Running"}
          </div>
        </div>
      </ListItem>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "listItem", "svg", "freeBox", "title", "status"],
  listItem: ["listItem", "svg", "freeBox", "title", "status"],
  svg: ["svg"],
  freeBox: ["freeBox", "title", "status"],
  title: ["title"],
  status: ["status"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  listItem: typeof ListItem;
  svg: "svg";
  freeBox: "div";
  title: "div";
  status: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentRow__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentRow__VariantsArgs;
    args?: PlasmicExperimentRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentRow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentRow__ArgProps,
      internalVariantPropNames: PlasmicExperimentRow__VariantProps,
    });

    return PlasmicExperimentRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentRow";
  } else {
    func.displayName = `PlasmicExperimentRow.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentRow = Object.assign(
  // Top-level PlasmicExperimentRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listItem: makeNodeComponent("listItem"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    title: makeNodeComponent("title"),
    status: makeNodeComponent("status"),

    // Metadata about props expected for PlasmicExperimentRow
    internalVariantProps: PlasmicExperimentRow__VariantProps,
    internalArgProps: PlasmicExperimentRow__ArgProps,
  }
);

export default PlasmicExperimentRow;
/* prettier-ignore-end */
