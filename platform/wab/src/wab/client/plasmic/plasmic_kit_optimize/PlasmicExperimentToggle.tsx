// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: b4qqi4IFfg
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicExperimentToggle.module.css"; // plasmic-import: b4qqi4IFfg/css

export type PlasmicExperimentToggle__VariantMembers = {
  checked: "checked";
};

export type PlasmicExperimentToggle__VariantsArgs = {
  checked?: SingleBooleanChoiceArg<"checked">;
};

type VariantPropType = keyof PlasmicExperimentToggle__VariantsArgs;
export const PlasmicExperimentToggle__VariantProps = new Array<VariantPropType>(
  "checked"
);

export type PlasmicExperimentToggle__ArgsType = {};
type ArgPropType = keyof PlasmicExperimentToggle__ArgsType;
export const PlasmicExperimentToggle__ArgProps = new Array<ArgPropType>();

export type PlasmicExperimentToggle__OverridesType = {
  root?: p.Flex<"div">;
  selectionIndicator?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultExperimentToggleProps {
  checked?: SingleBooleanChoiceArg<"checked">;
  className?: string;
}

export const defaultExperimentToggle__Args: Partial<PlasmicExperimentToggle__ArgsType> =
  {};

function PlasmicExperimentToggle__RenderFunc(props: {
  variants: PlasmicExperimentToggle__VariantsArgs;
  args: PlasmicExperimentToggle__ArgsType;
  overrides: PlasmicExperimentToggle__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultExperimentToggle__Args, props.args);
  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          plasmic_plasmic_kit_design_system_css.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          sty.root
        )}
        title={"Enable / Disable" as const}
      >
        <div
          data-plasmic-name={"selectionIndicator"}
          data-plasmic-override={overrides.selectionIndicator}
          className={classNames(projectcss.all, sty.selectionIndicator, {
            [sty.selectionIndicatorchecked]: hasVariant(
              variants,
              "checked",
              "checked"
            ),
          })}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          />
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___9ZPbi,
            {
              [sty.textchecked___9ZPbiMqCa9]: hasVariant(
                variants,
                "checked",
                "checked"
              ),
            }
          )}
        >
          {"OFF"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nPcXv,
            {
              [sty.textchecked__nPcXvMqCa9]: hasVariant(
                variants,
                "checked",
                "checked"
              ),
            }
          )}
        >
          {"ON"}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "selectionIndicator", "freeBox"],
  selectionIndicator: ["selectionIndicator", "freeBox"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  selectionIndicator: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExperimentToggle__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExperimentToggle__VariantsArgs;
    args?: PlasmicExperimentToggle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExperimentToggle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExperimentToggle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExperimentToggle__ArgProps,
      internalVariantPropNames: PlasmicExperimentToggle__VariantProps,
    });

    return PlasmicExperimentToggle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExperimentToggle";
  } else {
    func.displayName = `PlasmicExperimentToggle.${nodeName}`;
  }
  return func;
}

export const PlasmicExperimentToggle = Object.assign(
  // Top-level PlasmicExperimentToggle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    selectionIndicator: makeNodeComponent("selectionIndicator"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicExperimentToggle
    internalVariantProps: PlasmicExperimentToggle__VariantProps,
    internalArgProps: PlasmicExperimentToggle__ArgProps,
  }
);

export default PlasmicExperimentToggle;
/* prettier-ignore-end */
