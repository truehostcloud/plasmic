// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: 5hDgjGS3IR
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicSegmentAddField.module.css"; // plasmic-import: 5hDgjGS3IR/css

import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import PlussvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicSegmentAddField__VariantMembers = {};

export type PlasmicSegmentAddField__VariantsArgs = {};
type VariantPropType = keyof PlasmicSegmentAddField__VariantsArgs;
export const PlasmicSegmentAddField__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSegmentAddField__ArgsType = {};
type ArgPropType = keyof PlasmicSegmentAddField__ArgsType;
export const PlasmicSegmentAddField__ArgProps = new Array<ArgPropType>();

export type PlasmicSegmentAddField__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  fieldName?: p.Flex<typeof Textbox>;
  fieldType?: p.Flex<typeof Select>;
  addFieldBtn?: p.Flex<typeof Button>;
};

export interface DefaultSegmentAddFieldProps {
  className?: string;
}

export const defaultSegmentAddField__Args: Partial<PlasmicSegmentAddField__ArgsType> =
  {};

function PlasmicSegmentAddField__RenderFunc(props: {
  variants: PlasmicSegmentAddField__VariantsArgs;
  args: PlasmicSegmentAddField__ArgsType;
  overrides: PlasmicSegmentAddField__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSegmentAddField__Args, props.args);
  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Add custom field type"}
      </div>

      <Textbox
        data-plasmic-name={"fieldName"}
        data-plasmic-override={overrides.fieldName}
        className={classNames("__wab_instance", sty.fieldName)}
        placeholder={"Field name" as const}
        prefixIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__o2Qg)}
            role={"img"}
          />
        }
        suffixIcon={
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg__ysTq)}
            role={"img"}
          />
        }
        value={"" as const}
      />

      <Select
        data-plasmic-name={"fieldType"}
        data-plasmic-override={overrides.fieldType}
        className={classNames("__wab_instance", sty.fieldType)}
        icon={
          <PlussvgIcon
            className={classNames(projectcss.all, sty.svg__dOswJ)}
            role={"img"}
          />
        }
        name={"" as const}
      />

      <Button
        data-plasmic-name={"addFieldBtn"}
        data-plasmic-override={overrides.addFieldBtn}
        className={classNames("__wab_instance", sty.addFieldBtn)}
        endIcon={
          <ChevronDownsvgIcon
            className={classNames(projectcss.all, sty.svg__xrA4S)}
            role={"img"}
          />
        }
        startIcon={
          <ArrowRightsvgIcon
            className={classNames(projectcss.all, sty.svg__ib6Zu)}
            role={"img"}
          />
        }
      >
        {"Add"}
      </Button>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "fieldName", "fieldType", "addFieldBtn"],
  text: ["text"],
  fieldName: ["fieldName"],
  fieldType: ["fieldType"],
  addFieldBtn: ["addFieldBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  fieldName: typeof Textbox;
  fieldType: typeof Select;
  addFieldBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSegmentAddField__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSegmentAddField__VariantsArgs;
    args?: PlasmicSegmentAddField__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSegmentAddField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSegmentAddField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSegmentAddField__ArgProps,
      internalVariantPropNames: PlasmicSegmentAddField__VariantProps,
    });

    return PlasmicSegmentAddField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSegmentAddField";
  } else {
    func.displayName = `PlasmicSegmentAddField.${nodeName}`;
  }
  return func;
}

export const PlasmicSegmentAddField = Object.assign(
  // Top-level PlasmicSegmentAddField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    fieldName: makeNodeComponent("fieldName"),
    fieldType: makeNodeComponent("fieldType"),
    addFieldBtn: makeNodeComponent("addFieldBtn"),

    // Metadata about props expected for PlasmicSegmentAddField
    internalVariantProps: PlasmicSegmentAddField__VariantProps,
    internalArgProps: PlasmicSegmentAddField__ArgProps,
  }
);

export default PlasmicSegmentAddField;
/* prettier-ignore-end */
