// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: 60hnxzzKks
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicSegmentControls.module.css"; // plasmic-import: 60hnxzzKks/css

import SettingsSliderssvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SettingsSlidersSvg"; // plasmic-import: Y1oJwH9hP/icon

export type PlasmicSegmentControls__VariantMembers = {
  hasRules: "hasRules";
};

export type PlasmicSegmentControls__VariantsArgs = {
  hasRules?: SingleBooleanChoiceArg<"hasRules">;
};

type VariantPropType = keyof PlasmicSegmentControls__VariantsArgs;
export const PlasmicSegmentControls__VariantProps = new Array<VariantPropType>(
  "hasRules"
);

export type PlasmicSegmentControls__ArgsType = {};
type ArgPropType = keyof PlasmicSegmentControls__ArgsType;
export const PlasmicSegmentControls__ArgProps = new Array<ArgPropType>();

export type PlasmicSegmentControls__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  targetBtn?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  targetRules?: p.Flex<"div">;
  rulesContent?: p.Flex<"div">;
};

export interface DefaultSegmentControlsProps {
  hasRules?: SingleBooleanChoiceArg<"hasRules">;
  className?: string;
}

export const defaultSegmentControls__Args: Partial<PlasmicSegmentControls__ArgsType> =
  {};

function PlasmicSegmentControls__RenderFunc(props: {
  variants: PlasmicSegmentControls__VariantsArgs;
  args: PlasmicSegmentControls__ArgsType;
  overrides: PlasmicSegmentControls__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSegmentControls__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zcwNa
            )}
          >
            {"Targeting"}
          </div>
        </div>
      ) : null}
      {true ? (
        <Button
          data-plasmic-name={"targetBtn"}
          data-plasmic-override={overrides.targetBtn}
          className={classNames("__wab_instance", sty.targetBtn)}
          pointerCursor={true}
          size={"stretch" as const}
          startIcon={
            <SettingsSliderssvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          }
          type={"primary" as const}
          withIcons={"startIcon" as const}
        >
          {"Edit Rules"}
        </Button>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"targetRules"}
          data-plasmic-override={overrides.targetRules}
          className={classNames(projectcss.all, sty.targetRules, {
            [sty.targetRuleshasRules]: hasVariant(
              variants,
              "hasRules",
              "hasRules"
            ),
          })}
        >
          {(hasVariant(variants, "hasRules", "hasRules") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c2TBw,
                {
                  [sty.texthasRules__c2TBw9DniU]: hasVariant(
                    variants,
                    "hasRules",
                    "hasRules"
                  ),
                }
              )}
            >
              {"No rules set."}
            </div>
          ) : null}
          {(hasVariant(variants, "hasRules", "hasRules") ? true : true) ? (
            <div
              data-plasmic-name={"rulesContent"}
              data-plasmic-override={overrides.rulesContent}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.rulesContent,
                {
                  [sty.rulesContenthasRules]: hasVariant(
                    variants,
                    "hasRules",
                    "hasRules"
                  ),
                }
              )}
            >
              {
                "(Username = John AND User.login = john123) AND (Username = Peter AND User.login = john123)..."
              }
            </div>
          ) : null}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "targetBtn", "svg", "targetRules", "rulesContent"],
  freeBox: ["freeBox"],
  targetBtn: ["targetBtn", "svg"],
  svg: ["svg"],
  targetRules: ["targetRules", "rulesContent"],
  rulesContent: ["rulesContent"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  targetBtn: typeof Button;
  svg: "svg";
  targetRules: "div";
  rulesContent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSegmentControls__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSegmentControls__VariantsArgs;
    args?: PlasmicSegmentControls__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSegmentControls__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSegmentControls__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSegmentControls__ArgProps,
      internalVariantPropNames: PlasmicSegmentControls__VariantProps,
    });

    return PlasmicSegmentControls__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSegmentControls";
  } else {
    func.displayName = `PlasmicSegmentControls.${nodeName}`;
  }
  return func;
}

export const PlasmicSegmentControls = Object.assign(
  // Top-level PlasmicSegmentControls renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    targetBtn: makeNodeComponent("targetBtn"),
    svg: makeNodeComponent("svg"),
    targetRules: makeNodeComponent("targetRules"),
    rulesContent: makeNodeComponent("rulesContent"),

    // Metadata about props expected for PlasmicSegmentControls
    internalVariantProps: PlasmicSegmentControls__VariantProps,
    internalArgProps: PlasmicSegmentControls__ArgProps,
  }
);

export default PlasmicSegmentControls;
/* prettier-ignore-end */
