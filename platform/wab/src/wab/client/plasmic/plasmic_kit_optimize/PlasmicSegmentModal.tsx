// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtUDvxG6cmBbSzqLikNzoP
// Component: evzY7iORow
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_optimize.module.css"; // plasmic-import: gtUDvxG6cmBbSzqLikNzoP/projectcss
import sty from "./PlasmicSegmentModal.module.css"; // plasmic-import: evzY7iORow/css

export type PlasmicSegmentModal__VariantMembers = {};

export type PlasmicSegmentModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicSegmentModal__VariantsArgs;
export const PlasmicSegmentModal__VariantProps = new Array<VariantPropType>();

export type PlasmicSegmentModal__ArgsType = {
  builder?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSegmentModal__ArgsType;
export const PlasmicSegmentModal__ArgProps = new Array<ArgPropType>("builder");

export type PlasmicSegmentModal__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  link?: p.Flex<"a">;
};

export interface DefaultSegmentModalProps {
  builder?: React.ReactNode;
  className?: string;
}

export const defaultSegmentModal__Args: Partial<PlasmicSegmentModal__ArgsType> =
  {};

function PlasmicSegmentModal__RenderFunc(props: {
  variants: PlasmicSegmentModal__VariantsArgs;
  args: PlasmicSegmentModal__ArgsType;
  overrides: PlasmicSegmentModal__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSegmentModal__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.builder,
        })}
      </div>

      <a
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link
        )}
        href={"https://docs.plasmic.app/learn/registering-traits/" as const}
        target={"_blank" as const}
      >
        {"How to register custom traits?"}
      </a>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link"],
  freeBox: ["freeBox"],
  link: ["link"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSegmentModal__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSegmentModal__VariantsArgs;
    args?: PlasmicSegmentModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSegmentModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSegmentModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSegmentModal__ArgProps,
      internalVariantPropNames: PlasmicSegmentModal__VariantProps,
    });

    return PlasmicSegmentModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSegmentModal";
  } else {
    func.displayName = `PlasmicSegmentModal.${nodeName}`;
  }
  return func;
}

export const PlasmicSegmentModal = Object.assign(
  // Top-level PlasmicSegmentModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicSegmentModal
    internalVariantProps: PlasmicSegmentModal__VariantProps,
    internalArgProps: PlasmicSegmentModal__ArgProps,
  }
);

export default PlasmicSegmentModal;
/* prettier-ignore-end */
