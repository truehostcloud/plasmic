// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6BCq4vMow1yqGKFdcP68Rz
// Component: jTLog2H3DE
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import Switch from "../../components/Switch"; // plasmic-import: ntKkcfMNg2s/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_page_settings.module.css"; // plasmic-import: 6BCq4vMow1yqGKFdcP68Rz/projectcss
import sty from "./PlasmicPageSettings.module.css"; // plasmic-import: jTLog2H3DE/css

import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicPageSettings__VariantMembers = {};

export type PlasmicPageSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageSettings__VariantsArgs;
export const PlasmicPageSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicPageSettings__ArgsType = {};
type ArgPropType = keyof PlasmicPageSettings__ArgsType;
export const PlasmicPageSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicPageSettings__OverridesType = {
  root?: p.Flex<"div">;
  routeInput?: p.Flex<typeof Textbox>;
  titleInput?: p.Flex<typeof Textbox>;
  descriptionInput?: p.Flex<"textarea">;
  characterCount?: p.Flex<"div">;
  canonicalInput?: p.Flex<typeof Textbox>;
  imageAssetPicker?: p.Flex<"div">;
  propsControl?: p.Flex<"div">;
  renderModeLabel?: p.Flex<"div">;
  renderModeSelect?: p.Flex<typeof Select>;
  loginRequiredRow?: p.Flex<"div">;
  loginRequiredLabel?: p.Flex<"div">;
  loginRequiredSwitch?: p.Flex<typeof Switch>;
  roleRequiredRow?: p.Flex<"div">;
  roleRequiredLabel?: p.Flex<"div">;
  roleRequiredSelect?: p.Flex<typeof Select>;
};

export interface DefaultPageSettingsProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPageSettings__RenderFunc(props: {
  variants: PlasmicPageSettings__VariantsArgs;
  args: PlasmicPageSettings__ArgsType;
  overrides: PlasmicPageSettings__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "loginRequiredSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => undefined
          : undefined,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__f5CjA)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jBw6C)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__oAobL)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__byQuB
              )}
            >
              {"URL Path"}
            </div>
          </div>

          <Textbox
            data-plasmic-name={"routeInput"}
            data-plasmic-override={overrides.routeInput}
            className={classNames("__wab_instance", sty.routeInput)}
            placeholder={"/some-route" as const}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__sXrs1)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__t5Rk5)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ucQAw)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__i4G3Z)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ct5Np
              )}
            >
              {"Title"}
            </div>
          </div>

          <Textbox
            data-plasmic-name={"titleInput"}
            data-plasmic-override={overrides.titleInput}
            className={classNames("__wab_instance", sty.titleInput)}
            placeholder={"My fancy page" as const}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__nwnCo)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__vn51D)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lSd8I)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__u5FdN)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uCfOn
              )}
            >
              {"Description"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hwX9F)}
          >
            <textarea
              data-plasmic-name={"descriptionInput"}
              data-plasmic-override={overrides.descriptionInput}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.descriptionInput
              )}
              placeholder={
                "A description to show for search engine results." as const
              }
              ref={(ref) => {
                $refs["descriptionInput"] = ref;
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox__uFy4)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aYaBf)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nf6Kg
                  )}
                >
                  {"Character count:"}
                </div>

                <div
                  data-plasmic-name={"characterCount"}
                  data-plasmic-override={overrides.characterCount}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.characterCount
                  )}
                >
                  {"XX"}
                </div>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v5Bs7
                )}
              >
                {"(Recommended: 160)"}
              </div>
            </div>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hurYr)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ftM2E)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__giH2
              )}
            >
              {"Canonical URL"}
            </div>
          </div>

          <Textbox
            data-plasmic-name={"canonicalInput"}
            data-plasmic-override={overrides.canonicalInput}
            className={classNames("__wab_instance", sty.canonicalInput)}
            placeholder={"https://canonical.url" as const}
            prefixIcon={
              <SearchsvgIcon
                className={classNames(projectcss.all, sty.svg__cXo1J)}
                role={"img"}
              />
            }
            styleType={["bordered"]}
            suffixIcon={
              <ClosesvgIcon
                className={classNames(projectcss.all, sty.svg__dXpya)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zwdd8)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__elLZ)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eyrOx
              )}
            >
              {"Open Graph image"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v3EQ
              )}
            >
              {"The preview image when the page is shared on social media."}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bmaVn)}
          >
            <div
              data-plasmic-name={"imageAssetPicker"}
              data-plasmic-override={overrides.imageAssetPicker}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.imageAssetPicker
              )}
            >
              {"This is the image asset picker"}
            </div>
          </p.Stack>
        </p.Stack>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pd0)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rAUsl
              )}
            >
              {"More metadata"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__zwogK)} />
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__r3Es1)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gq12T)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nXsp
              )}
            >
              {""}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nlHjo)}
          >
            <div
              data-plasmic-name={"propsControl"}
              data-plasmic-override={overrides.propsControl}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.propsControl
              )}
            >
              {"Props control"}
            </div>
          </p.Stack>
        </p.Stack>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cMjM)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a8Wj
              )}
            >
              {"Advanced"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ykmFj)} />
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wm2MJ)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"renderModeLabel"}
                data-plasmic-override={overrides.renderModeLabel}
                hasGap={true}
                className={classNames(projectcss.all, sty.renderModeLabel)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y4M9G
                  )}
                >
                  {"Render mode"}
                </div>
              </p.Stack>
            ) : null}

            <Select
              data-plasmic-name={"renderModeSelect"}
              data-plasmic-override={overrides.renderModeSelect}
              className={classNames("__wab_instance", sty.renderModeSelect)}
            />
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"loginRequiredRow"}
            data-plasmic-override={overrides.loginRequiredRow}
            hasGap={true}
            className={classNames(projectcss.all, sty.loginRequiredRow)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"loginRequiredLabel"}
                data-plasmic-override={overrides.loginRequiredLabel}
                hasGap={true}
                className={classNames(projectcss.all, sty.loginRequiredLabel)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fdmLq
                  )}
                >
                  {"Login needed"}
                </div>
              </p.Stack>
            ) : null}

            <Switch
              data-plasmic-name={"loginRequiredSwitch"}
              data-plasmic-override={overrides.loginRequiredSwitch}
              className={classNames("__wab_instance", sty.loginRequiredSwitch)}
              isChecked={p.generateStateValueProp($state, [
                "loginRequiredSwitch",

                "isChecked",
              ])}
              onChange={(...args) => {
                p.generateStateOnChangeProp($state, [
                  "loginRequiredSwitch",

                  "isChecked",
                ])(args[0]);
              }}
            >
              {""}
            </Switch>
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"roleRequiredRow"}
            data-plasmic-override={overrides.roleRequiredRow}
            hasGap={true}
            className={classNames(projectcss.all, sty.roleRequiredRow)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"roleRequiredLabel"}
                data-plasmic-override={overrides.roleRequiredLabel}
                hasGap={true}
                className={classNames(projectcss.all, sty.roleRequiredLabel)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yxT2J
                  )}
                >
                  {"Role needed"}
                </div>
              </p.Stack>
            ) : null}

            <Select
              data-plasmic-name={"roleRequiredSelect"}
              data-plasmic-override={overrides.roleRequiredSelect}
              className={classNames("__wab_instance", sty.roleRequiredSelect)}
            />
          </p.Stack>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "routeInput",
    "titleInput",
    "descriptionInput",
    "characterCount",
    "canonicalInput",
    "imageAssetPicker",
    "propsControl",
    "renderModeLabel",
    "renderModeSelect",
    "loginRequiredRow",
    "loginRequiredLabel",
    "loginRequiredSwitch",
    "roleRequiredRow",
    "roleRequiredLabel",
    "roleRequiredSelect",
  ],

  routeInput: ["routeInput"],
  titleInput: ["titleInput"],
  descriptionInput: ["descriptionInput"],
  characterCount: ["characterCount"],
  canonicalInput: ["canonicalInput"],
  imageAssetPicker: ["imageAssetPicker"],
  propsControl: ["propsControl"],
  renderModeLabel: ["renderModeLabel"],
  renderModeSelect: ["renderModeSelect"],
  loginRequiredRow: [
    "loginRequiredRow",
    "loginRequiredLabel",
    "loginRequiredSwitch",
  ],

  loginRequiredLabel: ["loginRequiredLabel"],
  loginRequiredSwitch: ["loginRequiredSwitch"],
  roleRequiredRow: [
    "roleRequiredRow",
    "roleRequiredLabel",
    "roleRequiredSelect",
  ],

  roleRequiredLabel: ["roleRequiredLabel"],
  roleRequiredSelect: ["roleRequiredSelect"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  routeInput: typeof Textbox;
  titleInput: typeof Textbox;
  descriptionInput: "textarea";
  characterCount: "div";
  canonicalInput: typeof Textbox;
  imageAssetPicker: "div";
  propsControl: "div";
  renderModeLabel: "div";
  renderModeSelect: typeof Select;
  loginRequiredRow: "div";
  loginRequiredLabel: "div";
  loginRequiredSwitch: typeof Switch;
  roleRequiredRow: "div";
  roleRequiredLabel: "div";
  roleRequiredSelect: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageSettings__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPageSettings__VariantsArgs;
  args?: PlasmicPageSettings__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicPageSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPageSettings__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPageSettings__ArgProps,
          internalVariantPropNames: PlasmicPageSettings__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicPageSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageSettings";
  } else {
    func.displayName = `PlasmicPageSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicPageSettings = Object.assign(
  // Top-level PlasmicPageSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    routeInput: makeNodeComponent("routeInput"),
    titleInput: makeNodeComponent("titleInput"),
    descriptionInput: makeNodeComponent("descriptionInput"),
    characterCount: makeNodeComponent("characterCount"),
    canonicalInput: makeNodeComponent("canonicalInput"),
    imageAssetPicker: makeNodeComponent("imageAssetPicker"),
    propsControl: makeNodeComponent("propsControl"),
    renderModeLabel: makeNodeComponent("renderModeLabel"),
    renderModeSelect: makeNodeComponent("renderModeSelect"),
    loginRequiredRow: makeNodeComponent("loginRequiredRow"),
    loginRequiredLabel: makeNodeComponent("loginRequiredLabel"),
    loginRequiredSwitch: makeNodeComponent("loginRequiredSwitch"),
    roleRequiredRow: makeNodeComponent("roleRequiredRow"),
    roleRequiredLabel: makeNodeComponent("roleRequiredLabel"),
    roleRequiredSelect: makeNodeComponent("roleRequiredSelect"),

    // Metadata about props expected for PlasmicPageSettings
    internalVariantProps: PlasmicPageSettings__VariantProps,
    internalArgProps: PlasmicPageSettings__ArgProps,
  }
);

export default PlasmicPageSettings;
/* prettier-ignore-end */
