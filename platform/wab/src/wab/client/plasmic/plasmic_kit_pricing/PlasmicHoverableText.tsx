// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ehckhYnyDHgCBbV47m9bkf
// Component: aVJYhoS8iDMR

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ElevatedCard from "../../components/pricing/ElevatedCard"; // plasmic-import: OOKbAz_EJ7Rm/component
import Popout from "../../components/pricing/Popout"; // plasmic-import: XvpbI4g-IJWK/component
import { PricingTooltip } from "../../components/pricing/Tooltip"; // plasmic-import: eAE4YEj_YxMC/codeComponent

import { useEnvironment } from "./PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import sty from "./PlasmicHoverableText.module.css"; // plasmic-import: aVJYhoS8iDMR/css

createPlasmicElementProxy;

export type PlasmicHoverableText__VariantMembers = {
  above: "above";
};
export type PlasmicHoverableText__VariantsArgs = {
  above?: SingleBooleanChoiceArg<"above">;
};
type VariantPropType = keyof PlasmicHoverableText__VariantsArgs;
export const PlasmicHoverableText__VariantProps = new Array<VariantPropType>(
  "above"
);

export type PlasmicHoverableText__ArgsType = {
  children?: React.ReactNode;
  popover?: React.ReactNode;
  forceOverlay?: boolean;
};
type ArgPropType = keyof PlasmicHoverableText__ArgsType;
export const PlasmicHoverableText__ArgProps = new Array<ArgPropType>(
  "children",
  "popover",
  "forceOverlay"
);

export type PlasmicHoverableText__OverridesType = {
  root?: Flex__<"div">;
  tooltip?: Flex__<typeof PricingTooltip>;
  popout?: Flex__<typeof Popout>;
  elevatedCard?: Flex__<typeof ElevatedCard>;
};

export interface DefaultHoverableTextProps {
  children?: React.ReactNode;
  popover?: React.ReactNode;
  forceOverlay?: boolean;
  above?: SingleBooleanChoiceArg<"above">;
  className?: string;
}

const $$ = {};

function PlasmicHoverableText__RenderFunc(props: {
  variants: PlasmicHoverableText__VariantsArgs;
  args: PlasmicHoverableText__ArgsType;
  overrides: PlasmicHoverableText__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          forceOverlay: false,
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "above",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.above,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootabove]: hasVariant($state, "above", "above"),
        }
      )}
    >
      <PricingTooltip
        data-plasmic-name={"tooltip"}
        data-plasmic-override={overrides.tooltip}
        className={classNames("__wab_instance", sty.tooltip, {
          [sty.tooltipabove]: hasVariant($state, "above", "above"),
        })}
        overlay={
          <Popout
            data-plasmic-name={"popout"}
            data-plasmic-override={overrides.popout}
            above={hasVariant($state, "above", "above") ? true : undefined}
            className={classNames("__wab_instance", sty.popout, {
              [sty.popoutabove]: hasVariant($state, "above", "above"),
            })}
            noArrow={true}
          >
            <ElevatedCard
              data-plasmic-name={"elevatedCard"}
              data-plasmic-override={overrides.elevatedCard}
              className={classNames("__wab_instance", sty.elevatedCard)}
              menuContainer2={
                <div className={classNames(projectcss.all, sty.freeBox__rS50D)}>
                  {renderPlasmicSlot({
                    defaultContents: "Some description",
                    value: args.popover,
                    className: classNames(sty.slotTargetPopover, {
                      [sty.slotTargetPopoverabove]: hasVariant(
                        $state,
                        "above",
                        "above"
                      ),
                    }),
                  })}
                </div>
              }
            />
          </Popout>
        }
        placement={hasVariant($state, "above", "above") ? "top" : undefined}
        trigger={
          <div className={classNames(projectcss.all, sty.freeBox___0Wi8O)}>
            {renderPlasmicSlot({
              defaultContents: "4 collaborators",
              value: args.children,
              className: classNames(sty.slotTargetChildren),
            })}
          </div>
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tooltip", "popout", "elevatedCard"],
  tooltip: ["tooltip", "popout", "elevatedCard"],
  popout: ["popout", "elevatedCard"],
  elevatedCard: ["elevatedCard"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tooltip: typeof PricingTooltip;
  popout: typeof Popout;
  elevatedCard: typeof ElevatedCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHoverableText__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHoverableText__VariantsArgs;
    args?: PlasmicHoverableText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHoverableText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHoverableText__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHoverableText__ArgProps,
          internalVariantPropNames: PlasmicHoverableText__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHoverableText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHoverableText";
  } else {
    func.displayName = `PlasmicHoverableText.${nodeName}`;
  }
  return func;
}

export const PlasmicHoverableText = Object.assign(
  // Top-level PlasmicHoverableText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tooltip: makeNodeComponent("tooltip"),
    popout: makeNodeComponent("popout"),
    elevatedCard: makeNodeComponent("elevatedCard"),

    // Metadata about props expected for PlasmicHoverableText
    internalVariantProps: PlasmicHoverableText__VariantProps,
    internalArgProps: PlasmicHoverableText__ArgProps,
  }
);

export default PlasmicHoverableText;
/* prettier-ignore-end */
