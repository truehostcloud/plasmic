// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ehckhYnyDHgCBbV47m9bkf
// Component: P7E8qtNzKrbM

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ExpandableSection from "../../components/pricing/ExpandableSection"; // plasmic-import: IzGvUfmCzHyO/component
import PriceTierChip from "../../components/pricing/PriceTierChip"; // plasmic-import: UwHbCO-1rFrq/component
import PriceTierFeatureItem from "../../components/pricing/PriceTierFeatureItem"; // plasmic-import: Z40kBWC-Knbn/component
import PricingButton from "../../components/pricing/PricingButton"; // plasmic-import: NqVzp6p_r1Wa/component

import { useScreenVariants as useScreenVariantspbV7Vw3AiD6M } from "../plasmic_kit_responsive_breakpoints/PlasmicGlobalVariant__Screen"; // plasmic-import: PbV7vw3AiD6M/globalVariant
import { useEnvironment } from "./PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant
import { useScreenVariants as useScreenVariantsb61LAyP8VHu7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: B61LAyP8VHu7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import sty from "./PlasmicPriceTier.module.css"; // plasmic-import: P7E8qtNzKrbM/css

createPlasmicElementProxy;

export type PlasmicPriceTier__VariantMembers = {
  status:
    | "unavailable"
    | "current"
    | "upgrade"
    | "manual"
    | "goback"
    | "startFreeTrial"
    | "freeTrialCurrent";
  tier:
    | "free"
    | "starter"
    | "pro"
    | "team"
    | "enterprise"
    | "legacy"
    | "grandfathered";
  mostPopular: "mostPopular";
};
export type PlasmicPriceTier__VariantsArgs = {
  status?: SingleChoiceArg<
    | "unavailable"
    | "current"
    | "upgrade"
    | "manual"
    | "goback"
    | "startFreeTrial"
    | "freeTrialCurrent"
  >;

  tier?: SingleChoiceArg<
    | "free"
    | "starter"
    | "pro"
    | "team"
    | "enterprise"
    | "legacy"
    | "grandfathered"
  >;

  mostPopular?: SingleBooleanChoiceArg<"mostPopular">;
};
type VariantPropType = keyof PlasmicPriceTier__VariantsArgs;
export const PlasmicPriceTier__VariantProps = new Array<VariantPropType>(
  "status",
  "tier",
  "mostPopular"
);

export type PlasmicPriceTier__ArgsType = {
  subprice?: React.ReactNode;
  valueProps?: React.ReactNode;
  price?: React.ReactNode;
  expandableTitle?: React.ReactNode;
  expandableBody?: React.ReactNode;
  openSection?: boolean;
};
type ArgPropType = keyof PlasmicPriceTier__ArgsType;
export const PlasmicPriceTier__ArgProps = new Array<ArgPropType>(
  "subprice",
  "valueProps",
  "price",
  "expandableTitle",
  "expandableBody",
  "openSection"
);

export type PlasmicPriceTier__OverridesType = {
  root?: Flex__<"div">;
  priceTierChip?: Flex__<typeof PriceTierChip>;
  h3?: Flex__<"h3">;
  normalButton?: Flex__<typeof PricingButton>;
  expandableSection?: Flex__<typeof ExpandableSection>;
};

export interface DefaultPriceTierProps {
  subprice?: React.ReactNode;
  valueProps?: React.ReactNode;
  price?: React.ReactNode;
  expandableTitle?: React.ReactNode;
  expandableBody?: React.ReactNode;
  openSection?: boolean;
  status?: SingleChoiceArg<
    | "unavailable"
    | "current"
    | "upgrade"
    | "manual"
    | "goback"
    | "startFreeTrial"
    | "freeTrialCurrent"
  >;

  tier?: SingleChoiceArg<
    | "free"
    | "starter"
    | "pro"
    | "team"
    | "enterprise"
    | "legacy"
    | "grandfathered"
  >;

  mostPopular?: SingleBooleanChoiceArg<"mostPopular">;
  className?: string;
}

const $$ = {};

function PlasmicPriceTier__RenderFunc(props: {
  variants: PlasmicPriceTier__VariantsArgs;
  args: PlasmicPriceTier__ArgsType;
  overrides: PlasmicPriceTier__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          openSection: false,
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "status",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.status,
      },
      {
        path: "tier",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tier,
      },
      {
        path: "mostPopular",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mostPopular,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
    screen: useScreenVariantspbV7Vw3AiD6M(),
    screen: useScreenVariantsb61LAyP8VHu7(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        hasVariant($state, "tier", "team")
          ? "price-grandient-global white-bg bdr-gradient-3"
          : hasVariant($state, "tier", "pro")
          ? "price-grandient-global white-bg bdr-gradient-2"
          : hasVariant($state, "tier", "starter")
          ? "price-grandient-global white-bg bdr-gradient-1"
          : undefined,
        {
          [projectcss.global_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootglobal_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootmostPopular]: hasVariant(
            $state,
            "mostPopular",
            "mostPopular"
          ),
          [sty.rootstatus_current]: hasVariant($state, "status", "current"),
          [sty.rootstatus_freeTrialCurrent]: hasVariant(
            $state,
            "status",
            "freeTrialCurrent"
          ),
          [sty.rootstatus_freeTrialCurrent_tier_starter]:
            hasVariant($state, "status", "freeTrialCurrent") &&
            hasVariant($state, "tier", "starter"),
          [sty.rootstatus_goback]: hasVariant($state, "status", "goback"),
          [sty.rootstatus_manual]: hasVariant($state, "status", "manual"),
          [sty.rootstatus_startFreeTrial]: hasVariant(
            $state,
            "status",
            "startFreeTrial"
          ),
          [sty.rootstatus_unavailable]: hasVariant(
            $state,
            "status",
            "unavailable"
          ),
          [sty.rootstatus_upgrade]: hasVariant($state, "status", "upgrade"),
          [sty.roottier_enterprise]: hasVariant($state, "tier", "enterprise"),
          [sty.roottier_enterprise_global_environment_website]:
            hasVariant($state, "tier", "enterprise") &&
            hasVariant(globalVariants, "environment", "website"),
          [sty.roottier_enterprise_status_freeTrialCurrent]:
            hasVariant($state, "status", "freeTrialCurrent") &&
            hasVariant($state, "tier", "enterprise"),
          [sty.roottier_free]: hasVariant($state, "tier", "free"),
          [sty.roottier_grandfathered]: hasVariant(
            $state,
            "tier",
            "grandfathered"
          ),
          [sty.roottier_grandfathered_status_current]:
            hasVariant($state, "status", "current") &&
            hasVariant($state, "tier", "grandfathered"),
          [sty.roottier_legacy]: hasVariant($state, "tier", "legacy"),
          [sty.roottier_legacy_status_current]:
            hasVariant($state, "status", "current") &&
            hasVariant($state, "tier", "legacy"),
          [sty.roottier_pro]: hasVariant($state, "tier", "pro"),
          [sty.roottier_starter]: hasVariant($state, "tier", "starter"),
          [sty.roottier_team]: hasVariant($state, "tier", "team"),
          [sty.roottier_team_status_freeTrialCurrent]:
            hasVariant($state, "status", "freeTrialCurrent") &&
            hasVariant($state, "tier", "team"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yUOuh, {
          [sty.freeBoxmostPopular__yUOuhyLsnd]: hasVariant(
            $state,
            "mostPopular",
            "mostPopular"
          ),
          [sty.freeBoxstatus_current__yUOuhi3Xzy]: hasVariant(
            $state,
            "status",
            "current"
          ),
          [sty.freeBoxstatus_freeTrialCurrent_tier_starter__yUOuhdLvr1ZUNp]:
            hasVariant($state, "status", "freeTrialCurrent") &&
            hasVariant($state, "tier", "starter"),
          [sty.freeBoxstatus_unavailable__yUOuh3AaVi]: hasVariant(
            $state,
            "status",
            "unavailable"
          ),
          [sty.freeBoxstatus_upgrade__yUOuhqoOgM]: hasVariant(
            $state,
            "status",
            "upgrade"
          ),
          [sty.freeBoxtier_enterprise__yUOuh8TtOs]: hasVariant(
            $state,
            "tier",
            "enterprise"
          ),
          [sty.freeBoxtier_enterprise_status_freeTrialCurrent__yUOuh8TtOsDLvr1]:
            hasVariant($state, "status", "freeTrialCurrent") &&
            hasVariant($state, "tier", "enterprise"),
          [sty.freeBoxtier_free__yUOuh5PWy8]: hasVariant(
            $state,
            "tier",
            "free"
          ),
          [sty.freeBoxtier_grandfathered__yUOuhGMgSw]: hasVariant(
            $state,
            "tier",
            "grandfathered"
          ),
          [sty.freeBoxtier_legacy__yUOuhODxgc]: hasVariant(
            $state,
            "tier",
            "legacy"
          ),
          [sty.freeBoxtier_pro__yUOuh8F7ZG]: hasVariant($state, "tier", "pro"),
          [sty.freeBoxtier_starter__yUOuhzUNp]: hasVariant(
            $state,
            "tier",
            "starter"
          ),
          [sty.freeBoxtier_team__yUOuhN3W]: hasVariant($state, "tier", "team"),
          [sty.freeBoxtier_team_status_freeTrialCurrent__yUOuhN3WDLvr1]:
            hasVariant($state, "status", "freeTrialCurrent") &&
            hasVariant($state, "tier", "team"),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__b4JBz, {
            [sty.freeBoxtier_enterprise__b4JBz8TtOs]: hasVariant(
              $state,
              "tier",
              "enterprise"
            ),
            [sty.freeBoxtier_legacy__b4JBzoDxgc]: hasVariant(
              $state,
              "tier",
              "legacy"
            ),
            [sty.freeBoxtier_legacy_status_current__b4JBzoDxgcI3Xzy]:
              hasVariant($state, "status", "current") &&
              hasVariant($state, "tier", "legacy"),
            [sty.freeBoxtier_pro__b4JBz8F7ZG]: hasVariant(
              $state,
              "tier",
              "pro"
            ),
          })}
        >
          <PriceTierChip
            data-plasmic-name={"priceTierChip"}
            data-plasmic-override={overrides.priceTierChip}
            className={classNames("__wab_instance", sty.priceTierChip, {
              [sty.priceTierChipstatus_current]: hasVariant(
                $state,
                "status",
                "current"
              ),
              [sty.priceTierChipstatus_freeTrialCurrent]: hasVariant(
                $state,
                "status",
                "freeTrialCurrent"
              ),
              [sty.priceTierChipstatus_unavailable]: hasVariant(
                $state,
                "status",
                "unavailable"
              ),
              [sty.priceTierChiptier_enterprise]: hasVariant(
                $state,
                "tier",
                "enterprise"
              ),
              [sty.priceTierChiptier_free]: hasVariant($state, "tier", "free"),
              [sty.priceTierChiptier_grandfathered]: hasVariant(
                $state,
                "tier",
                "grandfathered"
              ),
              [sty.priceTierChiptier_legacy]: hasVariant(
                $state,
                "tier",
                "legacy"
              ),
              [sty.priceTierChiptier_pro]: hasVariant($state, "tier", "pro"),
              [sty.priceTierChiptier_starter]: hasVariant(
                $state,
                "tier",
                "starter"
              ),
              [sty.priceTierChiptier_team]: hasVariant($state, "tier", "team"),
            })}
            current={
              hasVariant($state, "status", "freeTrialCurrent")
                ? true
                : hasVariant($state, "status", "current")
                ? true
                : undefined
            }
            description={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nlEez,
                  {
                    [sty.textglobal_environment_website__nlEeZmVgSv]:
                      hasVariant(globalVariants, "environment", "website"),
                    [sty.textstatus_current__nlEeZi3Xzy]: hasVariant(
                      $state,
                      "status",
                      "current"
                    ),
                    [sty.textstatus_upgrade__nlEeZqoOgM]: hasVariant(
                      $state,
                      "status",
                      "upgrade"
                    ),
                    [sty.texttier_enterprise__nlEez8TtOs]: hasVariant(
                      $state,
                      "tier",
                      "enterprise"
                    ),
                    [sty.texttier_legacy__nlEezoDxgc]: hasVariant(
                      $state,
                      "tier",
                      "legacy"
                    ),
                    [sty.texttier_pro__nlEez8F7ZG]: hasVariant(
                      $state,
                      "tier",
                      "pro"
                    ),
                    [sty.texttier_starter__nlEeZzUNp]: hasVariant(
                      $state,
                      "tier",
                      "starter"
                    ),
                    [sty.texttier_team__nlEezn3W]: hasVariant(
                      $state,
                      "tier",
                      "team"
                    ),
                  }
                )}
              >
                {hasVariant($state, "tier", "legacy")
                  ? "Legacy plan "
                  : hasVariant($state, "tier", "enterprise")
                  ? "For advanced security, dedicated support & flexible controls."
                  : hasVariant($state, "tier", "team")
                  ? "For cross-functional teams & scaling organizations."
                  : hasVariant($state, "tier", "pro")
                  ? "For SMBs building professional applications."
                  : hasVariant($state, "tier", "starter")
                  ? "For entrepreneurs launching passion projects."
                  : "For anyone getting started with Plasmic."}
              </div>
            }
            tier={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gWCn,
                  {
                    [sty.textmostPopular__gWCnyLsnd]: hasVariant(
                      $state,
                      "mostPopular",
                      "mostPopular"
                    ),
                    [sty.textstatus_current__gWCni3Xzy]: hasVariant(
                      $state,
                      "status",
                      "current"
                    ),
                    [sty.texttier_enterprise__gWCn8TtOs]: hasVariant(
                      $state,
                      "tier",
                      "enterprise"
                    ),
                    [sty.texttier_grandfathered__gWCnGMgSw]: hasVariant(
                      $state,
                      "tier",
                      "grandfathered"
                    ),
                    [sty.texttier_legacy__gWCnODxgc]: hasVariant(
                      $state,
                      "tier",
                      "legacy"
                    ),
                    [sty.texttier_pro__gWCn8F7ZG]: hasVariant(
                      $state,
                      "tier",
                      "pro"
                    ),
                    [sty.texttier_starter__gWCnzUNp]: hasVariant(
                      $state,
                      "tier",
                      "starter"
                    ),
                    [sty.texttier_team__gWCnN3W]: hasVariant(
                      $state,
                      "tier",
                      "team"
                    ),
                  }
                )}
              >
                {hasVariant($state, "tier", "legacy")
                  ? "Legacy"
                  : hasVariant($state, "tier", "enterprise")
                  ? "Enterprise"
                  : hasVariant($state, "tier", "team")
                  ? "Scale"
                  : hasVariant($state, "tier", "pro")
                  ? "Pro"
                  : hasVariant($state, "tier", "starter")
                  ? "Starter"
                  : "Free"}
              </div>
            }
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z6QD, {
              [sty.freeBoxstatus_current__z6QDi3Xzy]: hasVariant(
                $state,
                "status",
                "current"
              ),
              [sty.freeBoxstatus_unavailable__z6QD3AaVi]: hasVariant(
                $state,
                "status",
                "unavailable"
              ),
              [sty.freeBoxtier_enterprise__z6QD8TtOs]: hasVariant(
                $state,
                "tier",
                "enterprise"
              ),
              [sty.freeBoxtier_enterprise_status_freeTrialCurrent__z6QD8TtOsDLvr1]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "enterprise"),
              [sty.freeBoxtier_free__z6QD5PWy8]: hasVariant(
                $state,
                "tier",
                "free"
              ),
              [sty.freeBoxtier_pro__z6QD8F7ZG]: hasVariant(
                $state,
                "tier",
                "pro"
              ),
              [sty.freeBoxtier_team_status_freeTrialCurrent__z6QDn3WDLvr1]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "team"),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__mvWXh, {
                [sty.freeBoxtier_enterprise__mvWXh8TtOs]: hasVariant(
                  $state,
                  "tier",
                  "enterprise"
                ),
              })}
            >
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(projectcss.all, projectcss.h3, sty.h3)}
              >
                {renderPlasmicSlot({
                  defaultContents: "Price",
                  value: args.price,
                  className: classNames(sty.slotTargetPrice, {
                    [sty.slotTargetPricetier_enterprise]: hasVariant(
                      $state,
                      "tier",
                      "enterprise"
                    ),
                  }),
                })}
              </h3>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dVq4A,
                  {
                    [sty.texttier_enterprise__dVq4A8TtOs]: hasVariant(
                      $state,
                      "tier",
                      "enterprise"
                    ),
                    [sty.texttier_free__dVq4A5PWy8]: hasVariant(
                      $state,
                      "tier",
                      "free"
                    ),
                  }
                )}
              >
                {"/month"}
              </div>
            </div>
            {renderPlasmicSlot({
              defaultContents: "Sub-price",
              value: args.subprice,
              className: classNames(sty.slotTargetSubprice, {
                [sty.slotTargetSubpriceglobal_environment_website]: hasVariant(
                  globalVariants,
                  "environment",
                  "website"
                ),
                [sty.slotTargetSubpricestatus_current]: hasVariant(
                  $state,
                  "status",
                  "current"
                ),
                [sty.slotTargetSubpricetier_enterprise]: hasVariant(
                  $state,
                  "tier",
                  "enterprise"
                ),
                [sty.slotTargetSubpricetier_free]: hasVariant(
                  $state,
                  "tier",
                  "free"
                ),
                [sty.slotTargetSubpricetier_grandfathered]: hasVariant(
                  $state,
                  "tier",
                  "grandfathered"
                ),
                [sty.slotTargetSubpricetier_grandfathered_status_current]:
                  hasVariant($state, "status", "current") &&
                  hasVariant($state, "tier", "grandfathered"),
                [sty.slotTargetSubpricetier_legacy]: hasVariant(
                  $state,
                  "tier",
                  "legacy"
                ),
                [sty.slotTargetSubpricetier_pro]: hasVariant(
                  $state,
                  "tier",
                  "pro"
                ),
                [sty.slotTargetSubpricetier_starter]: hasVariant(
                  $state,
                  "tier",
                  "starter"
                ),
                [sty.slotTargetSubpricetier_team]: hasVariant(
                  $state,
                  "tier",
                  "team"
                ),
              }),
            })}
          </Stack__>
          <PricingButton
            data-plasmic-name={"normalButton"}
            data-plasmic-override={overrides.normalButton}
            className={classNames("__wab_instance", sty.normalButton, {
              [sty.normalButtonglobal_environment_website]: hasVariant(
                globalVariants,
                "environment",
                "website"
              ),
              [sty.normalButtonglobal_environment_website_tier_starter]:
                hasVariant($state, "tier", "starter") &&
                hasVariant(globalVariants, "environment", "website"),
              [sty.normalButtonmostPopular]: hasVariant(
                $state,
                "mostPopular",
                "mostPopular"
              ),
              [sty.normalButtonstatus_current]: hasVariant(
                $state,
                "status",
                "current"
              ),
              [sty.normalButtonstatus_freeTrialCurrent]: hasVariant(
                $state,
                "status",
                "freeTrialCurrent"
              ),
              [sty.normalButtonstatus_freeTrialCurrent_tier_starter]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "starter"),
              [sty.normalButtonstatus_goback]: hasVariant(
                $state,
                "status",
                "goback"
              ),
              [sty.normalButtonstatus_goback_tier_starter]:
                hasVariant($state, "tier", "starter") &&
                hasVariant($state, "status", "goback"),
              [sty.normalButtonstatus_manual]: hasVariant(
                $state,
                "status",
                "manual"
              ),
              [sty.normalButtonstatus_startFreeTrial]: hasVariant(
                $state,
                "status",
                "startFreeTrial"
              ),
              [sty.normalButtonstatus_unavailable]: hasVariant(
                $state,
                "status",
                "unavailable"
              ),
              [sty.normalButtonstatus_upgrade]: hasVariant(
                $state,
                "status",
                "upgrade"
              ),
              [sty.normalButtontier_enterprise]: hasVariant(
                $state,
                "tier",
                "enterprise"
              ),
              [sty.normalButtontier_enterprise_global_environment_website]:
                hasVariant($state, "tier", "enterprise") &&
                hasVariant(globalVariants, "environment", "website"),
              [sty.normalButtontier_enterprise_status_freeTrialCurrent]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "enterprise"),
              [sty.normalButtontier_enterprise_status_goback]:
                hasVariant($state, "status", "goback") &&
                hasVariant($state, "tier", "enterprise"),
              [sty.normalButtontier_free]: hasVariant($state, "tier", "free"),
              [sty.normalButtontier_free_global_environment_website]:
                hasVariant($state, "tier", "free") &&
                hasVariant(globalVariants, "environment", "website"),
              [sty.normalButtontier_grandfathered]: hasVariant(
                $state,
                "tier",
                "grandfathered"
              ),
              [sty.normalButtontier_grandfathered_status_current]:
                hasVariant($state, "status", "current") &&
                hasVariant($state, "tier", "grandfathered"),
              [sty.normalButtontier_grandfathered_status_freeTrialCurrent]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "grandfathered"),
              [sty.normalButtontier_legacy]: hasVariant(
                $state,
                "tier",
                "legacy"
              ),
              [sty.normalButtontier_legacy_status_current]:
                hasVariant($state, "status", "current") &&
                hasVariant($state, "tier", "legacy"),
              [sty.normalButtontier_legacy_status_freeTrialCurrent]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "legacy"),
              [sty.normalButtontier_pro]: hasVariant($state, "tier", "pro"),
              [sty.normalButtontier_pro_global_environment_website]:
                hasVariant($state, "tier", "pro") &&
                hasVariant(globalVariants, "environment", "website"),
              [sty.normalButtontier_pro_status_goback]:
                hasVariant($state, "tier", "pro") &&
                hasVariant($state, "status", "goback"),
              [sty.normalButtontier_starter]: hasVariant(
                $state,
                "tier",
                "starter"
              ),
              [sty.normalButtontier_team]: hasVariant($state, "tier", "team"),
              [sty.normalButtontier_team_global_environment_website]:
                hasVariant($state, "tier", "team") &&
                hasVariant(globalVariants, "environment", "website"),
              [sty.normalButtontier_team_status_freeTrialCurrent]:
                hasVariant($state, "status", "freeTrialCurrent") &&
                hasVariant($state, "tier", "team"),
              [sty.normalButtontier_team_status_goback]:
                hasVariant($state, "status", "goback") &&
                hasVariant($state, "tier", "team"),
            })}
            dark={
              hasVariant($state, "mostPopular", "mostPopular")
                ? true
                : hasVariant($state, "tier", "enterprise")
                ? true
                : undefined
            }
            link={
              hasVariant($state, "tier", "enterprise") &&
              hasVariant(globalVariants, "environment", "website")
                ? "https://plasmic.app/enterprise-contact"
                : hasVariant($state, "tier", "team") &&
                  hasVariant(globalVariants, "environment", "website")
                ? "https://plasmic.app/scale-plan"
                : hasVariant($state, "tier", "pro") &&
                  hasVariant(globalVariants, "environment", "website")
                ? "https://plasmic.app/pro-plan"
                : hasVariant($state, "tier", "starter") &&
                  hasVariant(globalVariants, "environment", "website")
                ? "https://plasmic.app/starter-plan"
                : hasVariant($state, "tier", "free") &&
                  hasVariant(globalVariants, "environment", "website")
                ? "https://plasmic.app/signup"
                : undefined
            }
            noBorder={
              hasVariant($state, "mostPopular", "mostPopular")
                ? true
                : undefined
            }
            state={
              hasVariant($state, "tier", "grandfathered")
                ? "selected"
                : hasVariant($state, "tier", "legacy")
                ? "selected"
                : hasVariant($state, "status", "current")
                ? "selected"
                : hasVariant($state, "status", "unavailable")
                ? "invisible"
                : undefined
            }
            type={
              hasVariant(globalVariants, "environment", "website")
                ? "link"
                : undefined
            }
            withIcon={hasVariant($state, "status", "goback") ? true : undefined}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___31Nb,
                {
                  [sty.textglobal_environment_website___31NBmVgSv]: hasVariant(
                    globalVariants,
                    "environment",
                    "website"
                  ),
                  [sty.textstatus_current___31NBi3Xzy]: hasVariant(
                    $state,
                    "status",
                    "current"
                  ),
                  [sty.textstatus_goback___31NBrDsgd]: hasVariant(
                    $state,
                    "status",
                    "goback"
                  ),
                  [sty.textstatus_manual___31Nb0CL90]: hasVariant(
                    $state,
                    "status",
                    "manual"
                  ),
                  [sty.textstatus_startFreeTrial___31Nbj1BVs]: hasVariant(
                    $state,
                    "status",
                    "startFreeTrial"
                  ),
                  [sty.textstatus_unavailable___31Nb3AaVi]: hasVariant(
                    $state,
                    "status",
                    "unavailable"
                  ),
                  [sty.textstatus_upgrade___31NBqoOgM]: hasVariant(
                    $state,
                    "status",
                    "upgrade"
                  ),
                  [sty.texttier_enterprise___31Nb8TtOs]: hasVariant(
                    $state,
                    "tier",
                    "enterprise"
                  ),
                  [sty.texttier_grandfathered___31NbgMgSw]: hasVariant(
                    $state,
                    "tier",
                    "grandfathered"
                  ),
                  [sty.texttier_legacy___31NboDxgc]: hasVariant(
                    $state,
                    "tier",
                    "legacy"
                  ),
                }
              )}
            >
              {hasVariant($state, "tier", "grandfathered")
                ? "Selected"
                : hasVariant($state, "tier", "legacy")
                ? "Selected"
                : hasVariant($state, "tier", "enterprise")
                ? "Contact us"
                : hasVariant($state, "status", "startFreeTrial")
                ? "Start free trial"
                : hasVariant($state, "status", "goback")
                ? "Choose another plan "
                : hasVariant($state, "status", "manual")
                ? "Contact us"
                : hasVariant($state, "status", "current")
                ? "Selected"
                : hasVariant(globalVariants, "environment", "website")
                ? "Try for free"
                : "Select plan"}
            </div>
          </PricingButton>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hzol5, {
            [sty.freeBoxstatus_freeTrialCurrent_tier_starter__hzol5DLvr1ZUNp]:
              hasVariant($state, "status", "freeTrialCurrent") &&
              hasVariant($state, "tier", "starter"),
            [sty.freeBoxtier_enterprise__hzol58TtOs]: hasVariant(
              $state,
              "tier",
              "enterprise"
            ),
            [sty.freeBoxtier_enterprise_status_goback__hzol58TtOsRDsgd]:
              hasVariant($state, "status", "goback") &&
              hasVariant($state, "tier", "enterprise"),
            [sty.freeBoxtier_free__hzol55PWy8]: hasVariant(
              $state,
              "tier",
              "free"
            ),
            [sty.freeBoxtier_grandfathered__hzol5GMgSw]: hasVariant(
              $state,
              "tier",
              "grandfathered"
            ),
            [sty.freeBoxtier_starter__hzol5ZUNp]: hasVariant(
              $state,
              "tier",
              "starter"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yXzLz
                  )}
                >
                  {"Includes:"}
                </div>
                <PriceTierFeatureItem
                  className={classNames(
                    "__wab_instance",
                    sty.priceTierFeatureItem__e7Ob7
                  )}
                />

                <PriceTierFeatureItem
                  className={classNames(
                    "__wab_instance",
                    sty.priceTierFeatureItem__cCexw
                  )}
                />

                <PriceTierFeatureItem
                  className={classNames(
                    "__wab_instance",
                    sty.priceTierFeatureItem__btMh
                  )}
                />
              </React.Fragment>
            ),

            value: args.valueProps,
            className: classNames(sty.slotTargetValueProps, {
              [sty.slotTargetValuePropsstatus_unavailable]: hasVariant(
                $state,
                "status",
                "unavailable"
              ),
              [sty.slotTargetValuePropstier_enterprise]: hasVariant(
                $state,
                "tier",
                "enterprise"
              ),
              [sty.slotTargetValuePropstier_free]: hasVariant(
                $state,
                "tier",
                "free"
              ),
              [sty.slotTargetValuePropstier_pro]: hasVariant(
                $state,
                "tier",
                "pro"
              ),
              [sty.slotTargetValuePropstier_starter]: hasVariant(
                $state,
                "tier",
                "starter"
              ),
            }),
          })}
        </Stack__>
        <ExpandableSection
          data-plasmic-name={"expandableSection"}
          data-plasmic-override={overrides.expandableSection}
          body={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ix8VU)}
            >
              {renderPlasmicSlot({
                defaultContents:
                  "A workspace is an organizational unit within an organization. Organizations can contain multiple workspaces, and each workspace can house numerous Plasmic projects. Organization members can be added to workspaces or individual projects. For example, you could have an organization for your agency with separate workspaces for each client, or an organization for your company with workspaces for each department.",
                value: args.expandableBody,
              })}
            </Stack__>
          }
          className={classNames("__wab_instance", sty.expandableSection, {
            [sty.expandableSectiontier_enterprise]: hasVariant(
              $state,
              "tier",
              "enterprise"
            ),
            [sty.expandableSectiontier_enterprise_global_environment_website]:
              hasVariant($state, "tier", "enterprise") &&
              hasVariant(globalVariants, "environment", "website"),
          })}
          dark={hasVariant($state, "tier", "enterprise") ? true : undefined}
          open={(() => {
            try {
              return $props.openSection;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          title={renderPlasmicSlot({
            defaultContents: "All features",
            value: args.expandableTitle,
          })}
        />
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__dSuWk, {
          [sty.freeBoxmostPopular__dSuWkyLsnd]: hasVariant(
            $state,
            "mostPopular",
            "mostPopular"
          ),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___35HJi,
            {
              [sty.textmostPopular___35HJIyLsnd]: hasVariant(
                $state,
                "mostPopular",
                "mostPopular"
              ),
            }
          )}
        >
          {"Most popular"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "priceTierChip", "h3", "normalButton", "expandableSection"],
  priceTierChip: ["priceTierChip"],
  h3: ["h3"],
  normalButton: ["normalButton"],
  expandableSection: ["expandableSection"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  priceTierChip: typeof PriceTierChip;
  h3: "h3";
  normalButton: typeof PricingButton;
  expandableSection: typeof ExpandableSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceTier__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceTier__VariantsArgs;
    args?: PlasmicPriceTier__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceTier__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPriceTier__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPriceTier__ArgProps,
          internalVariantPropNames: PlasmicPriceTier__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPriceTier__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceTier";
  } else {
    func.displayName = `PlasmicPriceTier.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceTier = Object.assign(
  // Top-level PlasmicPriceTier renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    priceTierChip: makeNodeComponent("priceTierChip"),
    h3: makeNodeComponent("h3"),
    normalButton: makeNodeComponent("normalButton"),
    expandableSection: makeNodeComponent("expandableSection"),

    // Metadata about props expected for PlasmicPriceTier
    internalVariantProps: PlasmicPriceTier__VariantProps,
    internalArgProps: PlasmicPriceTier__ArgProps,
  }
);

export default PlasmicPriceTier;
/* prettier-ignore-end */
