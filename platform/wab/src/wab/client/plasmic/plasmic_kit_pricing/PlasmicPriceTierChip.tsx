// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ehckhYnyDHgCBbV47m9bkf
// Component: UwHbCO-1rFrq

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { useEnvironment } from "./PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import sty from "./PlasmicPriceTierChip.module.css"; // plasmic-import: UwHbCO-1rFrq/css

createPlasmicElementProxy;

export type PlasmicPriceTierChip__VariantMembers = {
  current: "current";
  simplified: "simplified";
};
export type PlasmicPriceTierChip__VariantsArgs = {
  current?: SingleBooleanChoiceArg<"current">;
  simplified?: SingleBooleanChoiceArg<"simplified">;
};
type VariantPropType = keyof PlasmicPriceTierChip__VariantsArgs;
export const PlasmicPriceTierChip__VariantProps = new Array<VariantPropType>(
  "current",
  "simplified"
);

export type PlasmicPriceTierChip__ArgsType = {
  tier?: React.ReactNode;
  description?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPriceTierChip__ArgsType;
export const PlasmicPriceTierChip__ArgProps = new Array<ArgPropType>(
  "tier",
  "description"
);

export type PlasmicPriceTierChip__OverridesType = {
  root?: Flex__<"div">;
  h5?: Flex__<"h5">;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultPriceTierChipProps {
  tier?: React.ReactNode;
  description?: React.ReactNode;
  current?: SingleBooleanChoiceArg<"current">;
  simplified?: SingleBooleanChoiceArg<"simplified">;
  className?: string;
}

const $$ = {};

function PlasmicPriceTierChip__RenderFunc(props: {
  variants: PlasmicPriceTierChip__VariantsArgs;
  args: PlasmicPriceTierChip__ArgsType;
  overrides: PlasmicPriceTierChip__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "current",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.current,
      },
      {
        path: "simplified",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.simplified,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootcurrent]: hasVariant($state, "current", "current"),
          [sty.rootsimplified]: hasVariant($state, "simplified", "simplified"),
        }
      )}
    >
      <h5
        data-plasmic-name={"h5"}
        data-plasmic-override={overrides.h5}
        className={classNames(projectcss.all, projectcss.h5, sty.h5, {
          [sty.h5simplified]: hasVariant($state, "simplified", "simplified"),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4TEmb
              )}
            >
              {"Free"}
            </div>
          ),

          value: args.tier,
          className: classNames(sty.slotTargetTier, {
            [sty.slotTargetTiercurrent]: hasVariant(
              $state,
              "current",
              "current"
            ),
          }),
        })}
      </h5>
      {(hasVariant($state, "simplified", "simplified") ? false : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxsimplified]: hasVariant(
              $state,
              "simplified",
              "simplified"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: "For anyone getting started with Plasmic.",
            value: args.description,
            className: classNames(sty.slotTargetDescription, {
              [sty.slotTargetDescriptioncurrent]: hasVariant(
                $state,
                "current",
                "current"
              ),
              [sty.slotTargetDescriptionsimplified]: hasVariant(
                $state,
                "simplified",
                "simplified"
              ),
            }),
          })}
          {(hasVariant($state, "current", "current") ? true : false) ? (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                { [sty.textcurrent]: hasVariant($state, "current", "current") }
              )}
            >
              {"Current plan"}
            </div>
          ) : null}
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h5", "freeBox", "text"],
  h5: ["h5"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h5: "h5";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceTierChip__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceTierChip__VariantsArgs;
    args?: PlasmicPriceTierChip__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceTierChip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPriceTierChip__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPriceTierChip__ArgProps,
          internalVariantPropNames: PlasmicPriceTierChip__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPriceTierChip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceTierChip";
  } else {
    func.displayName = `PlasmicPriceTierChip.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceTierChip = Object.assign(
  // Top-level PlasmicPriceTierChip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h5: makeNodeComponent("h5"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPriceTierChip
    internalVariantProps: PlasmicPriceTierChip__VariantProps,
    internalArgProps: PlasmicPriceTierChip__ArgProps,
  }
);

export default PlasmicPriceTierChip;
/* prettier-ignore-end */
