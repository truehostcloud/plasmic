// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ehckhYnyDHgCBbV47m9bkf
// Component: Z40kBWC-Knbn

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { useEnvironment } from "./PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import sty from "./PlasmicPriceTierFeatureItem.module.css"; // plasmic-import: Z40kBWC-Knbn/css

import ChecksvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CheckSvg"; // plasmic-import: f0RrtBrXp/icon
import Star3SvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__Star3Svg"; // plasmic-import: opf4n115uVEp/icon

createPlasmicElementProxy;

export type PlasmicPriceTierFeatureItem__VariantMembers = {
  tier: "free" | "starter" | "pro" | "team" | "enterprise";
  specialSectionHeading: "specialSectionHeading";
  checkIcon: "checkIcon";
};
export type PlasmicPriceTierFeatureItem__VariantsArgs = {
  tier?: SingleChoiceArg<"free" | "starter" | "pro" | "team" | "enterprise">;
  specialSectionHeading?: SingleBooleanChoiceArg<"specialSectionHeading">;
  checkIcon?: SingleBooleanChoiceArg<"checkIcon">;
};
type VariantPropType = keyof PlasmicPriceTierFeatureItem__VariantsArgs;
export const PlasmicPriceTierFeatureItem__VariantProps =
  new Array<VariantPropType>("tier", "specialSectionHeading", "checkIcon");

export type PlasmicPriceTierFeatureItem__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPriceTierFeatureItem__ArgsType;
export const PlasmicPriceTierFeatureItem__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicPriceTierFeatureItem__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  freeBox?: Flex__<"div">;
};

export interface DefaultPriceTierFeatureItemProps {
  children?: React.ReactNode;
  tier?: SingleChoiceArg<"free" | "starter" | "pro" | "team" | "enterprise">;
  specialSectionHeading?: SingleBooleanChoiceArg<"specialSectionHeading">;
  checkIcon?: SingleBooleanChoiceArg<"checkIcon">;
  className?: string;
}

const $$ = {};

function PlasmicPriceTierFeatureItem__RenderFunc(props: {
  variants: PlasmicPriceTierFeatureItem__VariantsArgs;
  args: PlasmicPriceTierFeatureItem__ArgsType;
  overrides: PlasmicPriceTierFeatureItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tier",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tier,
      },
      {
        path: "specialSectionHeading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.specialSectionHeading,
      },
      {
        path: "checkIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.checkIcon,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootcheckIcon]: hasVariant($state, "checkIcon", "checkIcon"),
          [sty.rootglobal_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootspecialSectionHeading]: hasVariant(
            $state,
            "specialSectionHeading",
            "specialSectionHeading"
          ),
          [sty.roottier_enterprise]: hasVariant($state, "tier", "enterprise"),
          [sty.roottier_free]: hasVariant($state, "tier", "free"),
          [sty.roottier_pro]: hasVariant($state, "tier", "pro"),
          [sty.roottier_starter]: hasVariant($state, "tier", "starter"),
          [sty.roottier_team]: hasVariant($state, "tier", "team"),
        }
      )}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "checkIcon", "checkIcon")
            ? ChecksvgIcon
            : Star3SvgIcon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgcheckIcon]: hasVariant($state, "checkIcon", "checkIcon"),
          [sty.svgglobal_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.svgspecialSectionHeading]: hasVariant(
            $state,
            "specialSectionHeading",
            "specialSectionHeading"
          ),
          [sty.svgtier_enterprise]: hasVariant($state, "tier", "enterprise"),
          [sty.svgtier_free]: hasVariant($state, "tier", "free"),
          [sty.svgtier_pro]: hasVariant($state, "tier", "pro"),
          [sty.svgtier_starter]: hasVariant($state, "tier", "starter"),
          [sty.svgtier_team]: hasVariant($state, "tier", "team"),
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxcheckIcon]: hasVariant($state, "checkIcon", "checkIcon"),
          [sty.freeBoxglobal_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.freeBoxtier_enterprise]: hasVariant(
            $state,
            "tier",
            "enterprise"
          ),
          [sty.freeBoxtier_free]: hasVariant($state, "tier", "free"),
          [sty.freeBoxtier_team]: hasVariant($state, "tier", "team"),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "What a cool feature",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencheckIcon]: hasVariant(
              $state,
              "checkIcon",
              "checkIcon"
            ),
            [sty.slotTargetChildrenglobal_environment_website]: hasVariant(
              globalVariants,
              "environment",
              "website"
            ),
            [sty.slotTargetChildrenspecialSectionHeading]: hasVariant(
              $state,
              "specialSectionHeading",
              "specialSectionHeading"
            ),
            [sty.slotTargetChildrentier_enterprise]: hasVariant(
              $state,
              "tier",
              "enterprise"
            ),
            [sty.slotTargetChildrentier_free]: hasVariant(
              $state,
              "tier",
              "free"
            ),
            [sty.slotTargetChildrentier_pro]: hasVariant($state, "tier", "pro"),
            [sty.slotTargetChildrentier_starter]: hasVariant(
              $state,
              "tier",
              "starter"
            ),
            [sty.slotTargetChildrentier_team]: hasVariant(
              $state,
              "tier",
              "team"
            ),
          }),
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceTierFeatureItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceTierFeatureItem__VariantsArgs;
    args?: PlasmicPriceTierFeatureItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceTierFeatureItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPriceTierFeatureItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPriceTierFeatureItem__ArgProps,
          internalVariantPropNames: PlasmicPriceTierFeatureItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPriceTierFeatureItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceTierFeatureItem";
  } else {
    func.displayName = `PlasmicPriceTierFeatureItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceTierFeatureItem = Object.assign(
  // Top-level PlasmicPriceTierFeatureItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicPriceTierFeatureItem
    internalVariantProps: PlasmicPriceTierFeatureItem__VariantProps,
    internalArgProps: PlasmicPriceTierFeatureItem__ArgProps,
  }
);

export default PlasmicPriceTierFeatureItem;
/* prettier-ignore-end */
