// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ehckhYnyDHgCBbV47m9bkf
// Component: NqVzp6p_r1Wa

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { useEnvironment } from "./PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant
import { useScreenVariants as useScreenVariantsb61LAyP8VHu7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: B61LAyP8VHu7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import sty from "./PlasmicPricingButton.module.css"; // plasmic-import: NqVzp6p_r1Wa/css

import ArrowLeftsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowLeftSvg"; // plasmic-import: -d8Kjj4sp/icon

createPlasmicElementProxy;

export type PlasmicPricingButton__VariantMembers = {
  dark: "dark";
  withIcon: "withIcon";
  state: "invisible" | "selected";
  noBorder: "noBorder";
  type: "link";
};
export type PlasmicPricingButton__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
  withIcon?: SingleBooleanChoiceArg<"withIcon">;
  state?: SingleChoiceArg<"invisible" | "selected">;
  noBorder?: SingleBooleanChoiceArg<"noBorder">;
  type?: SingleChoiceArg<"link">;
};
type VariantPropType = keyof PlasmicPricingButton__VariantsArgs;
export const PlasmicPricingButton__VariantProps = new Array<VariantPropType>(
  "dark",
  "withIcon",
  "state",
  "noBorder",
  "type"
);

export type PlasmicPricingButton__ArgsType = {
  children?: React.ReactNode;
  onClick?: () => void;
  link?: string;
};
type ArgPropType = keyof PlasmicPricingButton__ArgsType;
export const PlasmicPricingButton__ArgProps = new Array<ArgPropType>(
  "children",
  "onClick",
  "link"
);

export type PlasmicPricingButton__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a">;
  normalButton?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultPricingButtonProps {
  children?: React.ReactNode;
  onClick?: () => void;
  link?: string;
  dark?: SingleBooleanChoiceArg<"dark">;
  withIcon?: SingleBooleanChoiceArg<"withIcon">;
  state?: SingleChoiceArg<"invisible" | "selected">;
  noBorder?: SingleBooleanChoiceArg<"noBorder">;
  type?: SingleChoiceArg<"link">;
  className?: string;
}

const $$ = {};

function PlasmicPricingButton__RenderFunc(props: {
  variants: PlasmicPricingButton__VariantsArgs;
  args: PlasmicPricingButton__ArgsType;
  overrides: PlasmicPricingButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dark,
      },
      {
        path: "withIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withIcon,
      },
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
      {
        path: "noBorder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noBorder,
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
    screen: useScreenVariantsb61LAyP8VHu7(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        hasVariant($state, "noBorder", "noBorder") &&
          hasVariant($state, "dark", "dark") &&
          triggers.hover_root
          ? ``
          : hasVariant($state, "dark", "dark") && triggers.hover_root
          ? "btn2"
          : undefined,
        {
          [projectcss.global_environment_website]: hasVariant(
            globalVariants,
            "environment",
            "website"
          ),
          [sty.rootdark]: hasVariant($state, "dark", "dark"),
          [sty.rootdark_noBorder]:
            hasVariant($state, "noBorder", "noBorder") &&
            hasVariant($state, "dark", "dark"),
          [sty.rootdark_state_selected]:
            hasVariant($state, "dark", "dark") &&
            hasVariant($state, "state", "selected"),
          [sty.rootdark_withIcon]:
            hasVariant($state, "dark", "dark") &&
            hasVariant($state, "withIcon", "withIcon"),
          [sty.rootnoBorder]: hasVariant($state, "noBorder", "noBorder"),
          [sty.rootstate_invisible]: hasVariant($state, "state", "invisible"),
          [sty.rootstate_selected]: hasVariant($state, "state", "selected"),
          [sty.roottype_link]: hasVariant($state, "type", "link"),
          [sty.rootwithIcon]: hasVariant($state, "withIcon", "withIcon"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(hasVariant($state, "type", "link") ? true : false) ? (
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link, {
            [sty.linktype_link]: hasVariant($state, "type", "link"),
          })}
          href={args.link}
          platform={"react"}
        />
      ) : null}
      <Stack__
        as={"div"}
        data-plasmic-name={"normalButton"}
        data-plasmic-override={overrides.normalButton}
        hasGap={true}
        className={classNames(projectcss.all, sty.normalButton, {
          [sty.normalButtondark]: hasVariant($state, "dark", "dark"),
          [sty.normalButtondark_state_selected]:
            hasVariant($state, "dark", "dark") &&
            hasVariant($state, "state", "selected"),
          [sty.normalButtondark_withIcon]:
            hasVariant($state, "dark", "dark") &&
            hasVariant($state, "withIcon", "withIcon"),
          [sty.normalButtonnoBorder]: hasVariant(
            $state,
            "noBorder",
            "noBorder"
          ),
          [sty.normalButtonstate_invisible]: hasVariant(
            $state,
            "state",
            "invisible"
          ),
          [sty.normalButtonstate_selected]: hasVariant(
            $state,
            "state",
            "selected"
          ),
          [sty.normalButtontype_link]: hasVariant($state, "type", "link"),
          [sty.normalButtonwithIcon]: hasVariant(
            $state,
            "withIcon",
            "withIcon"
          ),
        })}
        onClick={async (event) => {
          const $steps = {};

          $steps["runOnClick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnClick"] != null &&
            typeof $steps["runOnClick"] === "object" &&
            typeof $steps["runOnClick"].then === "function"
          ) {
            $steps["runOnClick"] = await $steps["runOnClick"];
          }
        }}
      >
        <ArrowLeftsvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgdark_withIcon]:
              hasVariant($state, "dark", "dark") &&
              hasVariant($state, "withIcon", "withIcon"),
            [sty.svgwithIcon]: hasVariant($state, "withIcon", "withIcon"),
          })}
          role={"img"}
        />

        {renderPlasmicSlot({
          defaultContents: "Select plan",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrendark]: hasVariant($state, "dark", "dark"),
            [sty.slotTargetChildrendark_state_selected]:
              hasVariant($state, "dark", "dark") &&
              hasVariant($state, "state", "selected"),
            [sty.slotTargetChildrenglobal_environment_website]: hasVariant(
              globalVariants,
              "environment",
              "website"
            ),
            [sty.slotTargetChildrenstate_selected]: hasVariant(
              $state,
              "state",
              "selected"
            ),
          }),
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "normalButton", "svg"],
  link: ["link"],
  normalButton: ["normalButton", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  normalButton: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingButton__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingButton__VariantsArgs;
    args?: PlasmicPricingButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPricingButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPricingButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricingButton__ArgProps,
          internalVariantPropNames: PlasmicPricingButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPricingButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingButton";
  } else {
    func.displayName = `PlasmicPricingButton.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingButton = Object.assign(
  // Top-level PlasmicPricingButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    normalButton: makeNodeComponent("normalButton"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPricingButton
    internalVariantProps: PlasmicPricingButton__VariantProps,
    internalArgProps: PlasmicPricingButton__ArgProps,
  }
);

export default PlasmicPricingButton;
/* prettier-ignore-end */
