// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m8VxGcigeLAEXFe8c12w5Q
// Component: Kyrn_lAAwr

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import FolderItem from "../../components/sidebar-tabs/ProjectPanel/FolderItem"; // plasmic-import: iWeSjEMdI3/component
import SearchInput from "../../components/sidebar-tabs/ProjectPanel/SearchInput"; // plasmic-import: CHoUJxFMpo/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../project_panel/plasmic_project_panel.module.css"; // plasmic-import: m8VxGcigeLAEXFe8c12w5Q/projectcss
import sty from "./PlasmicNavigationDropdown.module.css"; // plasmic-import: Kyrn_lAAwr/css

import CollapseAllIcon from "../plasmic_kit_design_system/PlasmicIcon__CollapseAll"; // plasmic-import: Bg-ZlWgLuQ/icon
import ExpandAllIcon from "../plasmic_kit_design_system/PlasmicIcon__ExpandAll"; // plasmic-import: zCExKvD0Do/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicNavigationDropdown__VariantMembers = {};
export type PlasmicNavigationDropdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationDropdown__VariantsArgs;
export const PlasmicNavigationDropdown__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationDropdown__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNavigationDropdown__ArgsType;
export const PlasmicNavigationDropdown__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicNavigationDropdown__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  plusButtonContainer?: Flex__<"div">;
  plusButton?: Flex__<typeof Button>;
  searchInput?: Flex__<typeof SearchInput>;
  expandButton?: Flex__<typeof Button>;
  collapseButton?: Flex__<typeof Button>;
};

export interface DefaultNavigationDropdownProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicNavigationDropdown__RenderFunc(props: {
  variants: PlasmicNavigationDropdown__VariantsArgs;
  args: PlasmicNavigationDropdown__ArgsType;
  overrides: PlasmicNavigationDropdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qEfvh)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pzpNm)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Pages, Components, Arenas"}
          </div>
          <div
            data-plasmic-name={"plusButtonContainer"}
            data-plasmic-override={overrides.plusButtonContainer}
            className={classNames(projectcss.all, sty.plusButtonContainer)}
          >
            <Button
              data-plasmic-name={"plusButton"}
              data-plasmic-override={overrides.plusButton}
              className={classNames("__wab_instance", sty.plusButton)}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__vda28)}
                  role={"img"}
                />
              }
              size={"wide"}
              startIcon={
                <PlusSvgIcon
                  className={classNames(projectcss.all, sty.svg___8QOoj)}
                  role={"img"}
                />
              }
              type={["secondary"]}
              withIcons={["endIcon"]}
            >
              {"New"}
            </Button>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___15Gjd)}
        >
          <SearchInput
            data-plasmic-name={"searchInput"}
            data-plasmic-override={overrides.searchInput}
            className={classNames("__wab_instance", sty.searchInput)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__vwmNm)}>
            <Button
              data-plasmic-name={"expandButton"}
              data-plasmic-override={overrides.expandButton}
              className={classNames("__wab_instance", sty.expandButton)}
              font={"dim"}
              size={"compact"}
              type={["clear"]}
            >
              <ExpandAllIcon
                className={classNames(projectcss.all, sty.svg__dqoJ6)}
                role={"img"}
              />
            </Button>
            <Button
              data-plasmic-name={"collapseButton"}
              data-plasmic-override={overrides.collapseButton}
              className={classNames("__wab_instance", sty.collapseButton)}
              font={"dim"}
              size={"compact"}
              type={["clear"]}
            >
              <CollapseAllIcon
                className={classNames(projectcss.all, sty.svg___4X1LL)}
                role={"img"}
              />
            </Button>
          </div>
        </Stack__>
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__n0S7B)}>
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__sAaJb)}
                type={"folderOpen"}
              >
                {"Folder"}
              </FolderItem>
              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__b8A7C)}
                nested={true}
                type={"arena"}
              >
                {"Arena"}
              </FolderItem>
              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__zdPd5)}
                type={"arena"}
              >
                {"Arena"}
              </FolderItem>
              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__aLare)}
              >
                {"Component"}
              </FolderItem>
              <FolderItem
                className={classNames("__wab_instance", sty.folderItem__xH8O)}
                selected={true}
                type={"page"}
              >
                {"Page"}
              </FolderItem>
            </React.Fragment>
          ),

          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "plusButtonContainer",
    "plusButton",
    "searchInput",
    "expandButton",
    "collapseButton",
  ],

  text: ["text"],
  plusButtonContainer: ["plusButtonContainer", "plusButton"],
  plusButton: ["plusButton"],
  searchInput: ["searchInput"],
  expandButton: ["expandButton"],
  collapseButton: ["collapseButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  plusButtonContainer: "div";
  plusButton: typeof Button;
  searchInput: typeof SearchInput;
  expandButton: typeof Button;
  collapseButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationDropdown__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationDropdown__VariantsArgs;
    args?: PlasmicNavigationDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavigationDropdown__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationDropdown__ArgProps,
          internalVariantPropNames: PlasmicNavigationDropdown__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNavigationDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigationDropdown";
  } else {
    func.displayName = `PlasmicNavigationDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationDropdown = Object.assign(
  // Top-level PlasmicNavigationDropdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    plusButtonContainer: makeNodeComponent("plusButtonContainer"),
    plusButton: makeNodeComponent("plusButton"),
    searchInput: makeNodeComponent("searchInput"),
    expandButton: makeNodeComponent("expandButton"),
    collapseButton: makeNodeComponent("collapseButton"),

    // Metadata about props expected for PlasmicNavigationDropdown
    internalVariantProps: PlasmicNavigationDropdown__VariantProps,
    internalArgProps: PlasmicNavigationDropdown__ArgProps,
  }
);

export default PlasmicNavigationDropdown;
/* prettier-ignore-end */
