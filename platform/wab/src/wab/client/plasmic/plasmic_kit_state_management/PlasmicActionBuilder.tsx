// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: frhoorZk3bxNXU73uUyvHm
// Component: YP664uas0Q

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import LabeledItem from "../../components/sidebar-tabs/StateManagement/LabeledItem"; // plasmic-import: EmZVqVuGE1/component
import StyleSelect from "../../components/style-controls/StyleSelect"; // plasmic-import: E0bKgamUEin/component
import StyleToggleButton from "../../components/style-controls/StyleToggleButton"; // plasmic-import: bqUvK9cs5w/component
import StyleToggleButtonGroup from "../../components/style-controls/StyleToggleButtonGroup"; // plasmic-import: OcKjGNdq-h/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_state_management.module.css"; // plasmic-import: frhoorZk3bxNXU73uUyvHm/projectcss
import sty from "./PlasmicActionBuilder.module.css"; // plasmic-import: YP664uas0Q/css

import PlaysvgIcon from "../plasmic_kit/PlasmicIcon__PlaySvg"; // plasmic-import: j39GoLwZnf7-v/icon
import ResetIcon from "../plasmic_kit/PlasmicIcon__Reset"; // plasmic-import: Dj3u-HuPv94sN/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import EditsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EditSvg"; // plasmic-import: _Qa2gdunG/icon
import ForbidsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ForbidSvg"; // plasmic-import: zGZ5m7RLu/icon
import GripsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__GripSvg"; // plasmic-import: jxIRSIMqs/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicActionBuilder__VariantMembers = {
  isCollapsed: "isCollapsed";
  isAdding: "isAdding";
  isConditional: "isConditional";
  isEditingActionName: "isEditingActionName";
  isDragging: "isDragging";
  alwaysShowDragHandle: "alwaysShowDragHandle";
  previewSteps: "notStarted" | "finished" | "unable";
};
export type PlasmicActionBuilder__VariantsArgs = {
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  isAdding?: SingleBooleanChoiceArg<"isAdding">;
  isConditional?: SingleBooleanChoiceArg<"isConditional">;
  isEditingActionName?: SingleBooleanChoiceArg<"isEditingActionName">;
  isDragging?: SingleBooleanChoiceArg<"isDragging">;
  alwaysShowDragHandle?: SingleBooleanChoiceArg<"alwaysShowDragHandle">;
  previewSteps?: SingleChoiceArg<"notStarted" | "finished" | "unable">;
};
type VariantPropType = keyof PlasmicActionBuilder__VariantsArgs;
export const PlasmicActionBuilder__VariantProps = new Array<VariantPropType>(
  "isCollapsed",
  "isAdding",
  "isConditional",
  "isEditingActionName",
  "isDragging",
  "alwaysShowDragHandle",
  "previewSteps"
);

export type PlasmicActionBuilder__ArgsType = {
  children?: React.ReactNode;
  actionName?: React.ReactNode;
  label?: React.ReactNode;
};
type ArgPropType = keyof PlasmicActionBuilder__ArgsType;
export const PlasmicActionBuilder__ArgProps = new Array<ArgPropType>(
  "children",
  "actionName",
  "label"
);

export type PlasmicActionBuilder__OverridesType = {
  root?: Flex__<"div">;
  dragHandle?: Flex__<"div">;
  editActionName?: Flex__<typeof Textbox>;
  play?: Flex__<"svg">;
  edit?: Flex__<"svg">;
  collapse?: Flex__<"svg">;
  menuButton?: Flex__<typeof MenuButton>;
  actionItem?: Flex__<typeof LabeledItem>;
  actionType?: Flex__<typeof StyleSelect>;
  conditionalMode?: Flex__<typeof StyleToggleButtonGroup>;
  labeledItem?: Flex__<typeof LabeledItem>;
  condExpr?: Flex__<typeof Textbox>;
  cancelBtn?: Flex__<typeof Button>;
  saveBtn?: Flex__<typeof Button>;
};

export interface DefaultActionBuilderProps {
  children?: React.ReactNode;
  actionName?: React.ReactNode;
  label?: React.ReactNode;
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  isAdding?: SingleBooleanChoiceArg<"isAdding">;
  isConditional?: SingleBooleanChoiceArg<"isConditional">;
  isEditingActionName?: SingleBooleanChoiceArg<"isEditingActionName">;
  isDragging?: SingleBooleanChoiceArg<"isDragging">;
  alwaysShowDragHandle?: SingleBooleanChoiceArg<"alwaysShowDragHandle">;
  previewSteps?: SingleChoiceArg<"notStarted" | "finished" | "unable">;
  className?: string;
}

const $$ = {};

function PlasmicActionBuilder__RenderFunc(props: {
  variants: PlasmicActionBuilder__VariantsArgs;
  args: PlasmicActionBuilder__ArgsType;
  overrides: PlasmicActionBuilder__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isCollapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isCollapsed,
      },
      {
        path: "isAdding",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isAdding,
      },
      {
        path: "isConditional",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isConditional,
      },
      {
        path: "isEditingActionName",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.isEditingActionName,
      },
      {
        path: "isDragging",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDragging,
      },
      {
        path: "alwaysShowDragHandle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.alwaysShowDragHandle,
      },
      {
        path: "actionType.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: "previewSteps",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.previewSteps,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__vLqy, {
          [sty.freeBoxisCollapsed__vLqyzAjJ]: hasVariant(
            $state,
            "isCollapsed",
            "isCollapsed"
          ),
          [sty.freeBoxisConditional__vLqyDg9Bs]: hasVariant(
            $state,
            "isConditional",
            "isConditional"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___6ONc8, {
            [sty.freeBoxisAdding___6ONc8GmcNf]: hasVariant(
              $state,
              "isAdding",
              "isAdding"
            ),
            [sty.freeBoxisCollapsed___6ONc8ZAjJ]: hasVariant(
              $state,
              "isCollapsed",
              "isCollapsed"
            ),
            [sty.freeBoxisConditional___6ONc8Dg9Bs]: hasVariant(
              $state,
              "isConditional",
              "isConditional"
            ),
            [sty.freeBoxisEditingActionName___6ONc8HiV2L]: hasVariant(
              $state,
              "isEditingActionName",
              "isEditingActionName"
            ),
            [sty.freeBoxpreviewSteps_notStarted___6ONc8FdTRt]: hasVariant(
              $state,
              "previewSteps",
              "notStarted"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__shMo5, {
              [sty.freeBoxalwaysShowDragHandle__shMo5XiQpD]: hasVariant(
                $state,
                "alwaysShowDragHandle",
                "alwaysShowDragHandle"
              ),
              [sty.freeBoxisAdding__shMo5GmcNf]: hasVariant(
                $state,
                "isAdding",
                "isAdding"
              ),
              [sty.freeBoxisDragging__shMo5ApS5N]: hasVariant(
                $state,
                "isDragging",
                "isDragging"
              ),
            })}
          >
            <div
              data-plasmic-name={"dragHandle"}
              data-plasmic-override={overrides.dragHandle}
              className={classNames(projectcss.all, sty.dragHandle, {
                [sty.dragHandlealwaysShowDragHandle]: hasVariant(
                  $state,
                  "alwaysShowDragHandle",
                  "alwaysShowDragHandle"
                ),
                [sty.dragHandleisCollapsed]: hasVariant(
                  $state,
                  "isCollapsed",
                  "isCollapsed"
                ),
                [sty.dragHandleisDragging]: hasVariant(
                  $state,
                  "isDragging",
                  "isDragging"
                ),
              })}
            >
              <GripsvgIcon
                className={classNames(projectcss.all, sty.svg__jk4SW, {
                  [sty.svgalwaysShowDragHandle__jk4SWxiQpD]: hasVariant(
                    $state,
                    "alwaysShowDragHandle",
                    "alwaysShowDragHandle"
                  ),
                  [sty.svgisAdding__jk4SWgmcNf]: hasVariant(
                    $state,
                    "isAdding",
                    "isAdding"
                  ),
                  [sty.svgisCollapsed__jk4SWzAjJ]: hasVariant(
                    $state,
                    "isCollapsed",
                    "isCollapsed"
                  ),
                  [sty.svgisDragging__jk4SWApS5N]: hasVariant(
                    $state,
                    "isDragging",
                    "isDragging"
                  ),
                })}
                role={"img"}
              />
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zbGVe, {
              [sty.freeBoxisCollapsed__zbGVezAjJ]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              ),
              [sty.freeBoxisEditingActionName__zbGVeHiV2L]: hasVariant(
                $state,
                "isEditingActionName",
                "isEditingActionName"
              ),
              [sty.freeBoxpreviewSteps_notStarted__zbGVeFdTRt]: hasVariant(
                $state,
                "previewSteps",
                "notStarted"
              ),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__hNogq, {
                [sty.freeBoxisCollapsed__hNogQzAjJ]: hasVariant(
                  $state,
                  "isCollapsed",
                  "isCollapsed"
                ),
                [sty.freeBoxisEditingActionName__hNogqHiV2L]: hasVariant(
                  $state,
                  "isEditingActionName",
                  "isEditingActionName"
                ),
                [sty.freeBoxpreviewSteps_finished__hNogQf5Qxc]: hasVariant(
                  $state,
                  "previewSteps",
                  "finished"
                ),
                [sty.freeBoxpreviewSteps_notStarted__hNogqFdTRt]: hasVariant(
                  $state,
                  "previewSteps",
                  "notStarted"
                ),
                [sty.freeBoxpreviewSteps_unable__hNogqMweTa]: hasVariant(
                  $state,
                  "previewSteps",
                  "unable"
                ),
              })}
            >
              {(
                hasVariant($state, "isEditingActionName", "isEditingActionName")
                  ? false
                  : true
              )
                ? renderPlasmicSlot({
                    defaultContents: "Action name",
                    value: args.actionName,
                    className: classNames(sty.slotTargetActionName, {
                      [sty.slotTargetActionNameisAdding]: hasVariant(
                        $state,
                        "isAdding",
                        "isAdding"
                      ),
                      [sty.slotTargetActionNameisCollapsed]: hasVariant(
                        $state,
                        "isCollapsed",
                        "isCollapsed"
                      ),
                      [sty.slotTargetActionNameisEditingActionName]: hasVariant(
                        $state,
                        "isEditingActionName",
                        "isEditingActionName"
                      ),
                    }),
                  })
                : null}
              {(
                hasVariant($state, "isEditingActionName", "isEditingActionName")
                  ? true
                  : false
              ) ? (
                <Textbox
                  data-plasmic-name={"editActionName"}
                  data-plasmic-override={overrides.editActionName}
                  className={classNames("__wab_instance", sty.editActionName, {
                    [sty.editActionNameisEditingActionName]: hasVariant(
                      $state,
                      "isEditingActionName",
                      "isEditingActionName"
                    ),
                  })}
                  prefixIcon={
                    <SearchsvgIcon
                      className={classNames(projectcss.all, sty.svg___5TaU)}
                      role={"img"}
                    />
                  }
                  styleType={["bordered", "white"]}
                  suffixIcon={
                    <ClosesvgIcon
                      className={classNames(projectcss.all, sty.svg___3MpFo)}
                      role={"img"}
                    />
                  }
                  whiteBackground={true}
                />
              ) : null}
            </div>
            <PlasmicIcon__
              data-plasmic-name={"play"}
              data-plasmic-override={overrides.play}
              PlasmicIconType={
                hasVariant($state, "previewSteps", "unable")
                  ? ForbidsvgIcon
                  : hasVariant($state, "previewSteps", "finished")
                  ? ResetIcon
                  : PlaysvgIcon
              }
              className={classNames(projectcss.all, sty.play, {
                [sty.playisAdding]: hasVariant($state, "isAdding", "isAdding"),
                [sty.playisConditional]: hasVariant(
                  $state,
                  "isConditional",
                  "isConditional"
                ),
                [sty.playisEditingActionName]: hasVariant(
                  $state,
                  "isEditingActionName",
                  "isEditingActionName"
                ),
                [sty.playpreviewSteps_finished]: hasVariant(
                  $state,
                  "previewSteps",
                  "finished"
                ),
                [sty.playpreviewSteps_notStarted]: hasVariant(
                  $state,
                  "previewSteps",
                  "notStarted"
                ),
                [sty.playpreviewSteps_unable]: hasVariant(
                  $state,
                  "previewSteps",
                  "unable"
                ),
              })}
              role={"img"}
            />

            <EditsvgIcon
              data-plasmic-name={"edit"}
              data-plasmic-override={overrides.edit}
              className={classNames(projectcss.all, sty.edit, {
                [sty.editisAdding]: hasVariant($state, "isAdding", "isAdding"),
                [sty.editisConditional]: hasVariant(
                  $state,
                  "isConditional",
                  "isConditional"
                ),
                [sty.editisEditingActionName]: hasVariant(
                  $state,
                  "isEditingActionName",
                  "isEditingActionName"
                ),
              })}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox___38C0J)}>
              <ChevronDownsvgIcon
                data-plasmic-name={"collapse"}
                data-plasmic-override={overrides.collapse}
                className={classNames(projectcss.all, sty.collapse, {
                  [sty.collapseisCollapsed]: hasVariant(
                    $state,
                    "isCollapsed",
                    "isCollapsed"
                  ),
                  [sty.collapseisEditingActionName]: hasVariant(
                    $state,
                    "isEditingActionName",
                    "isEditingActionName"
                  ),
                })}
                role={"img"}
              />
            </div>
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__uRyt, {
              [sty.freeBoxisAdding__uRytgmcNf]: hasVariant(
                $state,
                "isAdding",
                "isAdding"
              ),
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hpc)}>
              <MenuButton
                data-plasmic-name={"menuButton"}
                data-plasmic-override={overrides.menuButton}
                className={classNames("__wab_instance", sty.menuButton)}
              />
            </div>
          </div>
        </div>
        {(hasVariant($state, "isCollapsed", "isCollapsed") ? false : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__hepWb, {
              [sty.freeBoxisCollapsed__hepWbzAjJ]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uIig9, {
                [sty.freeBoxisAdding__uIig9GmcNf]: hasVariant(
                  $state,
                  "isAdding",
                  "isAdding"
                ),
                [sty.freeBoxisCollapsed__uIig9ZAjJ]: hasVariant(
                  $state,
                  "isCollapsed",
                  "isCollapsed"
                ),
                [sty.freeBoxisConditional__uIig9Dg9Bs]: hasVariant(
                  $state,
                  "isConditional",
                  "isConditional"
                ),
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__gi2U, {
                  [sty.freeBoxisAdding__gi2UGmcNf]: hasVariant(
                    $state,
                    "isAdding",
                    "isAdding"
                  ),
                })}
              >
                <LabeledItem
                  data-plasmic-name={"actionItem"}
                  data-plasmic-override={overrides.actionItem}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f4LVu
                      )}
                    >
                      {"Action"}
                    </div>
                  }
                  layout={"vertical"}
                  value={
                    <StyleSelect
                      data-plasmic-name={"actionType"}
                      data-plasmic-override={overrides.actionType}
                      className={classNames("__wab_instance", sty.actionType, {
                        [sty.actionTypeisAdding]: hasVariant(
                          $state,
                          "isAdding",
                          "isAdding"
                        ),
                      })}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "actionType",
                          "value",
                        ])(eventArgs[0]);
                      }}
                      placeholder={"Select..."}
                      value={generateStateValueProp($state, [
                        "actionType",
                        "value",
                      ])}
                      valueSetState={"isSet"}
                    />
                  }
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ozxrn)}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <LabeledItem
                        className={classNames(
                          "__wab_instance",
                          sty.labeledItem__f8Znu
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iBtM5
                            )}
                          >
                            {"Value"}
                          </div>
                        }
                        layout={"vertical"}
                        value={
                          <Textbox
                            className={classNames(
                              "__wab_instance",
                              sty.textbox__q2VOf
                            )}
                            prefixIcon={
                              <SearchsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___5Gx3L
                                )}
                                role={"img"}
                              />
                            }
                            styleType={["bordered"]}
                            suffixIcon={
                              <ClosesvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ws8Js
                                )}
                                role={"img"}
                              />
                            }
                          />
                        }
                      />

                      <LabeledItem
                        className={classNames(
                          "__wab_instance",
                          sty.labeledItem__aDtMm
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a8Ca9
                            )}
                          >
                            {"Variable"}
                          </div>
                        }
                        layout={"vertical"}
                        value={
                          <Textbox
                            className={classNames(
                              "__wab_instance",
                              sty.textbox__qc4J9
                            )}
                            prefixIcon={
                              <SearchsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__z1F4E
                                )}
                                role={"img"}
                              />
                            }
                            styleType={["bordered"]}
                            suffixIcon={
                              <ClosesvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tyYYz
                                )}
                                role={"img"}
                              />
                            }
                          />
                        }
                      />
                    </React.Fragment>
                  ),

                  value: args.children,
                })}
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gEkwk)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__p0Zpy, {
                  [sty.freeBoxisAdding__p0ZpyGmcNf]: hasVariant(
                    $state,
                    "isAdding",
                    "isAdding"
                  ),
                })}
              />

              {renderPlasmicSlot({
                defaultContents: "Advanced",
                value: args.label,
                className: classNames(sty.slotTargetLabel),
              })}
              <div className={classNames(projectcss.all, sty.freeBox__j9J79)} />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__y1CVo, {
                [sty.freeBoxisConditional__y1CVodg9Bs]: hasVariant(
                  $state,
                  "isConditional",
                  "isConditional"
                ),
                [sty.freeBoxisDragging__y1CVoApS5N]: hasVariant(
                  $state,
                  "isDragging",
                  "isDragging"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1QIqN
                )}
              >
                {"Run this step"}
              </div>
              <StyleToggleButtonGroup
                data-plasmic-name={"conditionalMode"}
                data-plasmic-override={overrides.conditionalMode}
                className={classNames("__wab_instance", sty.conditionalMode, {
                  [sty.conditionalModeisConditional]: hasVariant(
                    $state,
                    "isConditional",
                    "isConditional"
                  ),
                })}
              >
                <StyleToggleButton
                  className={classNames(
                    "__wab_instance",
                    sty.styleToggleButton__yeXse,
                    {
                      [sty.styleToggleButtonisConditional__yeXsedg9Bs]:
                        hasVariant($state, "isConditional", "isConditional"),
                    }
                  )}
                  styleValue={"always"}
                  valueSetState={
                    hasVariant($state, "isConditional", "isConditional")
                      ? "isUnset"
                      : "isSet"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zKDe6
                    )}
                  >
                    {"Always"}
                  </div>
                </StyleToggleButton>
                <StyleToggleButton
                  className={classNames(
                    "__wab_instance",
                    sty.styleToggleButton__qzQ8M,
                    {
                      [sty.styleToggleButtonisConditional__qzQ8Mdg9Bs]:
                        hasVariant($state, "isConditional", "isConditional"),
                    }
                  )}
                  styleValue={"never"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rTcr
                    )}
                  >
                    {"Never"}
                  </div>
                </StyleToggleButton>
                <StyleToggleButton
                  className={classNames(
                    "__wab_instance",
                    sty.styleToggleButton__l8X8A,
                    {
                      [sty.styleToggleButtonisConditional__l8X8ADg9Bs]:
                        hasVariant($state, "isConditional", "isConditional"),
                    }
                  )}
                  styleValue={"expression"}
                  valueSetState={
                    hasVariant($state, "isConditional", "isConditional")
                      ? "isSet"
                      : undefined
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rQi9K
                    )}
                  >
                    {"When..."}
                  </div>
                </StyleToggleButton>
              </StyleToggleButtonGroup>
              <LabeledItem
                data-plasmic-name={"labeledItem"}
                data-plasmic-override={overrides.labeledItem}
                className={classNames("__wab_instance", sty.labeledItem, {
                  [sty.labeledItemisConditional]: hasVariant(
                    $state,
                    "isConditional",
                    "isConditional"
                  ),
                })}
                label={null}
                layout={"vertical"}
                value={
                  <Textbox
                    data-plasmic-name={"condExpr"}
                    data-plasmic-override={overrides.condExpr}
                    className={classNames("__wab_instance", sty.condExpr, {
                      [sty.condExprisConditional]: hasVariant(
                        $state,
                        "isConditional",
                        "isConditional"
                      ),
                    })}
                    prefixIcon={
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__mxU6)}
                        role={"img"}
                      />
                    }
                    styleType={["bordered"]}
                    suffixIcon={
                      <ClosesvgIcon
                        className={classNames(projectcss.all, sty.svg__e28Tm)}
                        role={"img"}
                      />
                    }
                  />
                }
              />
            </Stack__>
          </div>
        ) : null}
        {(hasVariant($state, "isCollapsed", "isCollapsed") ? false : false) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__leznJ, {
              [sty.freeBoxisAdding__leznJgmcNf]: hasVariant(
                $state,
                "isAdding",
                "isAdding"
              ),
              [sty.freeBoxisCollapsed__leznJzAjJ]: hasVariant(
                $state,
                "isCollapsed",
                "isCollapsed"
              ),
            })}
          >
            <Button
              data-plasmic-name={"cancelBtn"}
              data-plasmic-override={overrides.cancelBtn}
              className={classNames("__wab_instance", sty.cancelBtn, {
                [sty.cancelBtnisCollapsed]: hasVariant(
                  $state,
                  "isCollapsed",
                  "isCollapsed"
                ),
              })}
              endIcon={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__cyV10)}
                  role={"img"}
                />
              }
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___072Fr, {
                    [sty.svgisCollapsed___072FRzAjJ]: hasVariant(
                      $state,
                      "isCollapsed",
                      "isCollapsed"
                    ),
                  })}
                  role={"img"}
                />
              }
            >
              {"Cancel"}
            </Button>
            <Button
              data-plasmic-name={"saveBtn"}
              data-plasmic-override={overrides.saveBtn}
              className={classNames("__wab_instance", sty.saveBtn, {
                [sty.saveBtnisAdding]: hasVariant(
                  $state,
                  "isAdding",
                  "isAdding"
                ),
              })}
              endIcon={
                <ChevronDownsvgIcon
                  className={classNames(projectcss.all, sty.svg__cF9Sm)}
                  role={"img"}
                />
              }
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__tyTTc)}
                  role={"img"}
                />
              }
              type={["primary"]}
            >
              {"Save"}
            </Button>
          </Stack__>
        ) : null}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__zhpXc)}>
        <div className={classNames(projectcss.all, sty.freeBox__gDmD8)} />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dragHandle",
    "editActionName",
    "play",
    "edit",
    "collapse",
    "menuButton",
    "actionItem",
    "actionType",
    "conditionalMode",
    "labeledItem",
    "condExpr",
    "cancelBtn",
    "saveBtn",
  ],

  dragHandle: ["dragHandle"],
  editActionName: ["editActionName"],
  play: ["play"],
  edit: ["edit"],
  collapse: ["collapse"],
  menuButton: ["menuButton"],
  actionItem: ["actionItem", "actionType"],
  actionType: ["actionType"],
  conditionalMode: ["conditionalMode"],
  labeledItem: ["labeledItem", "condExpr"],
  condExpr: ["condExpr"],
  cancelBtn: ["cancelBtn"],
  saveBtn: ["saveBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dragHandle: "div";
  editActionName: typeof Textbox;
  play: "svg";
  edit: "svg";
  collapse: "svg";
  menuButton: typeof MenuButton;
  actionItem: typeof LabeledItem;
  actionType: typeof StyleSelect;
  conditionalMode: typeof StyleToggleButtonGroup;
  labeledItem: typeof LabeledItem;
  condExpr: typeof Textbox;
  cancelBtn: typeof Button;
  saveBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionBuilder__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActionBuilder__VariantsArgs;
    args?: PlasmicActionBuilder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActionBuilder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActionBuilder__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActionBuilder__ArgProps,
          internalVariantPropNames: PlasmicActionBuilder__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicActionBuilder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionBuilder";
  } else {
    func.displayName = `PlasmicActionBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicActionBuilder = Object.assign(
  // Top-level PlasmicActionBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dragHandle: makeNodeComponent("dragHandle"),
    editActionName: makeNodeComponent("editActionName"),
    play: makeNodeComponent("play"),
    edit: makeNodeComponent("edit"),
    collapse: makeNodeComponent("collapse"),
    menuButton: makeNodeComponent("menuButton"),
    actionItem: makeNodeComponent("actionItem"),
    actionType: makeNodeComponent("actionType"),
    conditionalMode: makeNodeComponent("conditionalMode"),
    labeledItem: makeNodeComponent("labeledItem"),
    condExpr: makeNodeComponent("condExpr"),
    cancelBtn: makeNodeComponent("cancelBtn"),
    saveBtn: makeNodeComponent("saveBtn"),

    // Metadata about props expected for PlasmicActionBuilder
    internalVariantProps: PlasmicActionBuilder__VariantProps,
    internalArgProps: PlasmicActionBuilder__ArgProps,
  }
);

export default PlasmicActionBuilder;
/* prettier-ignore-end */
