// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: frhoorZk3bxNXU73uUyvHm
// Component: s6ZC9dnvK9A

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ActionBuilder from "../../components/sidebar-tabs/StateManagement/ActionBuilder"; // plasmic-import: YP664uas0Q/component
import LabeledItem from "../../components/sidebar-tabs/StateManagement/LabeledItem"; // plasmic-import: EmZVqVuGE1/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_state_management.module.css"; // plasmic-import: frhoorZk3bxNXU73uUyvHm/projectcss
import sty from "./PlasmicHandlerSection.module.css"; // plasmic-import: s6ZC9dnvK9A/css

import BoltPlusIcon from "../plasmic_kit/PlasmicIcon__BoltPlus"; // plasmic-import: -RXQcn1QrTqlQ/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicHandlerSection__VariantMembers = {
  isCollapsed: "isCollapsed";
  isAdding: "isAdding";
  isConditional: "isConditional";
  isEditingActionName: "isEditingActionName";
};
export type PlasmicHandlerSection__VariantsArgs = {
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  isAdding?: SingleBooleanChoiceArg<"isAdding">;
  isConditional?: SingleBooleanChoiceArg<"isConditional">;
  isEditingActionName?: SingleBooleanChoiceArg<"isEditingActionName">;
};
type VariantPropType = keyof PlasmicHandlerSection__VariantsArgs;
export const PlasmicHandlerSection__VariantProps = new Array<VariantPropType>(
  "isCollapsed",
  "isAdding",
  "isConditional",
  "isEditingActionName"
);

export type PlasmicHandlerSection__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHandlerSection__ArgsType;
export const PlasmicHandlerSection__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicHandlerSection__OverridesType = {
  root?: Flex__<"div">;
  addBtn?: Flex__<typeof Button>;
};

export interface DefaultHandlerSectionProps {
  children?: React.ReactNode;
  isCollapsed?: SingleBooleanChoiceArg<"isCollapsed">;
  isAdding?: SingleBooleanChoiceArg<"isAdding">;
  isConditional?: SingleBooleanChoiceArg<"isConditional">;
  isEditingActionName?: SingleBooleanChoiceArg<"isEditingActionName">;
  className?: string;
}

const $$ = {};

function PlasmicHandlerSection__RenderFunc(props: {
  variants: PlasmicHandlerSection__VariantsArgs;
  args: PlasmicHandlerSection__ArgsType;
  overrides: PlasmicHandlerSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isCollapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isCollapsed,
      },
      {
        path: "isAdding",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isAdding,
      },
      {
        path: "isConditional",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isConditional,
      },
      {
        path: "isEditingActionName",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.isEditingActionName,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisCollapsed]: hasVariant(
            $state,
            "isCollapsed",
            "isCollapsed"
          ),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dynXd)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <ActionBuilder
                className={classNames(
                  "__wab_instance",
                  sty.actionBuilder__fWdQ4
                )}
              >
                <LabeledItem
                  className={classNames(
                    "__wab_instance",
                    sty.labeledItem__ps6Ir
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ojzWh
                      )}
                    >
                      {"Value"}
                    </div>
                  }
                  layout={"vertical"}
                  value={
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox___0TYrx
                      )}
                      prefixIcon={
                        <SearchsvgIcon
                          className={classNames(projectcss.all, sty.svg__wQVr8)}
                          role={"img"}
                        />
                      }
                      styleType={["bordered"]}
                      suffixIcon={
                        <ClosesvgIcon
                          className={classNames(projectcss.all, sty.svg__zrbyP)}
                          role={"img"}
                        />
                      }
                    />
                  }
                />

                <LabeledItem
                  className={classNames(
                    "__wab_instance",
                    sty.labeledItem___9Qy41
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u4N46
                      )}
                    >
                      {"Variable"}
                    </div>
                  }
                  layout={"vertical"}
                  value={
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__uOqP3
                      )}
                      prefixIcon={
                        <SearchsvgIcon
                          className={classNames(projectcss.all, sty.svg__zpTmz)}
                          role={"img"}
                        />
                      }
                      styleType={["bordered"]}
                      suffixIcon={
                        <ClosesvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5HQcx
                          )}
                          role={"img"}
                        />
                      }
                    />
                  }
                />
              </ActionBuilder>
              <ActionBuilder
                className={classNames(
                  "__wab_instance",
                  sty.actionBuilder__cdJ1J
                )}
                isCollapsed={true}
              >
                <LabeledItem
                  className={classNames(
                    "__wab_instance",
                    sty.labeledItem__eBEv
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uZ7AV
                      )}
                    >
                      {"Value"}
                    </div>
                  }
                  layout={"vertical"}
                  value={
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox___3Vq4V
                      )}
                      prefixIcon={
                        <SearchsvgIcon
                          className={classNames(projectcss.all, sty.svg__kuax4)}
                          role={"img"}
                        />
                      }
                      styleType={["bordered"]}
                      suffixIcon={
                        <ClosesvgIcon
                          className={classNames(projectcss.all, sty.svg__amz4U)}
                          role={"img"}
                        />
                      }
                    />
                  }
                />

                <LabeledItem
                  className={classNames(
                    "__wab_instance",
                    sty.labeledItem__rCkFr
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x8QxG
                      )}
                    >
                      {"Variable"}
                    </div>
                  }
                  layout={"vertical"}
                  value={
                    <Textbox
                      className={classNames(
                        "__wab_instance",
                        sty.textbox__nz0Dz
                      )}
                      prefixIcon={
                        <SearchsvgIcon
                          className={classNames(projectcss.all, sty.svg__v3ZzK)}
                          role={"img"}
                        />
                      }
                      styleType={["bordered"]}
                      suffixIcon={
                        <ClosesvgIcon
                          className={classNames(projectcss.all, sty.svg__f9CcU)}
                          role={"img"}
                        />
                      }
                    />
                  }
                />
              </ActionBuilder>
            </React.Fragment>
          ),

          value: args.children,
        })}
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ysQx6, {
            [sty.freeBoxisAdding__ysQx6SAn5Z]: hasVariant(
              $state,
              "isAdding",
              "isAdding"
            ),
          })}
        >
          <Button
            data-plasmic-name={"addBtn"}
            data-plasmic-override={overrides.addBtn}
            className={classNames("__wab_instance", sty.addBtn)}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__thuje)}
                role={"img"}
              />
            }
            startIcon={
              <BoltPlusIcon
                className={classNames(projectcss.all, sty.svg__u5Wg1)}
                role={"img"}
              />
            }
            type={["primary"]}
            withIcons={["startIcon"]}
          >
            {"Add new action"}
          </Button>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "addBtn"],
  addBtn: ["addBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  addBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHandlerSection__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHandlerSection__VariantsArgs;
    args?: PlasmicHandlerSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHandlerSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHandlerSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHandlerSection__ArgProps,
          internalVariantPropNames: PlasmicHandlerSection__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHandlerSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHandlerSection";
  } else {
    func.displayName = `PlasmicHandlerSection.${nodeName}`;
  }
  return func;
}

export const PlasmicHandlerSection = Object.assign(
  // Top-level PlasmicHandlerSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    addBtn: makeNodeComponent("addBtn"),

    // Metadata about props expected for PlasmicHandlerSection
    internalVariantProps: PlasmicHandlerSection__VariantProps,
    internalArgProps: PlasmicHandlerSection__ArgProps,
  }
);

export default PlasmicHandlerSection;
/* prettier-ignore-end */
