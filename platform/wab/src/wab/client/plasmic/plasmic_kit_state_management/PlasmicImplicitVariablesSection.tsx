// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: frhoorZk3bxNXU73uUyvHm
// Component: 3OCMg2P28Q

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import VariableRow from "../../components/sidebar-tabs/StateManagement/VariableRow"; // plasmic-import: jiD9NQWVHe/component
import LabeledListItem from "../../components/widgets/LabeledListItem"; // plasmic-import: -L2zZ5Mvmr/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_state_management.module.css"; // plasmic-import: frhoorZk3bxNXU73uUyvHm/projectcss
import sty from "./PlasmicImplicitVariablesSection.module.css"; // plasmic-import: 3OCMg2P28Q/css

import ComponentIcon from "../plasmic_kit/PlasmicIcon__Component"; // plasmic-import: nNWEF4jI3s5DI/icon

createPlasmicElementProxy;

export type PlasmicImplicitVariablesSection__VariantMembers = {
  isSelected: "isSelected";
  color: "variant";
};
export type PlasmicImplicitVariablesSection__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  color?: SingleChoiceArg<"variant">;
};
type VariantPropType = keyof PlasmicImplicitVariablesSection__VariantsArgs;
export const PlasmicImplicitVariablesSection__VariantProps =
  new Array<VariantPropType>("isSelected", "color");

export type PlasmicImplicitVariablesSection__ArgsType = {
  children?: React.ReactNode;
  title?: React.ReactNode;
  icon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicImplicitVariablesSection__ArgsType;
export const PlasmicImplicitVariablesSection__ArgProps = new Array<ArgPropType>(
  "children",
  "title",
  "icon"
);

export type PlasmicImplicitVariablesSection__OverridesType = {
  root?: Flex__<"div">;
  tplRow?: Flex__<typeof LabeledListItem>;
  freeBox?: Flex__<"div">;
};

export interface DefaultImplicitVariablesSectionProps {
  children?: React.ReactNode;
  title?: React.ReactNode;
  icon?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  color?: SingleChoiceArg<"variant">;
  className?: string;
}

const $$ = {};

function PlasmicImplicitVariablesSection__RenderFunc(props: {
  variants: PlasmicImplicitVariablesSection__VariantsArgs;
  args: PlasmicImplicitVariablesSection__ArgsType;
  overrides: PlasmicImplicitVariablesSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected,
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.rootisSelected_color_variant]:
            hasVariant($state, "isSelected", "isSelected") &&
            hasVariant($state, "color", "variant"),
        }
      )}
    >
      <LabeledListItem
        data-plasmic-name={"tplRow"}
        data-plasmic-override={overrides.tplRow}
        children={null}
        className={classNames("__wab_instance", sty.tplRow, {
          [sty.tplRowisSelected]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          ),
        })}
        icon={renderPlasmicSlot({
          defaultContents: (
            <ComponentIcon
              className={classNames(projectcss.all, sty.svg___2Wwcl)}
              role={"img"}
            />
          ),

          value: args.icon,
        })}
        label={renderPlasmicSlot({
          defaultContents: "Label",
          value: args.title,
        })}
        withIcon={true}
        withMenu={true}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <VariableRow
                className={classNames("__wab_instance", sty.variableRow__dGtU)}
                hideValue={true}
                leftPadding={32}
              />

              <VariableRow
                className={classNames("__wab_instance", sty.variableRow__pyXrl)}
                hideValue={true}
                leftPadding={32}
                variableType={"boolean"}
              />

              <VariableRow
                className={classNames(
                  "__wab_instance",
                  sty.variableRow___5G4Dt
                )}
                hideValue={true}
                leftPadding={32}
                variableType={"array"}
              />
            </React.Fragment>
          ),

          value: args.children,
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tplRow", "freeBox"],
  tplRow: ["tplRow"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tplRow: typeof LabeledListItem;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImplicitVariablesSection__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImplicitVariablesSection__VariantsArgs;
    args?: PlasmicImplicitVariablesSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImplicitVariablesSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImplicitVariablesSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImplicitVariablesSection__ArgProps,
          internalVariantPropNames:
            PlasmicImplicitVariablesSection__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicImplicitVariablesSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImplicitVariablesSection";
  } else {
    func.displayName = `PlasmicImplicitVariablesSection.${nodeName}`;
  }
  return func;
}

export const PlasmicImplicitVariablesSection = Object.assign(
  // Top-level PlasmicImplicitVariablesSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tplRow: makeNodeComponent("tplRow"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicImplicitVariablesSection
    internalVariantProps: PlasmicImplicitVariablesSection__VariantProps,
    internalArgProps: PlasmicImplicitVariablesSection__ArgProps,
  }
);

export default PlasmicImplicitVariablesSection;
/* prettier-ignore-end */
