// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: frhoorZk3bxNXU73uUyvHm
// Component: 2_3UTUe0CF

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import ImplicitVariablesSection from "../../components/sidebar-tabs/StateManagement/ImplicitVariablesSection"; // plasmic-import: 3OCMg2P28Q/component
import VariableRow from "../../components/sidebar-tabs/StateManagement/VariableRow"; // plasmic-import: jiD9NQWVHe/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_new_design_system_former_style_controls_css from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_state_management.module.css"; // plasmic-import: frhoorZk3bxNXU73uUyvHm/projectcss
import sty from "./PlasmicVariablesSection.module.css"; // plasmic-import: 2_3UTUe0CF/css

createPlasmicElementProxy;

export type PlasmicVariablesSection__VariantMembers = {
  isExpanded: "isExpanded";
  hasImplicitStates: "hasImplicitStates";
};
export type PlasmicVariablesSection__VariantsArgs = {
  isExpanded?: SingleBooleanChoiceArg<"isExpanded">;
  hasImplicitStates?: SingleBooleanChoiceArg<"hasImplicitStates">;
};
type VariantPropType = keyof PlasmicVariablesSection__VariantsArgs;
export const PlasmicVariablesSection__VariantProps = new Array<VariantPropType>(
  "isExpanded",
  "hasImplicitStates"
);

export type PlasmicVariablesSection__ArgsType = {
  children?: React.ReactNode;
  implicitStates?: React.ReactNode;
};
type ArgPropType = keyof PlasmicVariablesSection__ArgsType;
export const PlasmicVariablesSection__ArgProps = new Array<ArgPropType>(
  "children",
  "implicitStates"
);

export type PlasmicVariablesSection__OverridesType = {
  root?: Flex__<"div">;
  listSectionSeparator?: Flex__<typeof ListSectionSeparator>;
};

export interface DefaultVariablesSectionProps {
  children?: React.ReactNode;
  implicitStates?: React.ReactNode;
  isExpanded?: SingleBooleanChoiceArg<"isExpanded">;
  hasImplicitStates?: SingleBooleanChoiceArg<"hasImplicitStates">;
  className?: string;
}

const $$ = {};

function PlasmicVariablesSection__RenderFunc(props: {
  variants: PlasmicVariablesSection__VariantsArgs;
  args: PlasmicVariablesSection__ArgsType;
  overrides: PlasmicVariablesSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isExpanded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isExpanded,
      },
      {
        path: "hasImplicitStates",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.hasImplicitStates,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_new_design_system_former_style_controls_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__swhJx, {
          [sty.freeBoxhasImplicitStates__swhJx2CNa0]: hasVariant(
            $state,
            "hasImplicitStates",
            "hasImplicitStates"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <VariableRow
                className={classNames("__wab_instance", sty.variableRow__eY4H3)}
                value={
                  <React.Fragment>
                    {(() => {
                      try {
                        return "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                }
                variableType={"text"}
              />

              <VariableRow
                className={classNames("__wab_instance", sty.variableRow__gfor4)}
                isExternal={true}
              />
            </React.Fragment>
          ),

          value: args.children,
        })}
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__swXZo, {
          [sty.freeBoxhasImplicitStates__swXZo2CNa0]: hasVariant(
            $state,
            "hasImplicitStates",
            "hasImplicitStates"
          ),
          [sty.freeBoxhasImplicitStates_isExpanded__swXZo2CNa0JQ1D7]:
            hasVariant($state, "hasImplicitStates", "hasImplicitStates") &&
            hasVariant($state, "isExpanded", "isExpanded"),
          [sty.freeBoxisExpanded__swXZojQ1D7]: hasVariant(
            $state,
            "isExpanded",
            "isExpanded"
          ),
        })}
      >
        <ListSectionSeparator
          data-plasmic-name={"listSectionSeparator"}
          data-plasmic-override={overrides.listSectionSeparator}
          className={classNames("__wab_instance", sty.listSectionSeparator, {
            [sty.listSectionSeparatorhasImplicitStates]: hasVariant(
              $state,
              "hasImplicitStates",
              "hasImplicitStates"
            ),
          })}
        />
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__w5Omk, {
          [sty.freeBoxisExpanded__w5OmkjQ1D7]: hasVariant(
            $state,
            "isExpanded",
            "isExpanded"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <ImplicitVariablesSection
                className={classNames(
                  "__wab_instance",
                  sty.implicitVariablesSection__fDm3O
                )}
              >
                <VariableRow
                  className={classNames(
                    "__wab_instance",
                    sty.variableRow__wuXum
                  )}
                  hideValue={true}
                  leftPadding={32}
                />
              </ImplicitVariablesSection>
              <ImplicitVariablesSection
                className={classNames(
                  "__wab_instance",
                  sty.implicitVariablesSection__rIwMc
                )}
              >
                <VariableRow
                  className={classNames(
                    "__wab_instance",
                    sty.variableRow__eqFtr
                  )}
                  hideValue={true}
                  leftPadding={32}
                />
              </ImplicitVariablesSection>
            </React.Fragment>
          ),

          value: args.implicitStates,
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "listSectionSeparator"],
  listSectionSeparator: ["listSectionSeparator"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  listSectionSeparator: typeof ListSectionSeparator;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariablesSection__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVariablesSection__VariantsArgs;
    args?: PlasmicVariablesSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVariablesSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVariablesSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVariablesSection__ArgProps,
          internalVariantPropNames: PlasmicVariablesSection__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicVariablesSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariablesSection";
  } else {
    func.displayName = `PlasmicVariablesSection.${nodeName}`;
  }
  return func;
}

export const PlasmicVariablesSection = Object.assign(
  // Top-level PlasmicVariablesSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listSectionSeparator: makeNodeComponent("listSectionSeparator"),

    // Metadata about props expected for PlasmicVariablesSection
    internalVariantProps: PlasmicVariablesSection__VariantProps,
    internalArgProps: PlasmicVariablesSection__ArgProps,
  }
);

export default PlasmicVariablesSection;
/* prettier-ignore-end */
