// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6CrqkTcB6gSAHoA8c8zpNz
// Component: OAMl2pw5C9W

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_top_bar.module.css"; // plasmic-import: 6CrqkTcB6gSAHoA8c8zpNz/projectcss
import sty from "./PlasmicArenaSwitcher.module.css"; // plasmic-import: OAMl2pw5C9W/css

import MixedArenaIcon from "../plasmic_kit_design_system/icons/PlasmicIcon__MixedArena"; // plasmic-import: ArS5N_7TRj/icon
import PageIcon from "../plasmic_kit_design_system/icons/PlasmicIcon__Page"; // plasmic-import: p8KOsO82kk/icon
import ArrowRightsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ComponentsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ComponentSvg"; // plasmic-import: vJVrKlrDD/icon

export type PlasmicArenaSwitcher__VariantMembers = {
  arenaType: "page" | "component" | "mixed";
};

export type PlasmicArenaSwitcher__VariantsArgs = {
  arenaType?: SingleChoiceArg<"page" | "component" | "mixed">;
};

type VariantPropType = keyof PlasmicArenaSwitcher__VariantsArgs;
export const PlasmicArenaSwitcher__VariantProps = new Array<VariantPropType>(
  "arenaType"
);

export type PlasmicArenaSwitcher__ArgsType = {};
type ArgPropType = keyof PlasmicArenaSwitcher__ArgsType;
export const PlasmicArenaSwitcher__ArgProps = new Array<ArgPropType>();

export type PlasmicArenaSwitcher__OverridesType = {
  root?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultArenaSwitcherProps {
  arenaType?: SingleChoiceArg<"page" | "component" | "mixed">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicArenaSwitcher__RenderFunc(props: {
  variants: PlasmicArenaSwitcher__VariantsArgs;
  args: PlasmicArenaSwitcher__ArgsType;
  overrides: PlasmicArenaSwitcher__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "arenaType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.arenaType,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      font={"bold" as const}
      startIcon={
        <p.PlasmicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant($state, "arenaType", "mixed")
              ? MixedArenaIcon
              : hasVariant($state, "arenaType", "component")
              ? ComponentsvgIcon
              : hasVariant($state, "arenaType", "page")
              ? PageIcon
              : ArrowRightsvgIcon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgarenaType_component]: hasVariant(
              $state,
              "arenaType",
              "component"
            ),
            [sty.svgarenaType_mixed]: hasVariant($state, "arenaType", "mixed"),
            [sty.svgarenaType_page]: hasVariant($state, "arenaType", "page"),
          })}
          role={"img"}
        />
      }
      type={["clear"]}
      withIcons={["endIcon", "startIcon"]}
    >
      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textarenaType_mixed]: hasVariant(
                  $state,
                  "arenaType",
                  "mixed"
                ),
                [sty.textarenaType_page]: hasVariant(
                  $state,
                  "arenaType",
                  "page"
                ),
              }
            )}
          >
            {"Arena Name"}
          </div>
        </div>
      ) : null}
    </Button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "freeBox", "text"],
  svg: ["svg"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Button;
  svg: "svg";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArenaSwitcher__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicArenaSwitcher__VariantsArgs;
  args?: PlasmicArenaSwitcher__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicArenaSwitcher__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicArenaSwitcher__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArenaSwitcher__ArgProps,
          internalVariantPropNames: PlasmicArenaSwitcher__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicArenaSwitcher__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArenaSwitcher";
  } else {
    func.displayName = `PlasmicArenaSwitcher.${nodeName}`;
  }
  return func;
}

export const PlasmicArenaSwitcher = Object.assign(
  // Top-level PlasmicArenaSwitcher renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicArenaSwitcher
    internalVariantProps: PlasmicArenaSwitcher__VariantProps,
    internalArgProps: PlasmicArenaSwitcher__ArgProps,
  }
);

export default PlasmicArenaSwitcher;
/* prettier-ignore-end */
