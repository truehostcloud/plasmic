// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: a8J6Zytovv
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicScreenVariantSpec.module.css"; // plasmic-import: a8J6Zytovv/css

import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

export type PlasmicScreenVariantSpec__VariantMembers = {};

export type PlasmicScreenVariantSpec__VariantsArgs = {};
type VariantPropType = keyof PlasmicScreenVariantSpec__VariantsArgs;
export const PlasmicScreenVariantSpec__VariantProps =
  new Array<VariantPropType>();

export type PlasmicScreenVariantSpec__ArgsType = {};
type ArgPropType = keyof PlasmicScreenVariantSpec__ArgsType;
export const PlasmicScreenVariantSpec__ArgProps = new Array<ArgPropType>();

export type PlasmicScreenVariantSpec__OverridesType = {
  root?: p.Flex<"div">;
  minInput?: p.Flex<typeof Textbox>;
  maxInput?: p.Flex<typeof Textbox>;
};

export interface DefaultScreenVariantSpecProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicScreenVariantSpec__RenderFunc(props: {
  variants: PlasmicScreenVariantSpec__VariantsArgs;
  args: PlasmicScreenVariantSpec__ArgsType;
  overrides: PlasmicScreenVariantSpec__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__gRhGh
        )}
      >
        {"min"}
      </div>

      <Textbox
        data-plasmic-name={"minInput"}
        data-plasmic-override={overrides.minInput}
        className={classNames("__wab_instance", sty.minInput)}
        prefixIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__uvLi9)}
            role={"img"}
          />
        }
        suffixIcon={
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg__zJlSt)}
            role={"img"}
          />
        }
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__zwolD
        )}
      >
        {"max"}
      </div>

      <Textbox
        data-plasmic-name={"maxInput"}
        data-plasmic-override={overrides.maxInput}
        className={classNames("__wab_instance", sty.maxInput)}
        prefixIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg__m1Sqi)}
            role={"img"}
          />
        }
        suffixIcon={
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg__jmzwR)}
            role={"img"}
          />
        }
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "minInput", "maxInput"],
  minInput: ["minInput"],
  maxInput: ["maxInput"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  minInput: typeof Textbox;
  maxInput: typeof Textbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScreenVariantSpec__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicScreenVariantSpec__VariantsArgs;
  args?: PlasmicScreenVariantSpec__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicScreenVariantSpec__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicScreenVariantSpec__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicScreenVariantSpec__ArgProps,
          internalVariantPropNames: PlasmicScreenVariantSpec__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicScreenVariantSpec__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScreenVariantSpec";
  } else {
    func.displayName = `PlasmicScreenVariantSpec.${nodeName}`;
  }
  return func;
}

export const PlasmicScreenVariantSpec = Object.assign(
  // Top-level PlasmicScreenVariantSpec renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    minInput: makeNodeComponent("minInput"),
    maxInput: makeNodeComponent("maxInput"),

    // Metadata about props expected for PlasmicScreenVariantSpec
    internalVariantProps: PlasmicScreenVariantSpec__VariantProps,
    internalArgProps: PlasmicScreenVariantSpec__ArgProps,
  }
);

export default PlasmicScreenVariantSpec;
/* prettier-ignore-end */
