// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: o_qToCGjTR
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicVariantChip.module.css"; // plasmic-import: o_qToCGjTR/css

import Recording2Icon from "../plasmic_kit/PlasmicIcon__Recording2"; // plasmic-import: S1b6HroavEOOP/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon

export type PlasmicVariantChip__VariantMembers = {
  isRecording: "isRecording";
  isClosable: "isClosable";
  hasIcon: "hasIcon";
};

export type PlasmicVariantChip__VariantsArgs = {
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  isClosable?: SingleBooleanChoiceArg<"isClosable">;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
};

type VariantPropType = keyof PlasmicVariantChip__VariantsArgs;
export const PlasmicVariantChip__VariantProps = new Array<VariantPropType>(
  "isRecording",
  "isClosable",
  "hasIcon"
);

export type PlasmicVariantChip__ArgsType = {
  icon?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVariantChip__ArgsType;
export const PlasmicVariantChip__ArgProps = new Array<ArgPropType>(
  "icon",
  "children"
);

export type PlasmicVariantChip__OverridesType = {
  root?: p.Flex<"div">;
  iconContainer?: p.Flex<"div">;
  closeButton?: p.Flex<typeof IconButton>;
};

export interface DefaultVariantChipProps {
  icon?: React.ReactNode;
  children?: React.ReactNode;
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  isClosable?: SingleBooleanChoiceArg<"isClosable">;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicVariantChip__RenderFunc(props: {
  variants: PlasmicVariantChip__VariantsArgs;
  args: PlasmicVariantChip__ArgsType;
  overrides: PlasmicVariantChip__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isRecording",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.isRecording
          : undefined,
      },

      {
        path: "isClosable",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.isClosable
          : undefined,
      },

      {
        path: "hasIcon",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.hasIcon : undefined,
      },
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasIcon]: hasVariant($state, "hasIcon", "hasIcon"),
          [sty.roothasIcon_isClosable]:
            hasVariant($state, "isClosable", "isClosable") &&
            hasVariant($state, "hasIcon", "hasIcon"),
          [sty.rootisClosable]: hasVariant($state, "isClosable", "isClosable"),
          [sty.rootisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        }
      )}
    >
      {(hasVariant($state, "hasIcon", "hasIcon") ? true : false) ? (
        <div
          data-plasmic-name={"iconContainer"}
          data-plasmic-override={overrides.iconContainer}
          className={classNames(projectcss.all, sty.iconContainer, {
            [sty.iconContainerhasIcon]: hasVariant(
              $state,
              "hasIcon",
              "hasIcon"
            ),

            [sty.iconContainerisRecording]: hasVariant(
              $state,
              "isRecording",
              "isRecording"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Recording2Icon
                className={classNames(projectcss.all, sty.svg__fsk9Z)}
                role={"img"}
              />
            ),

            value: args.icon,
            className: classNames(sty.slotTargetIcon, {
              [sty.slotTargetIconhasIcon]: hasVariant(
                $state,
                "hasIcon",
                "hasIcon"
              ),

              [sty.slotTargetIconisRecording]: hasVariant(
                $state,
                "isRecording",
                "isRecording"
              ),
            }),
          })}
        </div>
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: "variant",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenhasIcon]: hasVariant(
            $state,
            "hasIcon",
            "hasIcon"
          ),

          [sty.slotTargetChildrenisClosable]: hasVariant(
            $state,
            "isClosable",
            "isClosable"
          ),

          [sty.slotTargetChildrenisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        }),
      })}

      {(hasVariant($state, "isClosable", "isClosable") ? true : false) ? (
        <IconButton
          data-plasmic-name={"closeButton"}
          data-plasmic-override={overrides.closeButton}
          children2={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg__bh0DP, {
                [sty.svgisRecording__bh0DPkPSd6]: hasVariant(
                  $state,
                  "isRecording",
                  "isRecording"
                ),
              })}
              role={"img"}
            />
          }
          className={classNames("__wab_instance", sty.closeButton, {
            [sty.closeButtonisClosable]: hasVariant(
              $state,
              "isClosable",
              "isClosable"
            ),

            [sty.closeButtonisRecording]: hasVariant(
              $state,
              "isRecording",
              "isRecording"
            ),
          })}
          type={["seamless"]}
        >
          <ClosesvgIcon
            className={classNames(projectcss.all, sty.svg___39El, {
              [sty.svgisClosable___39ElEvXrK]: hasVariant(
                $state,
                "isClosable",
                "isClosable"
              ),

              [sty.svgisRecording___39ElKPSd6]: hasVariant(
                $state,
                "isRecording",
                "isRecording"
              ),
            })}
            role={"img"}
          />
        </IconButton>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "iconContainer", "closeButton"],
  iconContainer: ["iconContainer"],
  closeButton: ["closeButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  iconContainer: "div";
  closeButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantChip__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicVariantChip__VariantsArgs;
  args?: PlasmicVariantChip__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicVariantChip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicVariantChip__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVariantChip__ArgProps,
          internalVariantPropNames: PlasmicVariantChip__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicVariantChip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantChip";
  } else {
    func.displayName = `PlasmicVariantChip.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantChip = Object.assign(
  // Top-level PlasmicVariantChip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconContainer: makeNodeComponent("iconContainer"),
    closeButton: makeNodeComponent("closeButton"),

    // Metadata about props expected for PlasmicVariantChip
    internalVariantProps: PlasmicVariantChip__VariantProps,
    internalArgProps: PlasmicVariantChip__ArgProps,
  }
);

export default PlasmicVariantChip;
/* prettier-ignore-end */
