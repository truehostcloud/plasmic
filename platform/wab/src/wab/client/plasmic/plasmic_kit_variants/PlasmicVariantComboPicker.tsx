// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: bjN-Q1X6w8
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import VariantChip from "../../components/variants/VariantChip"; // plasmic-import: o_qToCGjTR/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicVariantComboPicker.module.css"; // plasmic-import: bjN-Q1X6w8/css

import Recording2Icon from "../plasmic_kit/PlasmicIcon__Recording2"; // plasmic-import: S1b6HroavEOOP/icon
import TriangleBottomIcon from "../plasmic_kit/PlasmicIcon__TriangleBottom"; // plasmic-import: A8NQUZ7Lg1OHO/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

export type PlasmicVariantComboPicker__VariantMembers = {};

export type PlasmicVariantComboPicker__VariantsArgs = {};
type VariantPropType = keyof PlasmicVariantComboPicker__VariantsArgs;
export const PlasmicVariantComboPicker__VariantProps =
  new Array<VariantPropType>();

export type PlasmicVariantComboPicker__ArgsType = {
  selecteds?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVariantComboPicker__ArgsType;
export const PlasmicVariantComboPicker__ArgProps = new Array<ArgPropType>(
  "selecteds"
);

export type PlasmicVariantComboPicker__OverridesType = {
  root?: p.Flex<"div">;
  comboWrapper?: p.Flex<"div">;
  textInput?: p.Flex<"input">;
  toggleButton?: p.Flex<typeof IconButton>;
  textbox?: p.Flex<"input">;
};

export interface DefaultVariantComboPickerProps {
  selecteds?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicVariantComboPicker__RenderFunc(props: {
  variants: PlasmicVariantComboPicker__VariantsArgs;
  args: PlasmicVariantComboPicker__ArgsType;
  overrides: PlasmicVariantComboPicker__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <VariantChip
              className={classNames("__wab_instance", sty.variantChip__eldaJ)}
              icon={
                <Recording2Icon
                  className={classNames(projectcss.all, sty.svg__sb2Eh)}
                  role={"img"}
                />
              }
              isClosable={true}
            />

            <VariantChip
              className={classNames("__wab_instance", sty.variantChip___7CmEv)}
              icon={
                <Recording2Icon
                  className={classNames(projectcss.all, sty.svg__gf4Dv)}
                  role={"img"}
                />
              }
              isClosable={true}
            />
          </React.Fragment>
        ),

        value: args.selecteds,
      })}

      <div
        data-plasmic-name={"comboWrapper"}
        data-plasmic-override={overrides.comboWrapper}
        className={classNames(projectcss.all, sty.comboWrapper)}
      >
        <input
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput ?? overrides.textbox}
          className={classNames(
            projectcss.all,
            projectcss.input,
            sty.textInput
          )}
          placeholder={"Some placeholder" as const}
          size={1 as const}
          type={"text" as const}
          value={"Some value" as const}
        />

        <IconButton
          data-plasmic-name={"toggleButton"}
          data-plasmic-override={overrides.toggleButton}
          children2={
            <ChevronDownsvgIcon
              className={classNames(projectcss.all, sty.svg___1Z4Bg)}
              role={"img"}
            />
          }
          className={classNames("__wab_instance", sty.toggleButton)}
          type={["seamless"]}
        >
          <TriangleBottomIcon
            className={classNames(projectcss.all, sty.svg___6M0Se)}
            role={"img"}
          />
        </IconButton>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "comboWrapper", "textInput", "textbox", "toggleButton"],
  comboWrapper: ["comboWrapper", "textInput", "textbox", "toggleButton"],
  textInput: ["textInput", "textbox"],
  toggleButton: ["toggleButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  comboWrapper: "div";
  textInput: "input";
  toggleButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantComboPicker__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicVariantComboPicker__VariantsArgs;
  args?: PlasmicVariantComboPicker__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicVariantComboPicker__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicVariantComboPicker__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVariantComboPicker__ArgProps,
          internalVariantPropNames: PlasmicVariantComboPicker__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicVariantComboPicker__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantComboPicker";
  } else {
    func.displayName = `PlasmicVariantComboPicker.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantComboPicker = Object.assign(
  // Top-level PlasmicVariantComboPicker renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    comboWrapper: makeNodeComponent("comboWrapper"),
    textInput: makeNodeComponent("textInput"),
    toggleButton: makeNodeComponent("toggleButton"),

    // Metadata about props expected for PlasmicVariantComboPicker
    internalVariantProps: PlasmicVariantComboPicker__VariantProps,
    internalArgProps: PlasmicVariantComboPicker__ArgProps,
  }
);

export default PlasmicVariantComboPicker;
/* prettier-ignore-end */
