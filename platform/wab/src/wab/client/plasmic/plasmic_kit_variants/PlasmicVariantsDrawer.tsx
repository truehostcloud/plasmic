// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: Bj_efGpKWL
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import VariantsDrawerHeader from "../../components/variants/VariantsDrawerHeader"; // plasmic-import: wv3xEE20Zw/component
import VariantsDrawerRow from "../../components/variants/VariantsDrawerRow"; // plasmic-import: f-9OgqRi3D/component
import Chip from "../../components/widgets/Chip"; // plasmic-import: jW885tExwE/component
import Searchbox from "../../components/widgets/Searchbox"; // plasmic-import: po7gr0PX4_gWo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicVariantsDrawer.module.css"; // plasmic-import: Bj_efGpKWL/css

import GlobeIcon from "../plasmic_kit/PlasmicIcon__Globe"; // plasmic-import: fwZgbP_d3EbnX/icon
import VariantGroupIcon from "../plasmic_kit/PlasmicIcon__VariantGroup"; // plasmic-import: pyS6pK4Spx-QF/icon
import BoltsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__BoltSvg"; // plasmic-import: IRA31HnIa/icon

export type PlasmicVariantsDrawer__VariantMembers = {};

export type PlasmicVariantsDrawer__VariantsArgs = {};
type VariantPropType = keyof PlasmicVariantsDrawer__VariantsArgs;
export const PlasmicVariantsDrawer__VariantProps = new Array<VariantPropType>();

export type PlasmicVariantsDrawer__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVariantsDrawer__ArgsType;
export const PlasmicVariantsDrawer__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicVariantsDrawer__OverridesType = {
  root?: p.Flex<"div">;
  searchContainer?: p.Flex<"div">;
  searchbox?: p.Flex<typeof Searchbox>;
  listSectionSeparator?: p.Flex<typeof ListSectionSeparator>;
  optionsContainer?: p.Flex<"div">;
};

export interface DefaultVariantsDrawerProps {
  children?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicVariantsDrawer__RenderFunc(props: {
  variants: PlasmicVariantsDrawer__VariantsArgs;
  args: PlasmicVariantsDrawer__ArgsType;
  overrides: PlasmicVariantsDrawer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"searchContainer"}
        data-plasmic-override={overrides.searchContainer}
        className={classNames(projectcss.all, sty.searchContainer)}
      >
        <Searchbox
          data-plasmic-name={"searchbox"}
          data-plasmic-override={overrides.searchbox}
          className={classNames("__wab_instance", sty.searchbox)}
        />
      </div>

      <ListSectionSeparator
        data-plasmic-name={"listSectionSeparator"}
        data-plasmic-override={overrides.listSectionSeparator}
        className={classNames("__wab_instance", sty.listSectionSeparator)}
      />

      <div
        data-plasmic-name={"optionsContainer"}
        data-plasmic-override={overrides.optionsContainer}
        className={classNames(projectcss.all, sty.optionsContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <VariantsDrawerHeader
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerHeader__fnUYy
                )}
                icon={
                  <BoltsvgIcon
                    className={classNames(projectcss.all, sty.svg__yRqB0)}
                    role={"img"}
                  />
                }
              >
                {"Component Interactions"}
              </VariantsDrawerHeader>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__plCyh
                )}
              >
                <Chip className={classNames("__wab_instance", sty.chip__eIf0U)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oAo54
                    )}
                  >
                    {"Hover"}
                  </div>
                </Chip>
              </VariantsDrawerRow>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__mWp9V
                )}
              >
                <Chip
                  className={classNames("__wab_instance", sty.chip___8DiSy)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vbNlt
                    )}
                  >
                    {"Focused"}
                  </div>
                </Chip>

                <Chip className={classNames("__wab_instance", sty.chip__kxs94)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lriZw
                    )}
                  >
                    {"Not Hovered"}
                  </div>
                </Chip>
              </VariantsDrawerRow>

              <VariantsDrawerHeader
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerHeader__o6UgS
                )}
                icon={
                  <BoltsvgIcon
                    className={classNames(projectcss.all, sty.svg__n0Yir)}
                    role={"img"}
                  />
                }
              >
                {"Element States"}
              </VariantsDrawerHeader>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__c9JnG
                )}
              >
                <Chip
                  className={classNames("__wab_instance", sty.chip___8YqyH)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h6WO
                    )}
                  >
                    {"Placeholder"}
                  </div>
                </Chip>
              </VariantsDrawerRow>

              <VariantsDrawerHeader
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerHeader___5CPmz
                )}
                icon={
                  <VariantGroupIcon
                    className={classNames(projectcss.all, sty.svg__sUh4Q)}
                    role={"img"}
                  />
                }
              >
                {"Type"}
              </VariantsDrawerHeader>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__wa5Yz
                )}
                pinState={"selected" as const}
              >
                {"Primary"}
              </VariantsDrawerRow>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__zfCso
                )}
              >
                {"Secondary"}
              </VariantsDrawerRow>

              <VariantsDrawerHeader
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerHeader__wbnj
                )}
                icon={
                  <VariantGroupIcon
                    className={classNames(projectcss.all, sty.svg__eUxb5)}
                    role={"img"}
                  />
                }
              >
                {"Size"}
              </VariantsDrawerHeader>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__nOmU
                )}
                isIndicated={true}
              >
                {"Large"}
              </VariantsDrawerRow>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__cOttf
                )}
              >
                {"Small"}
              </VariantsDrawerRow>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow___6HF3S
                )}
                isStandalone={true}
              >
                {"Standalone one"}
              </VariantsDrawerRow>

              <VariantsDrawerHeader
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerHeader__eKocj
                )}
                icon={
                  <GlobeIcon
                    className={classNames(projectcss.all, sty.svg__igNj)}
                    role={"img"}
                  />
                }
              >
                {"Theme"}
              </VariantsDrawerHeader>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__gt0Ax
                )}
              >
                {"Dark"}
              </VariantsDrawerRow>

              <VariantsDrawerHeader
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerHeader__pfVq
                )}
                icon={
                  <VariantGroupIcon
                    className={classNames(projectcss.all, sty.svg__f04F)}
                    role={"img"}
                  />
                }
              >
                {"Combinations"}
              </VariantsDrawerHeader>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__fEVx
                )}
              >
                <Chip className={classNames("__wab_instance", sty.chip__eIKbh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s8FcK
                    )}
                  >
                    {"Primary"}
                  </div>
                </Chip>

                <Chip className={classNames("__wab_instance", sty.chip__xC5Ln)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ovQmf
                    )}
                  >
                    {"Hover"}
                  </div>
                </Chip>
              </VariantsDrawerRow>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__tK0Vp
                )}
              >
                <Chip className={classNames("__wab_instance", sty.chip__vMcSp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2WvC0
                    )}
                  >
                    {"Primary"}
                  </div>
                </Chip>

                <Chip className={classNames("__wab_instance", sty.chip__zzVf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hHXh2
                    )}
                  >
                    {"Large"}
                  </div>
                </Chip>
              </VariantsDrawerRow>

              <VariantsDrawerRow
                className={classNames(
                  "__wab_instance",
                  sty.variantsDrawerRow__cKnZ
                )}
              >
                <Chip className={classNames("__wab_instance", sty.chip__odrXn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__op9R5
                    )}
                  >
                    {"Dark"}
                  </div>
                </Chip>

                <Chip
                  className={classNames("__wab_instance", sty.chip___0EnEc)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dZbVh
                    )}
                  >
                    {"Hover"}
                  </div>
                </Chip>
              </VariantsDrawerRow>
            </React.Fragment>
          ),

          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "searchContainer",
    "searchbox",
    "listSectionSeparator",
    "optionsContainer",
  ],

  searchContainer: ["searchContainer", "searchbox"],
  searchbox: ["searchbox"],
  listSectionSeparator: ["listSectionSeparator"],
  optionsContainer: ["optionsContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  searchContainer: "div";
  searchbox: typeof Searchbox;
  listSectionSeparator: typeof ListSectionSeparator;
  optionsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantsDrawer__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicVariantsDrawer__VariantsArgs;
  args?: PlasmicVariantsDrawer__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicVariantsDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicVariantsDrawer__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVariantsDrawer__ArgProps,
          internalVariantPropNames: PlasmicVariantsDrawer__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicVariantsDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantsDrawer";
  } else {
    func.displayName = `PlasmicVariantsDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantsDrawer = Object.assign(
  // Top-level PlasmicVariantsDrawer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchContainer: makeNodeComponent("searchContainer"),
    searchbox: makeNodeComponent("searchbox"),
    listSectionSeparator: makeNodeComponent("listSectionSeparator"),
    optionsContainer: makeNodeComponent("optionsContainer"),

    // Metadata about props expected for PlasmicVariantsDrawer
    internalVariantProps: PlasmicVariantsDrawer__VariantProps,
    internalArgProps: PlasmicVariantsDrawer__ArgProps,
  }
);

export default PlasmicVariantsDrawer;
/* prettier-ignore-end */
