// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: bIuup7JdBZ
import * as React from "react";

import * as ph from "@plasmicapp/host";
import * as p from "@plasmicapp/react-web";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";
import ListSectionHeader from "../../components/ListSectionHeader"; // plasmic-import: wNvxk7eOak/component
import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import TextWithInfo from "../../components/TextWithInfo"; // plasmic-import: -EsDm7v023/component
import VariantComboRow from "../../components/variants/VariantComboRow"; // plasmic-import: FskUdXzKp5L/component
import VariantCombosSection from "../../components/variants/VariantCombosSection"; // plasmic-import: W8tzkAR80P/component
import VariantRow from "../../components/variants/VariantRow"; // plasmic-import: ZAqVPmZmi-/component
import VariantSection from "../../components/variants/VariantSection"; // plasmic-import: PDpx0GMKsd/component
import ActionMenuButton from "../../components/widgets/ActionMenuButton"; // plasmic-import: VNi6NC2QOI/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Chip from "../../components/widgets/Chip"; // plasmic-import: jW885tExwE/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicVariantsPanel.module.css"; // plasmic-import: bIuup7JdBZ/css

import BoltIcon from "../plasmic_kit/PlasmicIcon__Bolt"; // plasmic-import: U5J4vI5vbfdiF/icon
import GlobeIcon from "../plasmic_kit/PlasmicIcon__Globe"; // plasmic-import: fwZgbP_d3EbnX/icon
import VariantGroupIcon from "../plasmic_kit/PlasmicIcon__VariantGroup"; // plasmic-import: pyS6pK4Spx-QF/icon
import VariantIcon from "../plasmic_kit_design_system/PlasmicIcon__Variant"; // plasmic-import: WBXMPcPdoM/icon
import ChevronDownsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import DevicessvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__DevicesSvg"; // plasmic-import: bbAxEiIwy/icon
import PlussvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import VariantsvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__VariantSvg"; // plasmic-import: mSYwardqQ/icon

export type PlasmicVariantsPanel__VariantMembers = {
  expandGlobals: "expandGlobals";
  showCombos: "showCombos";
  showStyleVariants: "showStyleVariants";
  hasVariants: "hasVariants";
  hasSuperComponents: "hasSuperComponents";
};

export type PlasmicVariantsPanel__VariantsArgs = {
  expandGlobals?: SingleBooleanChoiceArg<"expandGlobals">;
  showCombos?: SingleBooleanChoiceArg<"showCombos">;
  showStyleVariants?: SingleBooleanChoiceArg<"showStyleVariants">;
  hasVariants?: SingleBooleanChoiceArg<"hasVariants">;
  hasSuperComponents?: SingleBooleanChoiceArg<"hasSuperComponents">;
};

type VariantPropType = keyof PlasmicVariantsPanel__VariantsArgs;
export const PlasmicVariantsPanel__VariantProps = new Array<VariantPropType>(
  "expandGlobals",
  "showCombos",
  "showStyleVariants",
  "hasVariants",
  "hasSuperComponents"
);

export type PlasmicVariantsPanel__ArgsType = {
  variantGroups?: React.ReactNode;
  globalVariantGroups?: React.ReactNode;
  screenVariantGroups?: React.ReactNode;
  superComponents?: React.ReactNode;
  variantsHeaderLabel?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVariantsPanel__ArgsType;
export const PlasmicVariantsPanel__ArgProps = new Array<ArgPropType>(
  "variantGroups",
  "globalVariantGroups",
  "screenVariantGroups",
  "superComponents",
  "variantsHeaderLabel"
);

export type PlasmicVariantsPanel__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  variantsInfo?: p.Flex<typeof TextWithInfo>;
  addVariantGroupButton?: p.Flex<typeof ActionMenuButton>;
  body?: p.Flex<"div">;
  baseVariantRow?: p.Flex<typeof VariantRow>;
  variantGroupsContainer?: p.Flex<"div">;
  styleVariantsSection?: p.Flex<typeof VariantSection>;
  interactionVariantsInfo?: p.Flex<typeof TextWithInfo>;
  textNode?: p.Flex<"div">;
  superComponentsContainer?: p.Flex<"div">;
  globalVariantsHeader?: p.Flex<typeof ListSectionHeader>;
  globalVariantsInfo?: p.Flex<typeof TextWithInfo>;
  addGlobalVariantGroupButton?: p.Flex<typeof Button>;
  globalVariantsContainer?: p.Flex<"div">;
  screenVariantsContainer?: p.Flex<"div">;
  variantCombosSection?: p.Flex<typeof VariantCombosSection>;
  textNode33?: p.Flex<"div">;
  textNode2334?: p.Flex<"div">;
  textNode23332?: p.Flex<"div">;
  textNode332?: p.Flex<"div">;
  textNode23342?: p.Flex<"div">;
  textNode233322?: p.Flex<"div">;
  textNode333?: p.Flex<"div">;
  textNode23343?: p.Flex<"div">;
  textNode233323?: p.Flex<"div">;
  textNode3323?: p.Flex<"div">;
  textNode233423?: p.Flex<"div">;
  textNode2333223?: p.Flex<"div">;
  textNode33222?: p.Flex<"div">;
  textNode2334222?: p.Flex<"div">;
  textNode23332222?: p.Flex<"div">;
};

export interface DefaultVariantsPanelProps {
  variantGroups?: React.ReactNode;
  globalVariantGroups?: React.ReactNode;
  screenVariantGroups?: React.ReactNode;
  superComponents?: React.ReactNode;
  variantsHeaderLabel?: React.ReactNode;
  expandGlobals?: SingleBooleanChoiceArg<"expandGlobals">;
  showCombos?: SingleBooleanChoiceArg<"showCombos">;
  showStyleVariants?: SingleBooleanChoiceArg<"showStyleVariants">;
  hasVariants?: SingleBooleanChoiceArg<"hasVariants">;
  hasSuperComponents?: SingleBooleanChoiceArg<"hasSuperComponents">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicVariantsPanel__RenderFunc(props: {
  variants: PlasmicVariantsPanel__VariantsArgs;
  args: PlasmicVariantsPanel__ArgsType;
  overrides: PlasmicVariantsPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "expandGlobals",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.expandGlobals
          : undefined,
      },

      {
        path: "showCombos",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.showCombos
          : undefined,
      },

      {
        path: "showStyleVariants",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.showStyleVariants
          : undefined,
      },

      {
        path: "hasVariants",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.hasVariants
          : undefined,
      },

      {
        path: "hasSuperComponents",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.hasSuperComponents
          : undefined,
      },
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(projectcss.all, sty.header)}
      >
        <TextWithInfo
          data-plasmic-name={"variantsInfo"}
          data-plasmic-override={overrides.variantsInfo}
          className={classNames("__wab_instance", sty.variantsInfo, {
            [sty.variantsInfoexpandGlobals]: hasVariant(
              $state,
              "expandGlobals",
              "expandGlobals"
            ),
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Variants",
            value: args.variantsHeaderLabel,
            className: classNames(sty.slotTargetVariantsHeaderLabel),
          })}
        </TextWithInfo>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___0RqzC)}
        >
          <ActionMenuButton
            data-plasmic-name={"addVariantGroupButton"}
            data-plasmic-override={overrides.addVariantGroupButton}
            icon={
              <PlussvgIcon
                className={classNames(projectcss.all, sty.svg__t9Vj4, {
                  [sty.svgexpandGlobals__t9Vj438L85]: hasVariant(
                    $state,
                    "expandGlobals",
                    "expandGlobals"
                  ),
                })}
                role={"img"}
              />
            }
          >
            {"New variant"}
          </ActionMenuButton>
        </p.Stack>
      </div>

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body, {
          [sty.bodyhasVariants]: hasVariant(
            $state,
            "hasVariants",
            "hasVariants"
          ),

          [sty.bodyshowCombos]: hasVariant($state, "showCombos", "showCombos"),
        })}
      >
        <VariantRow
          data-plasmic-name={"baseVariantRow"}
          data-plasmic-override={overrides.baseVariantRow}
          className={classNames("__wab_instance", sty.baseVariantRow, {
            [sty.baseVariantRowhasVariants]: hasVariant(
              $state,
              "hasVariants",
              "hasVariants"
            ),
          })}
          icon={
            <VariantIcon
              className={classNames(projectcss.all, sty.svg__vDqMf, {
                [sty.svgexpandGlobals__vDqMf38L85]: hasVariant(
                  $state,
                  "expandGlobals",
                  "expandGlobals"
                ),

                [sty.svghasVariants__vDqMfK0LRe]: hasVariant(
                  $state,
                  "hasVariants",
                  "hasVariants"
                ),
              })}
              role={"img"}
            />
          }
          isIndicated={true}
          type={"baseVariant" as const}
        >
          {"Base"}
        </VariantRow>

        {(
          hasVariant($state, "showStyleVariants", "showStyleVariants") &&
          hasVariant($state, "hasVariants", "hasVariants")
            ? true
            : hasVariant($state, "hasVariants", "hasVariants")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__kck9E, {
              [sty.freeBoxexpandGlobals__kck9E38L85]: hasVariant(
                $state,
                "expandGlobals",
                "expandGlobals"
              ),

              [sty.freeBoxhasVariants__kck9Ek0LRe]: hasVariant(
                $state,
                "hasVariants",
                "hasVariants"
              ),

              [sty.freeBoxshowStyleVariants__kck9E1Vz9W]: hasVariant(
                $state,
                "showStyleVariants",
                "showStyleVariants"
              ),

              [sty.freeBoxshowStyleVariants_hasVariants__kck9E1Vz9WK0LRe]:
                hasVariant($state, "showStyleVariants", "showStyleVariants") &&
                hasVariant($state, "hasVariants", "hasVariants"),
            })}
          >
            <ListSectionSeparator
              className={classNames(
                "__wab_instance",
                sty.listSectionSeparator__apLyr,
                {
                  [sty.listSectionSeparatorexpandGlobals__apLyr38L85]:
                    hasVariant($state, "expandGlobals", "expandGlobals"),
                  [sty.listSectionSeparatorhasVariants__apLyrK0LRe]: hasVariant(
                    $state,
                    "hasVariants",
                    "hasVariants"
                  ),
                }
              )}
            />
          </div>
        ) : null}
        {(hasVariant($state, "hasVariants", "hasVariants") ? true : false) ? (
          <div
            data-plasmic-name={"variantGroupsContainer"}
            data-plasmic-override={overrides.variantGroupsContainer}
            className={classNames(projectcss.all, sty.variantGroupsContainer, {
              [sty.variantGroupsContainerhasVariants]: hasVariant(
                $state,
                "hasVariants",
                "hasVariants"
              ),
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <VariantSection
                    icon={
                      <VariantGroupIcon
                        className={classNames(projectcss.all, sty.svg___7Vmxi)}
                        role={"img"}
                      />
                    }
                    title={"Color"}
                  >
                    <VariantRow
                      className={classNames(
                        "__wab_instance",
                        sty.variantRow__uy09L
                      )}
                      icon={
                        true ? (
                          <VariantIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wBei9
                            )}
                            role={"img"}
                          />
                        ) : null
                      }
                      pinState={"selected" as const}
                    >
                      {"Primary"}
                    </VariantRow>

                    <VariantRow
                      className={classNames(
                        "__wab_instance",
                        sty.variantRow__s1HUb
                      )}
                      icon={
                        <VariantIcon
                          className={classNames(projectcss.all, sty.svg__xbOwl)}
                          role={"img"}
                        />
                      }
                    >
                      {"Secondary"}
                    </VariantRow>

                    <VariantRow
                      className={classNames(
                        "__wab_instance",
                        sty.variantRow___90Dj
                      )}
                      icon={
                        <VariantIcon
                          className={classNames(projectcss.all, sty.svg__eKanl)}
                          role={"img"}
                        />
                      }
                    >
                      {"Danger"}
                    </VariantRow>
                  </VariantSection>

                  <VariantSection
                    className={classNames(
                      "__wab_instance",
                      sty.variantSection__l0Rdh
                    )}
                    icon={
                      <VariantGroupIcon
                        className={classNames(projectcss.all, sty.svg__xakzW)}
                        role={"img"}
                      />
                    }
                    title={"Type"}
                  >
                    <VariantRow
                      className={classNames(
                        "__wab_instance",
                        sty.variantRow___3Xqu
                      )}
                      icon={
                        <VariantIcon
                          className={classNames(projectcss.all, sty.svg__qIst9)}
                          role={"img"}
                        />
                      }
                      isIndicated={true}
                    >
                      {"Filled"}
                    </VariantRow>

                    <VariantRow
                      className={classNames(
                        "__wab_instance",
                        sty.variantRow__wVOoa
                      )}
                      icon={
                        <VariantIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8379Y
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Ghost"}
                    </VariantRow>

                    <VariantRow
                      className={classNames(
                        "__wab_instance",
                        sty.variantRow__aTKim
                      )}
                      icon={
                        <VariantIcon
                          className={classNames(projectcss.all, sty.svg__wMb3O)}
                          role={"img"}
                        />
                      }
                    >
                      {"Bordered"}
                    </VariantRow>
                  </VariantSection>

                  <VariantRow
                    className={classNames(
                      "__wab_instance",
                      sty.variantRow___2Ht97
                    )}
                    icon={
                      <VariantIcon
                        className={classNames(projectcss.all, sty.svg__dU8Ug)}
                        role={"img"}
                      />
                    }
                    type={"toggle" as const}
                  >
                    {"Something"}
                  </VariantRow>
                </React.Fragment>
              ),

              value: args.variantGroups,
            })}
          </div>
        ) : null}
        {(
          hasVariant($state, "showStyleVariants", "showStyleVariants") &&
          hasVariant($state, "hasVariants", "hasVariants")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__xxIw2, {
              [sty.freeBoxexpandGlobals__xxIw238L85]: hasVariant(
                $state,
                "expandGlobals",
                "expandGlobals"
              ),

              [sty.freeBoxhasVariants__xxIw2K0LRe]: hasVariant(
                $state,
                "hasVariants",
                "hasVariants"
              ),

              [sty.freeBoxshowStyleVariants__xxIw21Vz9W]: hasVariant(
                $state,
                "showStyleVariants",
                "showStyleVariants"
              ),

              [sty.freeBoxshowStyleVariants_hasVariants__xxIw21Vz9WK0LRe]:
                hasVariant($state, "showStyleVariants", "showStyleVariants") &&
                hasVariant($state, "hasVariants", "hasVariants"),
            })}
          >
            <ListSectionSeparator
              className={classNames(
                "__wab_instance",
                sty.listSectionSeparator__a9XQq,
                {
                  [sty.listSectionSeparatorexpandGlobals__a9XQq38L85]:
                    hasVariant($state, "expandGlobals", "expandGlobals"),
                }
              )}
            />
          </div>
        ) : null}
        {(
          hasVariant($state, "showStyleVariants", "showStyleVariants")
            ? true
            : false
        ) ? (
          <VariantSection
            data-plasmic-name={"styleVariantsSection"}
            data-plasmic-override={overrides.styleVariantsSection}
            className={classNames("__wab_instance", sty.styleVariantsSection, {
              [sty.styleVariantsSectionexpandGlobals]: hasVariant(
                $state,
                "expandGlobals",
                "expandGlobals"
              ),

              [sty.styleVariantsSectionshowStyleVariants]: hasVariant(
                $state,
                "showStyleVariants",
                "showStyleVariants"
              ),
            })}
            emptyAddButtonText={"Add option"}
            icon={
              <BoltIcon
                className={classNames(projectcss.all, sty.svg__v6UCg, {
                  [sty.svgshowStyleVariants__v6UCg1Vz9W]: hasVariant(
                    $state,
                    "showStyleVariants",
                    "showStyleVariants"
                  ),
                })}
                role={"img"}
              />
            }
            showIcon={true}
            title={
              <TextWithInfo
                data-plasmic-name={"interactionVariantsInfo"}
                data-plasmic-override={overrides.interactionVariantsInfo}
                className={classNames(
                  "__wab_instance",
                  sty.interactionVariantsInfo
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ofdug
                  )}
                >
                  {"Interaction Variants"}
                </div>
              </TextWithInfo>
            }
          >
            <VariantRow
              className={classNames("__wab_instance", sty.variantRow__qIYpt, {
                [sty.variantRowexpandGlobals__qIYpt38L85]: hasVariant(
                  $state,
                  "expandGlobals",
                  "expandGlobals"
                ),

                [sty.variantRowshowCombos__qIYptYjQRl]: hasVariant(
                  $state,
                  "showCombos",
                  "showCombos"
                ),
              })}
              icon={
                <VariantIcon
                  className={classNames(projectcss.all, sty.svg__bpkc6)}
                  role={"img"}
                />
              }
              pinState={"selected" as const}
            >
              <Chip className={classNames("__wab_instance", sty.chip__xvOz2)}>
                <div
                  data-plasmic-name={"textNode"}
                  data-plasmic-override={overrides.textNode}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.textNode
                  )}
                >
                  {"Hover"}
                </div>
              </Chip>
            </VariantRow>

            <VariantRow
              className={classNames("__wab_instance", sty.variantRow__b824B)}
              icon={
                <VariantIcon
                  className={classNames(projectcss.all, sty.svg__u1SW)}
                  role={"img"}
                />
              }
            >
              <Chip className={classNames("__wab_instance", sty.chip__taW9V)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4B0XF
                  )}
                >
                  {"Hover"}
                </div>
              </Chip>

              <Chip className={classNames("__wab_instance", sty.chip__iqLwE)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qzoOm
                  )}
                >
                  {"Focused Within"}
                </div>
              </Chip>
            </VariantRow>
          </VariantSection>
        ) : null}
        {(
          hasVariant($state, "hasSuperComponents", "hasSuperComponents") &&
          hasVariant($state, "hasVariants", "hasVariants")
            ? true
            : hasVariant($state, "hasSuperComponents", "hasSuperComponents")
            ? false
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___8UyUc, {
              [sty.freeBoxhasSuperComponents___8UyUcBMzdJ]: hasVariant(
                $state,
                "hasSuperComponents",
                "hasSuperComponents"
              ),

              [sty.freeBoxhasSuperComponents_hasVariants___8UyUcBMzdJK0LRe]:
                hasVariant(
                  $state,
                  "hasSuperComponents",
                  "hasSuperComponents"
                ) && hasVariant($state, "hasVariants", "hasVariants"),
              [sty.freeBoxhasVariants___8UyUcK0LRe]: hasVariant(
                $state,
                "hasVariants",
                "hasVariants"
              ),

              [sty.freeBoxshowStyleVariants___8UyUc1Vz9W]: hasVariant(
                $state,
                "showStyleVariants",
                "showStyleVariants"
              ),
            })}
          >
            <ListSectionSeparator />
          </div>
        ) : null}
        {(
          hasVariant($state, "hasSuperComponents", "hasSuperComponents")
            ? true
            : false
        ) ? (
          <div
            data-plasmic-name={"superComponentsContainer"}
            data-plasmic-override={overrides.superComponentsContainer}
            className={classNames(
              projectcss.all,
              sty.superComponentsContainer,
              {
                [sty.superComponentsContainerhasSuperComponents]: hasVariant(
                  $state,
                  "hasSuperComponents",
                  "hasSuperComponents"
                ),
              }
            )}
          >
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.superComponents,
            })}
          </div>
        ) : null}
      </div>

      {(hasVariant($state, "showCombos", "showCombos") ? true : true) ? (
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__xaim1,
            {
              [sty.listSectionSeparatorexpandGlobals__xaim138L85]: hasVariant(
                $state,
                "expandGlobals",
                "expandGlobals"
              ),

              [sty.listSectionSeparatorshowCombos__xaim1YjQRl]: hasVariant(
                $state,
                "showCombos",
                "showCombos"
              ),
            }
          )}
        />
      ) : null}

      <ListSectionHeader
        data-plasmic-name={"globalVariantsHeader"}
        data-plasmic-override={overrides.globalVariantsHeader}
        actions={
          <Button
            data-plasmic-name={"addGlobalVariantGroupButton"}
            data-plasmic-override={overrides.addGlobalVariantGroupButton}
            className={classNames(
              "__wab_instance",
              sty.addGlobalVariantGroupButton,
              {
                [sty.addGlobalVariantGroupButtonshowCombos]: hasVariant(
                  $state,
                  "showCombos",
                  "showCombos"
                ),
              }
            )}
            endIcon={
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__dy562)}
                role={"img"}
              />
            }
            startIcon={
              <PlussvgIcon
                className={classNames(projectcss.all, sty.svg__rWSpu)}
                role={"img"}
              />
            }
            type={[]}
            withIcons={[]}
          >
            {"New group"}
          </Button>
        }
        className={classNames("__wab_instance", sty.globalVariantsHeader, {
          [sty.globalVariantsHeaderexpandGlobals]: hasVariant(
            $state,
            "expandGlobals",
            "expandGlobals"
          ),

          [sty.globalVariantsHeadershowCombos]: hasVariant(
            $state,
            "showCombos",
            "showCombos"
          ),
        })}
        collapseState={
          hasVariant($state, "expandGlobals", "expandGlobals")
            ? ("expanded" as const)
            : ("collapsed" as const)
        }
        icon={
          <VariantGroupIcon
            className={classNames(projectcss.all, sty.svg___2TCtH)}
            role={"img"}
          />
        }
        showActions={true}
      >
        <TextWithInfo
          data-plasmic-name={"globalVariantsInfo"}
          data-plasmic-override={overrides.globalVariantsInfo}
          className={classNames("__wab_instance", sty.globalVariantsInfo, {
            [sty.globalVariantsInfoexpandGlobals]: hasVariant(
              $state,
              "expandGlobals",
              "expandGlobals"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wY3M
            )}
          >
            {"Global Variants"}
          </div>
        </TextWithInfo>
      </ListSectionHeader>

      {(hasVariant($state, "expandGlobals", "expandGlobals") ? true : true) ? (
        <div
          data-plasmic-name={"globalVariantsContainer"}
          data-plasmic-override={overrides.globalVariantsContainer}
          className={classNames(projectcss.all, sty.globalVariantsContainer, {
            [sty.globalVariantsContainerexpandGlobals]: hasVariant(
              $state,
              "expandGlobals",
              "expandGlobals"
            ),
          })}
        >
          <div
            data-plasmic-name={"screenVariantsContainer"}
            data-plasmic-override={overrides.screenVariantsContainer}
            className={classNames(projectcss.all, sty.screenVariantsContainer)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <VariantSection
                  icon={
                    <DevicessvgIcon
                      className={classNames(projectcss.all, sty.svg__nL2E)}
                      role={"img"}
                    />
                  }
                  showIcon={true}
                  title={
                    <TextWithInfo
                      className={classNames(
                        "__wab_instance",
                        sty.textWithInfo__uScsx
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j4JSq
                        )}
                      >
                        {"Screen"}
                      </div>
                    </TextWithInfo>
                  }
                >
                  <VariantRow
                    className={classNames(
                      "__wab_instance",
                      sty.variantRow__dMgjq
                    )}
                    icon={
                      <VariantsvgIcon
                        className={classNames(projectcss.all, sty.svg__wlkUw)}
                        role={"img"}
                      />
                    }
                  >
                    {"Tablet"}
                  </VariantRow>

                  <VariantRow
                    className={classNames(
                      "__wab_instance",
                      sty.variantRow__hyun9
                    )}
                    icon={
                      <VariantsvgIcon
                        className={classNames(projectcss.all, sty.svg__lUqCp)}
                        role={"img"}
                      />
                    }
                  >
                    {"Mobile"}
                  </VariantRow>
                </VariantSection>
              ),

              value: args.screenVariantGroups,
            })}
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <VariantSection
                className={classNames(
                  "__wab_instance",
                  sty.variantSection__aSoAs
                )}
                icon={
                  <GlobeIcon
                    className={classNames(projectcss.all, sty.svg___1DyJo)}
                    role={"img"}
                  />
                }
                title={"Theme"}
              >
                <VariantRow
                  className={classNames(
                    "__wab_instance",
                    sty.variantRow__qYbRq
                  )}
                  icon={
                    <VariantIcon
                      className={classNames(projectcss.all, sty.svg__plWb6)}
                      role={"img"}
                    />
                  }
                >
                  {"Dark"}
                </VariantRow>
              </VariantSection>
            ),

            value: args.globalVariantGroups,
          })}
        </div>
      ) : null}
      {(hasVariant($state, "showCombos", "showCombos") ? true : true) ? (
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator___3TlC,
            {
              [sty.listSectionSeparatorshowCombos___3TlCYjQRl]: hasVariant(
                $state,
                "showCombos",
                "showCombos"
              ),
            }
          )}
        />
      ) : null}
      {(hasVariant($state, "showCombos", "showCombos") ? true : false) ? (
        <VariantCombosSection
          data-plasmic-name={"variantCombosSection"}
          data-plasmic-override={overrides.variantCombosSection}
          className={classNames("__wab_instance", sty.variantCombosSection, {
            [sty.variantCombosSectionshowCombos]: hasVariant(
              $state,
              "showCombos",
              "showCombos"
            ),
          })}
          isExpanded={true}
          otherCombos={
            <React.Fragment>
              <VariantComboRow
                labelContainer={
                  <React.Fragment>
                    <Chip>
                      <div
                        data-plasmic-name={"textNode333"}
                        data-plasmic-override={overrides.textNode333}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode333
                        )}
                      >
                        {"Type: Bordered"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode23343"}
                        data-plasmic-override={overrides.textNode23343}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode23343
                        )}
                      >
                        {"Color: Primary"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode233323"}
                        data-plasmic-override={overrides.textNode233323}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode233323
                        )}
                      >
                        {"Hover"}
                      </div>
                    </Chip>
                  </React.Fragment>
                }
              />

              <VariantComboRow
                className={classNames(
                  "__wab_instance",
                  sty.variantComboRow__hdnci
                )}
                isIndicated={true}
                labelContainer={
                  <React.Fragment>
                    <Chip>
                      <div
                        data-plasmic-name={"textNode3323"}
                        data-plasmic-override={overrides.textNode3323}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode3323
                        )}
                      >
                        {"Type: Bordered"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode233423"}
                        data-plasmic-override={overrides.textNode233423}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode233423
                        )}
                      >
                        {"Color: Primary"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode2333223"}
                        data-plasmic-override={overrides.textNode2333223}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode2333223
                        )}
                      >
                        {"Hover"}
                      </div>
                    </Chip>
                  </React.Fragment>
                }
              />

              <VariantComboRow
                className={classNames(
                  "__wab_instance",
                  sty.variantComboRow__bJv4L
                )}
                labelContainer={
                  <React.Fragment>
                    <Chip>
                      <div
                        data-plasmic-name={"textNode33222"}
                        data-plasmic-override={overrides.textNode33222}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode33222
                        )}
                      >
                        {"Type: Bordered"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode2334222"}
                        data-plasmic-override={overrides.textNode2334222}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode2334222
                        )}
                      >
                        {"Color: Primary"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode23332222"}
                        data-plasmic-override={overrides.textNode23332222}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode23332222
                        )}
                      >
                        {"Hover"}
                      </div>
                    </Chip>
                  </React.Fragment>
                }
              />
            </React.Fragment>
          }
          relevantCombos={
            <React.Fragment>
              <VariantComboRow
                labelContainer={
                  <React.Fragment>
                    <Chip>
                      <div
                        data-plasmic-name={"textNode33"}
                        data-plasmic-override={overrides.textNode33}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode33
                        )}
                      >
                        {"Type: Bordered"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode2334"}
                        data-plasmic-override={overrides.textNode2334}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode2334
                        )}
                      >
                        {"Color: Primary"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode23332"}
                        data-plasmic-override={overrides.textNode23332}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode23332
                        )}
                      >
                        {"Hover"}
                      </div>
                    </Chip>
                  </React.Fragment>
                }
              />

              <VariantComboRow
                className={classNames(
                  "__wab_instance",
                  sty.variantComboRow__osk7K
                )}
                isIndicated={true}
                labelContainer={
                  <React.Fragment>
                    <Chip>
                      <div
                        data-plasmic-name={"textNode332"}
                        data-plasmic-override={overrides.textNode332}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode332
                        )}
                      >
                        {"Type: Bordered"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode23342"}
                        data-plasmic-override={overrides.textNode23342}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode23342
                        )}
                      >
                        {"Color: Primary"}
                      </div>
                    </Chip>

                    <Chip>
                      <div
                        data-plasmic-name={"textNode233322"}
                        data-plasmic-override={overrides.textNode233322}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.textNode233322
                        )}
                      >
                        {"Hover"}
                      </div>
                    </Chip>
                  </React.Fragment>
                }
              />
            </React.Fragment>
          }
        />
      ) : null}
      {(hasVariant($state, "showCombos", "showCombos") ? true : true) ? (
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__yClZf,
            {
              [sty.listSectionSeparatorshowCombos__yClZfYjQRl]: hasVariant(
                $state,
                "showCombos",
                "showCombos"
              ),
            }
          )}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "variantsInfo",
    "addVariantGroupButton",
    "body",
    "baseVariantRow",
    "variantGroupsContainer",
    "styleVariantsSection",
    "interactionVariantsInfo",
    "textNode",
    "superComponentsContainer",
    "globalVariantsHeader",
    "globalVariantsInfo",
    "addGlobalVariantGroupButton",
    "globalVariantsContainer",
    "screenVariantsContainer",
    "variantCombosSection",
    "textNode33",
    "textNode2334",
    "textNode23332",
    "textNode332",
    "textNode23342",
    "textNode233322",
    "textNode333",
    "textNode23343",
    "textNode233323",
    "textNode3323",
    "textNode233423",
    "textNode2333223",
    "textNode33222",
    "textNode2334222",
    "textNode23332222",
  ],

  header: ["header", "variantsInfo", "addVariantGroupButton"],
  variantsInfo: ["variantsInfo"],
  addVariantGroupButton: ["addVariantGroupButton"],
  body: [
    "body",
    "baseVariantRow",
    "variantGroupsContainer",
    "styleVariantsSection",
    "interactionVariantsInfo",
    "textNode",
    "superComponentsContainer",
  ],

  baseVariantRow: ["baseVariantRow"],
  variantGroupsContainer: ["variantGroupsContainer"],
  styleVariantsSection: [
    "styleVariantsSection",
    "interactionVariantsInfo",
    "textNode",
  ],

  interactionVariantsInfo: ["interactionVariantsInfo"],
  textNode: ["textNode"],
  superComponentsContainer: ["superComponentsContainer"],
  globalVariantsHeader: [
    "globalVariantsHeader",
    "globalVariantsInfo",
    "addGlobalVariantGroupButton",
  ],

  globalVariantsInfo: ["globalVariantsInfo"],
  addGlobalVariantGroupButton: ["addGlobalVariantGroupButton"],
  globalVariantsContainer: [
    "globalVariantsContainer",
    "screenVariantsContainer",
  ],

  screenVariantsContainer: ["screenVariantsContainer"],
  variantCombosSection: [
    "variantCombosSection",
    "textNode33",
    "textNode2334",
    "textNode23332",
    "textNode332",
    "textNode23342",
    "textNode233322",
    "textNode333",
    "textNode23343",
    "textNode233323",
    "textNode3323",
    "textNode233423",
    "textNode2333223",
    "textNode33222",
    "textNode2334222",
    "textNode23332222",
  ],

  textNode33: ["textNode33"],
  textNode2334: ["textNode2334"],
  textNode23332: ["textNode23332"],
  textNode332: ["textNode332"],
  textNode23342: ["textNode23342"],
  textNode233322: ["textNode233322"],
  textNode333: ["textNode333"],
  textNode23343: ["textNode23343"],
  textNode233323: ["textNode233323"],
  textNode3323: ["textNode3323"],
  textNode233423: ["textNode233423"],
  textNode2333223: ["textNode2333223"],
  textNode33222: ["textNode33222"],
  textNode2334222: ["textNode2334222"],
  textNode23332222: ["textNode23332222"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  variantsInfo: typeof TextWithInfo;
  addVariantGroupButton: typeof ActionMenuButton;
  body: "div";
  baseVariantRow: typeof VariantRow;
  variantGroupsContainer: "div";
  styleVariantsSection: typeof VariantSection;
  interactionVariantsInfo: typeof TextWithInfo;
  textNode: "div";
  superComponentsContainer: "div";
  globalVariantsHeader: typeof ListSectionHeader;
  globalVariantsInfo: typeof TextWithInfo;
  addGlobalVariantGroupButton: typeof Button;
  globalVariantsContainer: "div";
  screenVariantsContainer: "div";
  variantCombosSection: typeof VariantCombosSection;
  textNode33: "div";
  textNode2334: "div";
  textNode23332: "div";
  textNode332: "div";
  textNode23342: "div";
  textNode233322: "div";
  textNode333: "div";
  textNode23343: "div";
  textNode233323: "div";
  textNode3323: "div";
  textNode233423: "div";
  textNode2333223: "div";
  textNode33222: "div";
  textNode2334222: "div";
  textNode23332222: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantsPanel__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicVariantsPanel__VariantsArgs;
  args?: PlasmicVariantsPanel__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicVariantsPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicVariantsPanel__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVariantsPanel__ArgProps,
          internalVariantPropNames: PlasmicVariantsPanel__VariantProps,
        }),

      [props, nodeName]
    );

    return PlasmicVariantsPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantsPanel";
  } else {
    func.displayName = `PlasmicVariantsPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantsPanel = Object.assign(
  // Top-level PlasmicVariantsPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    variantsInfo: makeNodeComponent("variantsInfo"),
    addVariantGroupButton: makeNodeComponent("addVariantGroupButton"),
    body: makeNodeComponent("body"),
    baseVariantRow: makeNodeComponent("baseVariantRow"),
    variantGroupsContainer: makeNodeComponent("variantGroupsContainer"),
    styleVariantsSection: makeNodeComponent("styleVariantsSection"),
    interactionVariantsInfo: makeNodeComponent("interactionVariantsInfo"),
    textNode: makeNodeComponent("textNode"),
    superComponentsContainer: makeNodeComponent("superComponentsContainer"),
    globalVariantsHeader: makeNodeComponent("globalVariantsHeader"),
    globalVariantsInfo: makeNodeComponent("globalVariantsInfo"),
    addGlobalVariantGroupButton: makeNodeComponent(
      "addGlobalVariantGroupButton"
    ),

    globalVariantsContainer: makeNodeComponent("globalVariantsContainer"),
    screenVariantsContainer: makeNodeComponent("screenVariantsContainer"),
    variantCombosSection: makeNodeComponent("variantCombosSection"),
    textNode33: makeNodeComponent("textNode33"),
    textNode2334: makeNodeComponent("textNode2334"),
    textNode23332: makeNodeComponent("textNode23332"),
    textNode332: makeNodeComponent("textNode332"),
    textNode23342: makeNodeComponent("textNode23342"),
    textNode233322: makeNodeComponent("textNode233322"),
    textNode333: makeNodeComponent("textNode333"),
    textNode23343: makeNodeComponent("textNode23343"),
    textNode233323: makeNodeComponent("textNode233323"),
    textNode3323: makeNodeComponent("textNode3323"),
    textNode233423: makeNodeComponent("textNode233423"),
    textNode2333223: makeNodeComponent("textNode2333223"),
    textNode33222: makeNodeComponent("textNode33222"),
    textNode2334222: makeNodeComponent("textNode2334222"),
    textNode23332222: makeNodeComponent("textNode23332222"),

    // Metadata about props expected for PlasmicVariantsPanel
    internalVariantProps: PlasmicVariantsPanel__VariantProps,
    internalArgProps: PlasmicVariantsPanel__ArgProps,
  }
);

export default PlasmicVariantsPanel;
/* prettier-ignore-end */
