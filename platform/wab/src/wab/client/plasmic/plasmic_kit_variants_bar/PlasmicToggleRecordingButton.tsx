// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kdj5vahTyUKxznuR6rrtt6
// Component: j_Jdg2E_a5

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants_bar.module.css"; // plasmic-import: kdj5vahTyUKxznuR6rrtt6/projectcss
import sty from "./PlasmicToggleRecordingButton.module.css"; // plasmic-import: j_Jdg2E_a5/css

export type PlasmicToggleRecordingButton__VariantMembers = {
  isRecording: "isRecording";
  contained: "contained";
};

export type PlasmicToggleRecordingButton__VariantsArgs = {
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  contained?: SingleBooleanChoiceArg<"contained">;
};

type VariantPropType = keyof PlasmicToggleRecordingButton__VariantsArgs;
export const PlasmicToggleRecordingButton__VariantProps =
  new Array<VariantPropType>("isRecording", "contained");

export type PlasmicToggleRecordingButton__ArgsType = {};
type ArgPropType = keyof PlasmicToggleRecordingButton__ArgsType;
export const PlasmicToggleRecordingButton__ArgProps = new Array<ArgPropType>();

export type PlasmicToggleRecordingButton__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultToggleRecordingButtonProps {
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  contained?: SingleBooleanChoiceArg<"contained">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicToggleRecordingButton__RenderFunc(props: {
  variants: PlasmicToggleRecordingButton__VariantsArgs;
  args: PlasmicToggleRecordingButton__ArgsType;
  overrides: PlasmicToggleRecordingButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isRecording",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isRecording,
      },

      {
        path: "contained",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.contained,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcontained]: hasVariant($state, "contained", "contained"),
          [sty.rootisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        })}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToggleRecordingButton__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicToggleRecordingButton__VariantsArgs;
  args?: PlasmicToggleRecordingButton__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicToggleRecordingButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicToggleRecordingButton__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicToggleRecordingButton__ArgProps,
          internalVariantPropNames: PlasmicToggleRecordingButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicToggleRecordingButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToggleRecordingButton";
  } else {
    func.displayName = `PlasmicToggleRecordingButton.${nodeName}`;
  }
  return func;
}

export const PlasmicToggleRecordingButton = Object.assign(
  // Top-level PlasmicToggleRecordingButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicToggleRecordingButton
    internalVariantProps: PlasmicToggleRecordingButton__VariantProps,
    internalArgProps: PlasmicToggleRecordingButton__ArgProps,
  }
);

export default PlasmicToggleRecordingButton;
/* prettier-ignore-end */
