// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kdj5vahTyUKxznuR6rrtt6
// Component: 4OLKnpGnTY

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants_bar.module.css"; // plasmic-import: kdj5vahTyUKxznuR6rrtt6/projectcss
import sty from "./PlasmicVariantBadge.module.css"; // plasmic-import: 4OLKnpGnTY/css

import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import ClosesvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon

export type PlasmicVariantBadge__VariantMembers = {
  isRecording: "isRecording";
  isUnpinnable: "isUnpinnable";
  isFocused: "isFocused";
};

export type PlasmicVariantBadge__VariantsArgs = {
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  isUnpinnable?: SingleBooleanChoiceArg<"isUnpinnable">;
  isFocused?: SingleBooleanChoiceArg<"isFocused">;
};

type VariantPropType = keyof PlasmicVariantBadge__VariantsArgs;
export const PlasmicVariantBadge__VariantProps = new Array<VariantPropType>(
  "isRecording",
  "isUnpinnable",
  "isFocused"
);

export type PlasmicVariantBadge__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVariantBadge__ArgsType;
export const PlasmicVariantBadge__ArgProps = new Array<ArgPropType>("children");

export type PlasmicVariantBadge__OverridesType = {
  root?: p.Flex<"div">;
  removeIcon?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultVariantBadgeProps {
  children?: React.ReactNode;
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  isUnpinnable?: SingleBooleanChoiceArg<"isUnpinnable">;
  isFocused?: SingleBooleanChoiceArg<"isFocused">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicVariantBadge__RenderFunc(props: {
  variants: PlasmicVariantBadge__VariantsArgs;
  args: PlasmicVariantBadge__ArgsType;
  overrides: PlasmicVariantBadge__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isRecording",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isRecording,
      },

      {
        path: "isUnpinnable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isUnpinnable,
      },

      {
        path: "isFocused",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isFocused,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisFocused]: hasVariant($state, "isFocused", "isFocused"),
          [sty.rootisFocused_isUnpinnable]:
            hasVariant($state, "isFocused", "isFocused") &&
            hasVariant($state, "isUnpinnable", "isUnpinnable"),
          [sty.rootisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
          [sty.rootisRecording_isFocused]:
            hasVariant($state, "isFocused", "isFocused") &&
            hasVariant($state, "isRecording", "isRecording"),
          [sty.rootisRecording_isFocused_isUnpinnable]:
            hasVariant($state, "isFocused", "isFocused") &&
            hasVariant($state, "isUnpinnable", "isUnpinnable") &&
            hasVariant($state, "isRecording", "isRecording"),
          [sty.rootisRecording_isUnpinnable]:
            hasVariant($state, "isRecording", "isRecording") &&
            hasVariant($state, "isUnpinnable", "isUnpinnable"),
          [sty.rootisUnpinnable]: hasVariant(
            $state,
            "isUnpinnable",
            "isUnpinnable"
          ),
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "hello world",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenisFocused]: hasVariant(
            $state,
            "isFocused",
            "isFocused"
          ),
          [sty.slotTargetChildrenisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
          [sty.slotTargetChildrenisRecording_isFocused]:
            hasVariant($state, "isFocused", "isFocused") &&
            hasVariant($state, "isRecording", "isRecording"),
          [sty.slotTargetChildrenisRecording_isFocused_isUnpinnable]:
            hasVariant($state, "isFocused", "isFocused") &&
            hasVariant($state, "isUnpinnable", "isUnpinnable") &&
            hasVariant($state, "isRecording", "isRecording"),
          [sty.slotTargetChildrenisUnpinnable]: hasVariant(
            $state,
            "isUnpinnable",
            "isUnpinnable"
          ),
        }),
      })}

      {(
        hasVariant($state, "isFocused", "isFocused") &&
        hasVariant($state, "isUnpinnable", "isUnpinnable")
          ? true
          : hasVariant($state, "isUnpinnable", "isUnpinnable")
          ? false
          : false
      ) ? (
        <div
          data-plasmic-name={"removeIcon"}
          data-plasmic-override={overrides.removeIcon}
          className={classNames(projectcss.all, sty.removeIcon, {
            [sty.removeIconisFocused]: hasVariant(
              $state,
              "isFocused",
              "isFocused"
            ),
            [sty.removeIconisFocused_isUnpinnable]:
              hasVariant($state, "isFocused", "isFocused") &&
              hasVariant($state, "isUnpinnable", "isUnpinnable"),
            [sty.removeIconisRecording]: hasVariant(
              $state,
              "isRecording",
              "isRecording"
            ),
            [sty.removeIconisRecording_isFocused]:
              hasVariant($state, "isFocused", "isFocused") &&
              hasVariant($state, "isRecording", "isRecording"),
            [sty.removeIconisRecording_isFocused_isUnpinnable]:
              hasVariant($state, "isFocused", "isFocused") &&
              hasVariant($state, "isUnpinnable", "isUnpinnable") &&
              hasVariant($state, "isRecording", "isRecording"),
            [sty.removeIconisUnpinnable]: hasVariant(
              $state,
              "isUnpinnable",
              "isUnpinnable"
            ),
          })}
        >
          <p.PlasmicIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            PlasmicIconType={
              hasVariant($state, "isFocused", "isFocused") &&
              hasVariant($state, "isUnpinnable", "isUnpinnable") &&
              hasVariant($state, "isRecording", "isRecording")
                ? ClosesvgIcon
                : CloseIcon
            }
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgisFocused]: hasVariant($state, "isFocused", "isFocused"),
              [sty.svgisFocused_isUnpinnable]:
                hasVariant($state, "isFocused", "isFocused") &&
                hasVariant($state, "isUnpinnable", "isUnpinnable"),
              [sty.svgisRecording]: hasVariant(
                $state,
                "isRecording",
                "isRecording"
              ),
              [sty.svgisRecording_isFocused_isUnpinnable]:
                hasVariant($state, "isFocused", "isFocused") &&
                hasVariant($state, "isUnpinnable", "isUnpinnable") &&
                hasVariant($state, "isRecording", "isRecording"),
            })}
            role={"img"}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "removeIcon", "svg"],
  removeIcon: ["removeIcon", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  removeIcon: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantBadge__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicVariantBadge__VariantsArgs;
  args?: PlasmicVariantBadge__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicVariantBadge__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicVariantBadge__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVariantBadge__ArgProps,
          internalVariantPropNames: PlasmicVariantBadge__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicVariantBadge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantBadge";
  } else {
    func.displayName = `PlasmicVariantBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantBadge = Object.assign(
  // Top-level PlasmicVariantBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    removeIcon: makeNodeComponent("removeIcon"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicVariantBadge
    internalVariantProps: PlasmicVariantBadge__VariantProps,
    internalArgProps: PlasmicVariantBadge__ArgProps,
  }
);

export default PlasmicVariantBadge;
/* prettier-ignore-end */
