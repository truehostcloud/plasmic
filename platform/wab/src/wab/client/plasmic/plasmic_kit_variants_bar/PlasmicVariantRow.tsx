// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kdj5vahTyUKxznuR6rrtt6
// Component: 0Rv3wK0NN-

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_variants_bar.module.css"; // plasmic-import: kdj5vahTyUKxznuR6rrtt6/projectcss
import sty from "./PlasmicVariantRow.module.css"; // plasmic-import: 0Rv3wK0NN-/css

import ComponentBaseIcon from "../plasmic_kit/PlasmicIcon__ComponentBase"; // plasmic-import: FMSGLwXiQt0qP/icon

export type PlasmicVariantRow__VariantMembers = {
  isBase: "isBase";
  isRecording: "isRecording";
  highlight: "highlight";
};

export type PlasmicVariantRow__VariantsArgs = {
  isBase?: SingleBooleanChoiceArg<"isBase">;
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  highlight?: SingleBooleanChoiceArg<"highlight">;
};

type VariantPropType = keyof PlasmicVariantRow__VariantsArgs;
export const PlasmicVariantRow__VariantProps = new Array<VariantPropType>(
  "isBase",
  "isRecording",
  "highlight"
);

export type PlasmicVariantRow__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVariantRow__ArgsType;
export const PlasmicVariantRow__ArgProps = new Array<ArgPropType>("children");

export type PlasmicVariantRow__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultVariantRowProps {
  children?: React.ReactNode;
  isBase?: SingleBooleanChoiceArg<"isBase">;
  isRecording?: SingleBooleanChoiceArg<"isRecording">;
  highlight?: SingleBooleanChoiceArg<"highlight">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicVariantRow__RenderFunc(props: {
  variants: PlasmicVariantRow__VariantsArgs;
  args: PlasmicVariantRow__ArgsType;
  overrides: PlasmicVariantRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isBase",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isBase,
      },

      {
        path: "isRecording",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isRecording,
      },

      {
        path: "highlight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.highlight,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothighlight]: hasVariant($state, "highlight", "highlight"),
          [sty.roothighlight_isBase]:
            hasVariant($state, "highlight", "highlight") &&
            hasVariant($state, "isBase", "isBase"),
          [sty.roothighlight_isRecording]:
            hasVariant($state, "highlight", "highlight") &&
            hasVariant($state, "isRecording", "isRecording"),
          [sty.rootisBase]: hasVariant($state, "isBase", "isBase"),
          [sty.rootisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        }
      )}
    >
      {(hasVariant($state, "isBase", "isBase") ? true : false) ? (
        <ComponentBaseIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisBase]: hasVariant($state, "isBase", "isBase"),
          })}
          role={"img"}
        />
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: "Enter some text",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenisBase]: hasVariant(
            $state,
            "isBase",
            "isBase"
          ),
          [sty.slotTargetChildrenisRecording]: hasVariant(
            $state,
            "isRecording",
            "isRecording"
          ),
        }),
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantRow__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicVariantRow__VariantsArgs;
  args?: PlasmicVariantRow__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicVariantRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicVariantRow__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVariantRow__ArgProps,
          internalVariantPropNames: PlasmicVariantRow__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicVariantRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantRow";
  } else {
    func.displayName = `PlasmicVariantRow.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantRow = Object.assign(
  // Top-level PlasmicVariantRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicVariantRow
    internalVariantProps: PlasmicVariantRow__VariantProps,
    internalArgProps: PlasmicVariantRow__ArgProps,
  }
);

export default PlasmicVariantRow;
/* prettier-ignore-end */
