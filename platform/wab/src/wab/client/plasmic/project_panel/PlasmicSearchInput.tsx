// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m8VxGcigeLAEXFe8c12w5Q
// Component: CHoUJxFMpo

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_project_panel.module.css"; // plasmic-import: m8VxGcigeLAEXFe8c12w5Q/projectcss
import sty from "./PlasmicSearchInput.module.css"; // plasmic-import: CHoUJxFMpo/css

import SearchIcon from "../plasmic_kit/PlasmicIcon__Search"; // plasmic-import: sjONHoK61vpSz/icon
import CloseCircleSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseCircleSvg"; // plasmic-import: fJk_6BdDE/icon

createPlasmicElementProxy;

export type PlasmicSearchInput__VariantMembers = {
  collapsed: "collapsed";
  withShortcut: "withShortcut";
};
export type PlasmicSearchInput__VariantsArgs = {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  withShortcut?: SingleBooleanChoiceArg<"withShortcut">;
};
type VariantPropType = keyof PlasmicSearchInput__VariantsArgs;
export const PlasmicSearchInput__VariantProps = new Array<VariantPropType>(
  "collapsed",
  "withShortcut"
);

export type PlasmicSearchInput__ArgsType = {};
type ArgPropType = keyof PlasmicSearchInput__ArgsType;
export const PlasmicSearchInput__ArgProps = new Array<ArgPropType>();

export type PlasmicSearchInput__OverridesType = {
  searchInputContainer?: Flex__<"div">;
  svg?: Flex__<"svg">;
  searchInput?: Flex__<"input">;
  freeBox?: Flex__<"div">;
  clearFieldIcon?: Flex__<"svg">;
  shortcut?: Flex__<"div">;
};

export interface DefaultSearchInputProps {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  withShortcut?: SingleBooleanChoiceArg<"withShortcut">;
  className?: string;
}

const $$ = {};

function PlasmicSearchInput__RenderFunc(props: {
  variants: PlasmicSearchInput__VariantsArgs;
  args: PlasmicSearchInput__ArgsType;
  overrides: PlasmicSearchInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed,
      },
      {
        path: "withShortcut",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withShortcut,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [
    isSearchInputContainerFocusVisibleWithin,
    triggerSearchInputContainerFocusVisibleWithinProps,
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: true,
  });
  const triggers = {
    focusVisibleWithin_searchInputContainer:
      isSearchInputContainerFocusVisibleWithin,
  };

  return (
    <div
      data-plasmic-name={"searchInputContainer"}
      data-plasmic-override={overrides.searchInputContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.searchInputContainer,
        {
          [sty.searchInputContainer___focusVisibleWithin]:
            triggers.focusVisibleWithin_searchInputContainer,
          [sty.searchInputContainercollapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          ),
          [sty.searchInputContainerwithShortcut]: hasVariant(
            $state,
            "withShortcut",
            "withShortcut"
          ),
          [sty.searchInputContainerwithShortcut_collapsed]:
            hasVariant($state, "collapsed", "collapsed") &&
            hasVariant($state, "withShortcut", "withShortcut"),
        }
      )}
      data-plasmic-trigger-props={[
        triggerSearchInputContainerFocusVisibleWithinProps,
      ]}
    >
      <SearchIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgcollapsed]: hasVariant($state, "collapsed", "collapsed"),
        })}
        role={"img"}
      />

      {(hasVariant($state, "collapsed", "collapsed") ? false : true) ? (
        <input
          data-plasmic-name={"searchInput"}
          data-plasmic-override={overrides.searchInput}
          className={classNames(
            projectcss.all,
            projectcss.input,
            sty.searchInput,
            {
              [sty.searchInput___focusVisibleWithin]:
                triggers.focusVisibleWithin_searchInputContainer,
              [sty.searchInputcollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              ),
              [sty.searchInputwithShortcut]: hasVariant(
                $state,
                "withShortcut",
                "withShortcut"
              ),
            }
          )}
          placeholder={"Searchâ€¦"}
          ref={(ref) => {
            $refs["searchInput"] = ref;
          }}
          size={1}
          type={"text"}
          value={""}
        />
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxcollapsed]: hasVariant($state, "collapsed", "collapsed"),
        })}
      >
        {(hasVariant($state, "collapsed", "collapsed") ? false : true) ? (
          <CloseCircleSvgIcon
            data-plasmic-name={"clearFieldIcon"}
            data-plasmic-override={overrides.clearFieldIcon}
            className={classNames(projectcss.all, sty.clearFieldIcon, {
              [sty.clearFieldIconcollapsed]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              ),
            })}
            role={"img"}
          />
        ) : null}
        <div
          data-plasmic-name={"shortcut"}
          data-plasmic-override={overrides.shortcut}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.shortcut,
            {
              [sty.shortcut___focusVisibleWithin]:
                triggers.focusVisibleWithin_searchInputContainer,
              [sty.shortcutwithShortcut]: hasVariant(
                $state,
                "withShortcut",
                "withShortcut"
              ),
            }
          )}
        >
          {"P"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  searchInputContainer: [
    "searchInputContainer",
    "svg",
    "searchInput",
    "freeBox",
    "clearFieldIcon",
    "shortcut",
  ],

  svg: ["svg"],
  searchInput: ["searchInput"],
  freeBox: ["freeBox", "clearFieldIcon", "shortcut"],
  clearFieldIcon: ["clearFieldIcon"],
  shortcut: ["shortcut"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  searchInputContainer: "div";
  svg: "svg";
  searchInput: "input";
  freeBox: "div";
  clearFieldIcon: "svg";
  shortcut: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchInput__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchInput__VariantsArgs;
    args?: PlasmicSearchInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearchInput__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchInput__ArgProps,
          internalVariantPropNames: PlasmicSearchInput__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicSearchInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "searchInputContainer") {
    func.displayName = "PlasmicSearchInput";
  } else {
    func.displayName = `PlasmicSearchInput.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchInput = Object.assign(
  // Top-level PlasmicSearchInput renders the root element
  makeNodeComponent("searchInputContainer"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    searchInput: makeNodeComponent("searchInput"),
    freeBox: makeNodeComponent("freeBox"),
    clearFieldIcon: makeNodeComponent("clearFieldIcon"),
    shortcut: makeNodeComponent("shortcut"),

    // Metadata about props expected for PlasmicSearchInput
    internalVariantProps: PlasmicSearchInput__VariantProps,
    internalArgProps: PlasmicSearchInput__ArgProps,
  }
);

export default PlasmicSearchInput;
/* prettier-ignore-end */
